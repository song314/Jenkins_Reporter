<?xml version='1.0' encoding='UTF-8'?>
<annotation-array>
  <dry plugin="dry@2.40">
    <message>28 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86740</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>121</start>
        <end>148</end>
      </range>
    </lineRanges>
    <primaryLineNumber>121</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/gallery/ui/AlbumSetSlidingWindow.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.gallery.ui</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>427082431</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/gallery/ui</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>28 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86741</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>96</start>
            <end>123</end>
          </range>
        </lineRanges>
        <primaryLineNumber>96</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/gallery/ui/AlbumSlidingWindow.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.gallery.ui</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1175600214</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/gallery/ui</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>if (contentStart &gt;= mContentEnd || mContentStart &gt;= contentEnd) {
            for (int i = mContentStart, n = mContentEnd; i &lt; n; ++i) {
                freeSlotContent(i);
            }
            mSource.setActiveWindow(contentStart, contentEnd);
            for (int i = contentStart; i &lt; contentEnd; ++i) {
                prepareSlotContent(i);
            }
        } else {
            for (int i = mContentStart; i &lt; contentStart; ++i) {
                freeSlotContent(i);
            }
            for (int i = contentEnd, n = mContentEnd; i &lt; n; ++i) {
                freeSlotContent(i);
            }
            mSource.setActiveWindow(contentStart, contentEnd);
            for (int i = contentStart, n = mContentStart; i &lt; n; ++i) {
                prepareSlotContent(i);
            }
            for (int i = mContentEnd; i &lt; contentEnd; ++i) {
                prepareSlotContent(i);
            }
        }
        mContentStart = contentStart;
        mContentEnd = contentEnd;
    }

    public void setActiveWindow(int start, int end) {</sourceCode>
        <number>1874931597</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>if (contentStart &gt;= mContentEnd || mContentStart &gt;= contentEnd) {
            for (int i = mContentStart, n = mContentEnd; i &lt; n; ++i) {
                freeSlotContent(i);
            }
            mSource.setActiveWindow(contentStart, contentEnd);
            for (int i = contentStart; i &lt; contentEnd; ++i) {
                prepareSlotContent(i);
            }
        } else {
            for (int i = mContentStart; i &lt; contentStart; ++i) {
                freeSlotContent(i);
            }
            for (int i = contentEnd, n = mContentEnd; i &lt; n; ++i) {
                freeSlotContent(i);
            }
            mSource.setActiveWindow(contentStart, contentEnd);
            for (int i = contentStart, n = mContentStart; i &lt; n; ++i) {
                prepareSlotContent(i);
            }
            for (int i = mContentEnd; i &lt; contentEnd; ++i) {
                prepareSlotContent(i);
            }
        }
        mContentStart = contentStart;
        mContentEnd = contentEnd;
    }

    public void setActiveWindow(int start, int end) {</sourceCode>
    <number>1874931597</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>12 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86812</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>55</start>
        <end>66</end>
      </range>
    </lineRanges>
    <primaryLineNumber>55</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/gallery/ui/RawTexture.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.gallery.ui</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-284046771</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/gallery/ui</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>12 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86813</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>245</start>
            <end>256</end>
          </range>
        </lineRanges>
        <primaryLineNumber>245</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/gallery/ui/UploadedTexture.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.gallery.ui</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-982489221</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/gallery/ui</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>GLId.glGenTextures(1, sTextureId, 0);
        gl.glBindTexture(GL11.GL_TEXTURE_2D, sTextureId[0]);
        gl.glTexParameterfv(GL11.GL_TEXTURE_2D,
                GL11Ext.GL_TEXTURE_CROP_RECT_OES, sCropRect, 0);
        gl.glTexParameteri(GL11.GL_TEXTURE_2D,
                GL11.GL_TEXTURE_WRAP_S, GL11.GL_CLAMP_TO_EDGE);
        gl.glTexParameteri(GL11.GL_TEXTURE_2D,
                GL11.GL_TEXTURE_WRAP_T, GL11.GL_CLAMP_TO_EDGE);
        gl.glTexParameterf(GL11.GL_TEXTURE_2D,
                GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
        gl.glTexParameterf(GL11.GL_TEXTURE_2D,
                GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);</sourceCode>
        <number>1874931631</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>GLId.glGenTextures(1, sTextureId, 0);
        gl.glBindTexture(GL11.GL_TEXTURE_2D, sTextureId[0]);
        gl.glTexParameterfv(GL11.GL_TEXTURE_2D,
                GL11Ext.GL_TEXTURE_CROP_RECT_OES, sCropRect, 0);
        gl.glTexParameteri(GL11.GL_TEXTURE_2D,
                GL11.GL_TEXTURE_WRAP_S, GL11.GL_CLAMP_TO_EDGE);
        gl.glTexParameteri(GL11.GL_TEXTURE_2D,
                GL11.GL_TEXTURE_WRAP_T, GL11.GL_CLAMP_TO_EDGE);
        gl.glTexParameterf(GL11.GL_TEXTURE_2D,
                GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
        gl.glTexParameterf(GL11.GL_TEXTURE_2D,
                GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);</sourceCode>
    <number>1874931631</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>15 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86827</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>41</start>
        <end>55</end>
      </range>
    </lineRanges>
    <primaryLineNumber>41</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/login/user/ApiPhoneSendVerifyCode.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.login.user</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-55088967</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/login/user</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>15 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86826</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>30</start>
            <end>44</end>
          </range>
        </lineRanges>
        <primaryLineNumber>30</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/login/user/ApiDeletePhoneUser.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.login.user</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>257600183</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/login/user</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>execute(new HttpStringRequest(Request.Method.POST, url) {
            @Override
            protected Map&lt;String, String&gt; getParams() throws AuthFailureError {
                Map&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();
                LoginConfig.prepareCommonParams(mContext, params);
                //性别参数
                params.put(&quot;mobile&quot;, mPhoneNumber);
                //获取签名
                String sig = com.pinguo.Camera360Lib.utils.NetworkUtils.getSigByParamMap(params);
                params.put(&quot;sig&quot;, sig);
                return params;
            }

            @Override
            protected void onResponse(String s) {</sourceCode>
        <number>1874931638</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>execute(new HttpStringRequest(Request.Method.POST, url) {
            @Override
            protected Map&lt;String, String&gt; getParams() throws AuthFailureError {
                Map&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();
                LoginConfig.prepareCommonParams(mContext, params);
                //性别参数
                params.put(&quot;mobile&quot;, mPhoneNumber);
                //获取签名
                String sig = com.pinguo.Camera360Lib.utils.NetworkUtils.getSigByParamMap(params);
                params.put(&quot;sig&quot;, sig);
                return params;
            }

            @Override
            protected void onResponse(String s) {</sourceCode>
    <number>1874931638</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>37 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86728</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>3</start>
        <end>39</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/camera/entity/IntArray.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.camera.entity</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>1909437404</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/camera/entity</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>37 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86729</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>19</start>
            <end>55</end>
          </range>
        </lineRanges>
        <primaryLineNumber>19</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/gallery/util/IntArray.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.gallery.util</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1601842488</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/gallery/util</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>public class IntArray {
    private static final int INIT_CAPACITY = 8;

    private int mData[] = new int[INIT_CAPACITY];
    private int mSize = 0;

    public void add(int value) {
        if (mData.length == mSize) {
            int temp[] = new int[mSize + mSize];
            System.arraycopy(mData, 0, temp, 0, mSize);
            mData = temp;
        }
        mData[mSize++] = value;
    }

    public int size() {
        return mSize;
    }

    // For testing only
    public int[] toArray(int[] result) {
        if (result == null || result.length &lt; mSize) {
            result = new int[mSize];
        }
        System.arraycopy(mData, 0, result, 0, mSize);
        return result;
    }

    public int[] getInternalArray() {
        return mData;
    }

    public void clear() {
        mSize = 0;
        if (mData.length != INIT_CAPACITY) mData = new int[INIT_CAPACITY];
    }
}</sourceCode>
        <number>1874931591</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>public class IntArray {
    private static final int INIT_CAPACITY = 8;

    private int mData[] = new int[INIT_CAPACITY];
    private int mSize = 0;

    public void add(int value) {
        if (mData.length == mSize) {
            int temp[] = new int[mSize + mSize];
            System.arraycopy(mData, 0, temp, 0, mSize);
            mData = temp;
        }
        mData[mSize++] = value;
    }

    public int size() {
        return mSize;
    }

    // For testing only
    public int[] toArray(int[] result) {
        if (result == null || result.length &lt; mSize) {
            result = new int[mSize];
        }
        System.arraycopy(mData, 0, result, 0, mSize);
        return result;
    }

    public int[] getInternalArray() {
        return mData;
    }

    public void clear() {
        mSize = 0;
        if (mData.length != INIT_CAPACITY) mData = new int[INIT_CAPACITY];
    }
}</sourceCode>
    <number>1874931591</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>35 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86734</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>105</start>
        <end>139</end>
      </range>
    </lineRanges>
    <primaryLineNumber>105</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/effect/model/EffectResourceManager.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.effect.model</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>1582239579</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/effect/model</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>35 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86735</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>149</start>
            <end>183</end>
          </range>
        </lineRanges>
        <primaryLineNumber>149</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/effect/model/EffectResourceManager.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.effect.model</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>445470180</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/effect/model</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>&quot;AND locale = ?&quot;, new String[]{localeStr});

            if ( null != cursor ) {
                while (cursor.moveToNext()) {
                    CompositeEffect ce = new CompositeEffect();
                    ce.key = cursor.getString(0);
                    ce.name = cursor.getString(1);
                    ce.locale = cursor.getString(2);
                    ce.isDefault = cursor.getInt(3);
                    ce.jsonStr = cursor.getString(4);
                    ce.tags = cursor.getString(5);
                    ces.add(ce);
                }
                cursor.close();
            }

        } catch (Exception e) {
            GLogger.e(TAG, e);
        } finally {
            if (null != cursor)
                cursor.close();
            if (null != db &amp;&amp; db.isOpen())
                db.close();
        }

        // init ce in ces
        for ( CompositeEffect ce : ces ) {
            ce.init();
        }

        return ces;
    }

    @Override
    public List&lt;CompositeEffect&gt; getCompositeEffectsByRandom(int count) {</sourceCode>
        <number>1874931594</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>&quot;AND locale = ?&quot;, new String[]{localeStr});

            if ( null != cursor ) {
                while (cursor.moveToNext()) {
                    CompositeEffect ce = new CompositeEffect();
                    ce.key = cursor.getString(0);
                    ce.name = cursor.getString(1);
                    ce.locale = cursor.getString(2);
                    ce.isDefault = cursor.getInt(3);
                    ce.jsonStr = cursor.getString(4);
                    ce.tags = cursor.getString(5);
                    ces.add(ce);
                }
                cursor.close();
            }

        } catch (Exception e) {
            GLogger.e(TAG, e);
        } finally {
            if (null != cursor)
                cursor.close();
            if (null != db &amp;&amp; db.isOpen())
                db.close();
        }

        // init ce in ces
        for ( CompositeEffect ce : ces ) {
            ce.init();
        }

        return ces;
    }

    @Override
    public List&lt;CompositeEffect&gt; getCompositeEffectsByRandom(int count) {</sourceCode>
    <number>1874931594</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[4]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>14 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86769</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>575</start>
        <end>588</end>
      </range>
    </lineRanges>
    <primaryLineNumber>575</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/camera/CcCameraFragment.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.camera</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>1778442877</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/camera</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>14 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86770</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>846</start>
            <end>859</end>
          </range>
        </lineRanges>
        <primaryLineNumber>846</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/camera/CcCameraFragment.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.camera</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1986856952</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/camera</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>public void onBottomFling(MotionEvent e1, MotionEvent e2) {
        SharedPreferences pref = getActivity().getSharedPreferences(
                PGCompositeSDKApi.PG_EDIT_SDK_DATA_INIT, Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = pref.edit();
        if (e1.getX() &lt; e2.getX()) {
            mViewHolder.mPreviewTouchView.setAllSize(mScreenSize, mScaledSize, mTopMenuHeight, mBottomMenuHeight, 0.75f);
            mViewHolder.mBottomMenuView.selectPictureMode(CameraCaptureModeSelector.CAPTURE_MODE_LONG);
            editor.putInt(ConstantUtil.PREF_CAPTURE_MODE, CameraCaptureModeSelector.CAPTURE_MODE_LONG);
        } else {
            mViewHolder.mPreviewTouchView.setAllSize(mScreenSize, mScaledSize, mTopMenuHeight, mBottomMenuHeight, 1.0f);
            mViewHolder.mBottomMenuView.selectPictureMode(CameraCaptureModeSelector.CAPTURE_MODE_SQUARE);
            editor.putInt(ConstantUtil.PREF_CAPTURE_MODE, CameraCaptureModeSelector.CAPTURE_MODE_SQUARE);
        }
        editor.apply();</sourceCode>
        <number>1874931610</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>public void onBottomFling(MotionEvent e1, MotionEvent e2) {
        SharedPreferences pref = getActivity().getSharedPreferences(
                PGCompositeSDKApi.PG_EDIT_SDK_DATA_INIT, Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = pref.edit();
        if (e1.getX() &lt; e2.getX()) {
            mViewHolder.mPreviewTouchView.setAllSize(mScreenSize, mScaledSize, mTopMenuHeight, mBottomMenuHeight, 0.75f);
            mViewHolder.mBottomMenuView.selectPictureMode(CameraCaptureModeSelector.CAPTURE_MODE_LONG);
            editor.putInt(ConstantUtil.PREF_CAPTURE_MODE, CameraCaptureModeSelector.CAPTURE_MODE_LONG);
        } else {
            mViewHolder.mPreviewTouchView.setAllSize(mScreenSize, mScaledSize, mTopMenuHeight, mBottomMenuHeight, 1.0f);
            mViewHolder.mBottomMenuView.selectPictureMode(CameraCaptureModeSelector.CAPTURE_MODE_SQUARE);
            editor.putInt(ConstantUtil.PREF_CAPTURE_MODE, CameraCaptureModeSelector.CAPTURE_MODE_SQUARE);
        }
        editor.apply();</sourceCode>
    <number>1874931610</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>28 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86767</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>1840</start>
        <end>1867</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1840</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/sdk/BeautyController.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.sdk</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-831837494</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/sdk</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>28 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86768</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>762</start>
            <end>789</end>
          </range>
        </lineRanges>
        <primaryLineNumber>762</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/sdk/GroupController.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.sdk</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1896835776</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/sdk</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>mProgressLayout.setVisibility(View.GONE);
            }

            ToastUtils.makeText(mActivity, R.string.composite_save_photo_failed, Toast.LENGTH_SHORT).show();
        }
    };

    protected void saveFinish(Activity activity, String photoPath) {
        if (null == activity) {
            return;
        }

        if (activity.isFinishing()) {
            return;
        }

        mLastSavePath = photoPath;
        mIsSaved = true;
        // TODO 更改为从配置文件获取返回界面
        Intent intent = new Intent(activity, MixShareActivity.class);
        intent.putExtra(MixShareActivity.EXTRA_PHOTO_PATH, photoPath);
        intent.putExtra(MixShareActivity.EXTRA_ORG_PHOTO_PATH, mPath);

        MakePhotoModel[] makePhotoModels
                = mCompositeForPathRendererMethod.getMakePhotoModelArray();
        CompositeEffect compositeEffect = new CompositeEffect();
        for (MakePhotoModel makePhotoModel : makePhotoModels) {
            if (makePhotoModel != null) {</sourceCode>
        <number>1874931609</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>mProgressLayout.setVisibility(View.GONE);
            }

            ToastUtils.makeText(mActivity, R.string.composite_save_photo_failed, Toast.LENGTH_SHORT).show();
        }
    };

    protected void saveFinish(Activity activity, String photoPath) {
        if (null == activity) {
            return;
        }

        if (activity.isFinishing()) {
            return;
        }

        mLastSavePath = photoPath;
        mIsSaved = true;
        // TODO 更改为从配置文件获取返回界面
        Intent intent = new Intent(activity, MixShareActivity.class);
        intent.putExtra(MixShareActivity.EXTRA_PHOTO_PATH, photoPath);
        intent.putExtra(MixShareActivity.EXTRA_ORG_PHOTO_PATH, mPath);

        MakePhotoModel[] makePhotoModels
                = mCompositeForPathRendererMethod.getMakePhotoModelArray();
        CompositeEffect compositeEffect = new CompositeEffect();
        for (MakePhotoModel makePhotoModel : makePhotoModels) {
            if (makePhotoModel != null) {</sourceCode>
    <number>1874931609</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>25 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86806</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>66</start>
        <end>90</end>
      </range>
    </lineRanges>
    <primaryLineNumber>66</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/gallery/AlbumDataLoader.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.gallery</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>715284721</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/gallery</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>25 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86807</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>68</start>
            <end>92</end>
          </range>
        </lineRanges>
        <primaryLineNumber>68</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/gallery/AlbumSetDataLoader.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.gallery</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1902803462</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/gallery</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>mSetVersion = new long[DATA_CACHE_SIZE];
        Arrays.fill(mItemVersion, MediaObject.INVALID_DATA_VERSION);
        Arrays.fill(mSetVersion, MediaObject.INVALID_DATA_VERSION);
        mMainHandler = new SynchronizedHandler(context.getGLRoot()) {

            @Override
            public void handleMessage(Message message) {
                switch (message.what) {
                    case MSG_RUN_OBJECT:
                        ((Runnable) message.obj).run();
                        return;
                    case MSG_LOAD_START:
                        if (mLoadingListener != null)
                            mLoadingListener.onLoadingStarted();
                        return;
                    case MSG_LOAD_FINISH:
                        if (mLoadingListener != null)
                            mLoadingListener.onLoadingFinished();
                        return;
                }
            }
        };
    }

    public void resume() {</sourceCode>
        <number>1874931628</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>mSetVersion = new long[DATA_CACHE_SIZE];
        Arrays.fill(mItemVersion, MediaObject.INVALID_DATA_VERSION);
        Arrays.fill(mSetVersion, MediaObject.INVALID_DATA_VERSION);
        mMainHandler = new SynchronizedHandler(context.getGLRoot()) {

            @Override
            public void handleMessage(Message message) {
                switch (message.what) {
                    case MSG_RUN_OBJECT:
                        ((Runnable) message.obj).run();
                        return;
                    case MSG_LOAD_START:
                        if (mLoadingListener != null)
                            mLoadingListener.onLoadingStarted();
                        return;
                    case MSG_LOAD_FINISH:
                        if (mLoadingListener != null)
                            mLoadingListener.onLoadingFinished();
                        return;
                }
            }
        };
    }

    public void resume() {</sourceCode>
    <number>1874931628</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[2]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>324 lines of duplicate code.</message>
    <priority>HIGH</priority>
    <key>86683</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>32</start>
        <end>355</end>
      </range>
    </lineRanges>
    <primaryLineNumber>32</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/camera/ui/RotateLayout.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.camera.ui</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-561616196</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/camera/ui</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>324 lines of duplicate code.</message>
        <priority>HIGH</priority>
        <key>86685</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>33</start>
            <end>356</end>
          </range>
        </lineRanges>
        <primaryLineNumber>33</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/ui/RotateLayout.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.ui</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-561616196</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/ui</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
          <dry>
            <message>324 lines of duplicate code.</message>
            <priority>HIGH</priority>
            <key>86684</key>
            <lineRanges>
              <range plugin="analysis-core@1.65">
                <start>31</start>
                <end>354</end>
              </range>
            </lineRanges>
            <primaryLineNumber>31</primaryLineNumber>
            <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/login/view/RotateLayout.java</fileName>
            <moduleName></moduleName>
            <packageName>com.pinguo.edit.sdk.login.view</packageName>
            <category></category>
            <type>Duplicate Code</type>
            <contextHashCode>-561616196</contextHashCode>
            <origin>dry</origin>
            <pathName>src/com/pinguo/edit/sdk/login/view</pathName>
            <primaryColumnStart>0</primaryColumnStart>
            <primaryColumnEnd>0</primaryColumnEnd>
            <links>
              <dry reference="../../../../../.."/>
              <dry reference="../../../.."/>
            </links>
            <sourceCode>@TargetApi(Build.VERSION_CODES.HONEYCOMB)
public class RotateLayout extends ViewGroup implements Rotatable {
    private static boolean LOWER_HONEYCOMB = Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.HONEYCOMB;

    protected View mChild;
    private int mOrientation;

    /**
     * 旋转接口
     *
     * @param context Context
     */
    public RotateLayout(Context context) {
        super(context);
        setBackgroundResource(android.R.color.transparent);
    }

    /**
     * 构造函数
     *
     * @param context Context
     * @param attrs   AttributeSet
     */
    public RotateLayout(Context context, AttributeSet attrs) {
        super(context, attrs);
        setBackgroundResource(android.R.color.transparent);
    }

    /**
     * 构造函数
     *
     * @param context  Context
     * @param attrs    AttributeSet
     * @param defStyle Style
     */
    public RotateLayout(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        setBackgroundResource(android.R.color.transparent);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void onFinishInflate() {
        mChild = getChildAt(0);
        if (!LOWER_HONEYCOMB) {
            mChild.setPivotX(0);
            mChild.setPivotY(0);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void onLayout(boolean change, int left, int top, int right,
                            int bottom) {
        int width = right - left;
        int height = bottom - top;
        switch (mOrientation) {
            case 0:
            case 180:
                mChild.layout(0, 0, width, height);
                break;
            case 90:
            case 270:
                try {
                    mChild.layout(0, 0, height, width);
                    //FIXME BUG3266的崩溃是否是需要修改此地方
                } catch (Exception e) {
                    //nothing to do
                }
                break;
            default:
                //nothing to do
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void onMeasure(int widthSpec, int heightSpec) {

        int w = 0, h = 0;
        switch (mOrientation) {
            case 0:
            case 180:
                measureChild(mChild, widthSpec, heightSpec);
                w = mChild.getMeasuredWidth();
                h = mChild.getMeasuredHeight();
                break;
            case 90:
            case 270:
                measureChild(mChild, heightSpec, widthSpec);
                w = mChild.getMeasuredHeight();
                h = mChild.getMeasuredWidth();
                break;
            default:
                //nothing to do
        }
        setMeasuredDimension(w, h);

        if (!LOWER_HONEYCOMB) {
            switch (mOrientation) {
                case 0:
                    mChild.setTranslationX(0);
                    mChild.setTranslationY(0);
                    break;
                case 90:
                    mChild.setTranslationX(0);
                    mChild.setTranslationY(h);
                    break;
                case 180:
                    mChild.setTranslationX(w);
                    mChild.setTranslationY(h);
                    break;
                case 270:
                    mChild.setTranslationX(w);
                    mChild.setTranslationY(0);
                    break;
                default:
                    //nothing to do
            }
            mChild.setRotation(-mOrientation);
        } else {
            invalidate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void dispatchDraw(Canvas canvas) {
        if (LOWER_HONEYCOMB) {
            switch (mOrientation) {
                case 0:
                    canvas.rotate(-mOrientation, mChild.getWidth() / (float) 2, mChild.getHeight() / (float) 2);
                    break;
                case 180:
                    canvas.rotate(-mOrientation, mChild.getWidth() / (float) 2, mChild.getHeight() / (float) 2);
                    break;
                case 90:
                    canvas.rotate(-mOrientation, mChild.getWidth() / (float) 2, mChild.getWidth() / (float) 2);
                    break;
                case 270:
                    canvas.rotate(-mOrientation, mChild.getHeight() / (float) 2, mChild.getHeight() / (float) 2);
                    break;
                default:
                    //nothing to do
            }

            canvas.save();
            super.dispatchDraw(canvas);
            canvas.restore();
        } else {
            super.dispatchDraw(canvas);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean dispatchTouchEvent(MotionEvent event) {
        if (mOrientation == 0) {
            return super.dispatchTouchEvent(event);
        }

        if (LOWER_HONEYCOMB) {
            float width = getWidth();
            float height = getHeight();
            int count = event.getPointerCount();
            if (count == 1) {
                float x = event.getX();
                float y = event.getY();
                switch (mOrientation) {
                    case 180:
                        event.setLocation(width - x, height - y);
                        break;
                    case 90:
                        event.setLocation(height - y, x);
                        break;
                    case 270:
                        event.setLocation(y, width - x);
                        break;
                    default:
                        event.setLocation(x, y);
                }
                return mChild.dispatchTouchEvent(event);
            }

            // 多点触控限API 9以上
            if (count == 2 &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.GINGERBREAD) {
                MotionEvent newEvent = getMtionEvent(event, count, width, height);
                return mChild.dispatchTouchEvent(newEvent);
            }

            return mChild.dispatchTouchEvent(event);
        }

        return super.dispatchTouchEvent(event);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean shouldDelayChildPressedState() {
        return false;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void setOrientation(int orientation, boolean animation) {
        orientation = orientation % 360;
        if (mOrientation == orientation) return;
        mOrientation = orientation;
        requestLayout();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewParent invalidateChildInParent(int[] location, Rect dirty) {
        if (LOWER_HONEYCOMB) {
            dirty.set(0, 0, getWidth(), getHeight());
        }
        return super.invalidateChildInParent(location, dirty);
    }

    /**
     * 取得转化后的MtionEvent，限API 9，API 10调用
     *
     * @param event  MotionEvent
     * @param count  PointerCount
     * @param width  width
     * @param height height
     * @return 转化后的MtionEvent
     * @author liubo
     */
    @SuppressLint(&quot;Recycle&quot;)
    @TargetApi(Build.VERSION_CODES.GINGERBREAD)
    private MotionEvent getMtionEvent(MotionEvent event, int count, float width, float height) {
        int[] pointerIds = new int[count];
        PointerCoords[] pointerCoords = new PointerCoords[count];

        for (int i = 0; i &lt; count; i++) {
            pointerIds[i] = event.getPointerId(i);

            PointerCoords coord = new PointerCoords();
            float x = event.getX(i);
            float y = event.getY(i);
            switch (mOrientation) {
                case 180:
                    coord.x = width - x;
                    coord.y = height - y;
                    coord.orientation = -event.getOrientation(i);
                    break;
                case 90:
                    coord.x = height - y;
                    coord.y = x;
                    coord.orientation = getCoordOrientation(event.getOrientation(i));
                    break;
                case 270:
                    coord.x = y;
                    coord.y = width - x;
                    coord.orientation = getCoordOrientation(event.getOrientation(i));
                    break;
                default:
                    coord.x = x;
                    coord.y = y;
                    coord.orientation = event.getOrientation(i);
            }

            coord.pressure = event.getPressure(i);
            coord.size = event.getSize(i);
            coord.toolMajor = event.getToolMajor(i);
            coord.toolMinor = event.getToolMinor(i);
            coord.touchMajor = event.getTouchMajor(i);
            coord.touchMinor = event.getTouchMinor(i);

            pointerCoords[i] = coord;
        }

        @SuppressWarnings(&quot;deprecation&quot;)
        MotionEvent newEvent = MotionEvent.obtain(event.getDownTime(),
                event.getEventTime(), event.getAction(), count, pointerIds,
                pointerCoords, event.getMetaState(), event.getXPrecision(),
                event.getYPrecision(), event.getDeviceId(),
                event.getEdgeFlags(), event.getSource(), event.getFlags());
        return newEvent;
    }

    private float getCoordOrientation(float angel) {
        float result = angel;
        switch (mOrientation) {
            case 90:
                result = angel - (float) Math.PI / 2;
                break;
            case 270:
                result = angel + (float) Math.PI / 2;
                break;
            case 180:
                result = -angel;
                break;
            default:
                break;
        }

        if (result &lt; -Math.PI / 2) {
            result += Math.PI;
        } else if (result &gt; Math.PI / 2) {
            result -= Math.PI;
        }

        return result;
    }
}</sourceCode>
            <number>1874931570</number>
            <isDerived>false</isDerived>
          </dry>
        </links>
        <sourceCode>@TargetApi(Build.VERSION_CODES.HONEYCOMB)
public class RotateLayout extends ViewGroup implements Rotatable {
    private static boolean LOWER_HONEYCOMB = Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.HONEYCOMB;

    protected View mChild;
    private int mOrientation;

    /**
     * 旋转接口
     *
     * @param context Context
     */
    public RotateLayout(Context context) {
        super(context);
        setBackgroundResource(android.R.color.transparent);
    }

    /**
     * 构造函数
     *
     * @param context Context
     * @param attrs   AttributeSet
     */
    public RotateLayout(Context context, AttributeSet attrs) {
        super(context, attrs);
        setBackgroundResource(android.R.color.transparent);
    }

    /**
     * 构造函数
     *
     * @param context  Context
     * @param attrs    AttributeSet
     * @param defStyle Style
     */
    public RotateLayout(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        setBackgroundResource(android.R.color.transparent);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void onFinishInflate() {
        mChild = getChildAt(0);
        if (!LOWER_HONEYCOMB) {
            mChild.setPivotX(0);
            mChild.setPivotY(0);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void onLayout(boolean change, int left, int top, int right,
                            int bottom) {
        int width = right - left;
        int height = bottom - top;
        switch (mOrientation) {
            case 0:
            case 180:
                mChild.layout(0, 0, width, height);
                break;
            case 90:
            case 270:
                try {
                    mChild.layout(0, 0, height, width);
                    //FIXME BUG3266的崩溃是否是需要修改此地方
                } catch (Exception e) {
                    //nothing to do
                }
                break;
            default:
                //nothing to do
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void onMeasure(int widthSpec, int heightSpec) {

        int w = 0, h = 0;
        switch (mOrientation) {
            case 0:
            case 180:
                measureChild(mChild, widthSpec, heightSpec);
                w = mChild.getMeasuredWidth();
                h = mChild.getMeasuredHeight();
                break;
            case 90:
            case 270:
                measureChild(mChild, heightSpec, widthSpec);
                w = mChild.getMeasuredHeight();
                h = mChild.getMeasuredWidth();
                break;
            default:
                //nothing to do
        }
        setMeasuredDimension(w, h);

        if (!LOWER_HONEYCOMB) {
            switch (mOrientation) {
                case 0:
                    mChild.setTranslationX(0);
                    mChild.setTranslationY(0);
                    break;
                case 90:
                    mChild.setTranslationX(0);
                    mChild.setTranslationY(h);
                    break;
                case 180:
                    mChild.setTranslationX(w);
                    mChild.setTranslationY(h);
                    break;
                case 270:
                    mChild.setTranslationX(w);
                    mChild.setTranslationY(0);
                    break;
                default:
                    //nothing to do
            }
            mChild.setRotation(-mOrientation);
        } else {
            invalidate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void dispatchDraw(Canvas canvas) {
        if (LOWER_HONEYCOMB) {
            switch (mOrientation) {
                case 0:
                    canvas.rotate(-mOrientation, mChild.getWidth() / (float) 2, mChild.getHeight() / (float) 2);
                    break;
                case 180:
                    canvas.rotate(-mOrientation, mChild.getWidth() / (float) 2, mChild.getHeight() / (float) 2);
                    break;
                case 90:
                    canvas.rotate(-mOrientation, mChild.getWidth() / (float) 2, mChild.getWidth() / (float) 2);
                    break;
                case 270:
                    canvas.rotate(-mOrientation, mChild.getHeight() / (float) 2, mChild.getHeight() / (float) 2);
                    break;
                default:
                    //nothing to do
            }

            canvas.save();
            super.dispatchDraw(canvas);
            canvas.restore();
        } else {
            super.dispatchDraw(canvas);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean dispatchTouchEvent(MotionEvent event) {
        if (mOrientation == 0) {
            return super.dispatchTouchEvent(event);
        }

        if (LOWER_HONEYCOMB) {
            float width = getWidth();
            float height = getHeight();
            int count = event.getPointerCount();
            if (count == 1) {
                float x = event.getX();
                float y = event.getY();
                switch (mOrientation) {
                    case 180:
                        event.setLocation(width - x, height - y);
                        break;
                    case 90:
                        event.setLocation(height - y, x);
                        break;
                    case 270:
                        event.setLocation(y, width - x);
                        break;
                    default:
                        event.setLocation(x, y);
                }
                return mChild.dispatchTouchEvent(event);
            }

            // 多点触控限API 9以上
            if (count == 2 &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.GINGERBREAD) {
                MotionEvent newEvent = getMtionEvent(event, count, width, height);
                return mChild.dispatchTouchEvent(newEvent);
            }

            return mChild.dispatchTouchEvent(event);
        }

        return super.dispatchTouchEvent(event);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean shouldDelayChildPressedState() {
        return false;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void setOrientation(int orientation, boolean animation) {
        orientation = orientation % 360;
        if (mOrientation == orientation) return;
        mOrientation = orientation;
        requestLayout();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewParent invalidateChildInParent(int[] location, Rect dirty) {
        if (LOWER_HONEYCOMB) {
            dirty.set(0, 0, getWidth(), getHeight());
        }
        return super.invalidateChildInParent(location, dirty);
    }

    /**
     * 取得转化后的MtionEvent，限API 9，API 10调用
     *
     * @param event  MotionEvent
     * @param count  PointerCount
     * @param width  width
     * @param height height
     * @return 转化后的MtionEvent
     * @author liubo
     */
    @SuppressLint(&quot;Recycle&quot;)
    @TargetApi(Build.VERSION_CODES.GINGERBREAD)
    private MotionEvent getMtionEvent(MotionEvent event, int count, float width, float height) {
        int[] pointerIds = new int[count];
        PointerCoords[] pointerCoords = new PointerCoords[count];

        for (int i = 0; i &lt; count; i++) {
            pointerIds[i] = event.getPointerId(i);

            PointerCoords coord = new PointerCoords();
            float x = event.getX(i);
            float y = event.getY(i);
            switch (mOrientation) {
                case 180:
                    coord.x = width - x;
                    coord.y = height - y;
                    coord.orientation = -event.getOrientation(i);
                    break;
                case 90:
                    coord.x = height - y;
                    coord.y = x;
                    coord.orientation = getCoordOrientation(event.getOrientation(i));
                    break;
                case 270:
                    coord.x = y;
                    coord.y = width - x;
                    coord.orientation = getCoordOrientation(event.getOrientation(i));
                    break;
                default:
                    coord.x = x;
                    coord.y = y;
                    coord.orientation = event.getOrientation(i);
            }

            coord.pressure = event.getPressure(i);
            coord.size = event.getSize(i);
            coord.toolMajor = event.getToolMajor(i);
            coord.toolMinor = event.getToolMinor(i);
            coord.touchMajor = event.getTouchMajor(i);
            coord.touchMinor = event.getTouchMinor(i);

            pointerCoords[i] = coord;
        }

        @SuppressWarnings(&quot;deprecation&quot;)
        MotionEvent newEvent = MotionEvent.obtain(event.getDownTime(),
                event.getEventTime(), event.getAction(), count, pointerIds,
                pointerCoords, event.getMetaState(), event.getXPrecision(),
                event.getYPrecision(), event.getDeviceId(),
                event.getEdgeFlags(), event.getSource(), event.getFlags());
        return newEvent;
    }

    private float getCoordOrientation(float angel) {
        float result = angel;
        switch (mOrientation) {
            case 90:
                result = angel - (float) Math.PI / 2;
                break;
            case 270:
                result = angel + (float) Math.PI / 2;
                break;
            case 180:
                result = -angel;
                break;
            default:
                break;
        }

        if (result &lt; -Math.PI / 2) {
            result += Math.PI;
        } else if (result &gt; Math.PI / 2) {
            result -= Math.PI;
        }

        return result;
    }
}</sourceCode>
        <number>1874931570</number>
        <isDerived>false</isDerived>
      </dry>
      <dry reference="../dry/links/dry[2]"/>
    </links>
    <sourceCode>@TargetApi(Build.VERSION_CODES.HONEYCOMB)
public class RotateLayout extends ViewGroup implements Rotatable {
    private static boolean LOWER_HONEYCOMB = Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.HONEYCOMB;

    protected View mChild;
    private int mOrientation;

    /**
     * 旋转接口
     *
     * @param context Context
     */
    public RotateLayout(Context context) {
        super(context);
        setBackgroundResource(android.R.color.transparent);
    }

    /**
     * 构造函数
     *
     * @param context Context
     * @param attrs   AttributeSet
     */
    public RotateLayout(Context context, AttributeSet attrs) {
        super(context, attrs);
        setBackgroundResource(android.R.color.transparent);
    }

    /**
     * 构造函数
     *
     * @param context  Context
     * @param attrs    AttributeSet
     * @param defStyle Style
     */
    public RotateLayout(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        setBackgroundResource(android.R.color.transparent);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void onFinishInflate() {
        mChild = getChildAt(0);
        if (!LOWER_HONEYCOMB) {
            mChild.setPivotX(0);
            mChild.setPivotY(0);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void onLayout(boolean change, int left, int top, int right,
                            int bottom) {
        int width = right - left;
        int height = bottom - top;
        switch (mOrientation) {
            case 0:
            case 180:
                mChild.layout(0, 0, width, height);
                break;
            case 90:
            case 270:
                try {
                    mChild.layout(0, 0, height, width);
                    //FIXME BUG3266的崩溃是否是需要修改此地方
                } catch (Exception e) {
                    //nothing to do
                }
                break;
            default:
                //nothing to do
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void onMeasure(int widthSpec, int heightSpec) {

        int w = 0, h = 0;
        switch (mOrientation) {
            case 0:
            case 180:
                measureChild(mChild, widthSpec, heightSpec);
                w = mChild.getMeasuredWidth();
                h = mChild.getMeasuredHeight();
                break;
            case 90:
            case 270:
                measureChild(mChild, heightSpec, widthSpec);
                w = mChild.getMeasuredHeight();
                h = mChild.getMeasuredWidth();
                break;
            default:
                //nothing to do
        }
        setMeasuredDimension(w, h);

        if (!LOWER_HONEYCOMB) {
            switch (mOrientation) {
                case 0:
                    mChild.setTranslationX(0);
                    mChild.setTranslationY(0);
                    break;
                case 90:
                    mChild.setTranslationX(0);
                    mChild.setTranslationY(h);
                    break;
                case 180:
                    mChild.setTranslationX(w);
                    mChild.setTranslationY(h);
                    break;
                case 270:
                    mChild.setTranslationX(w);
                    mChild.setTranslationY(0);
                    break;
                default:
                    //nothing to do
            }
            mChild.setRotation(-mOrientation);
        } else {
            invalidate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void dispatchDraw(Canvas canvas) {
        if (LOWER_HONEYCOMB) {
            switch (mOrientation) {
                case 0:
                    canvas.rotate(-mOrientation, mChild.getWidth() / (float) 2, mChild.getHeight() / (float) 2);
                    break;
                case 180:
                    canvas.rotate(-mOrientation, mChild.getWidth() / (float) 2, mChild.getHeight() / (float) 2);
                    break;
                case 90:
                    canvas.rotate(-mOrientation, mChild.getWidth() / (float) 2, mChild.getWidth() / (float) 2);
                    break;
                case 270:
                    canvas.rotate(-mOrientation, mChild.getHeight() / (float) 2, mChild.getHeight() / (float) 2);
                    break;
                default:
                    //nothing to do
            }

            canvas.save();
            super.dispatchDraw(canvas);
            canvas.restore();
        } else {
            super.dispatchDraw(canvas);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean dispatchTouchEvent(MotionEvent event) {
        if (mOrientation == 0) {
            return super.dispatchTouchEvent(event);
        }

        if (LOWER_HONEYCOMB) {
            float width = getWidth();
            float height = getHeight();
            int count = event.getPointerCount();
            if (count == 1) {
                float x = event.getX();
                float y = event.getY();
                switch (mOrientation) {
                    case 180:
                        event.setLocation(width - x, height - y);
                        break;
                    case 90:
                        event.setLocation(height - y, x);
                        break;
                    case 270:
                        event.setLocation(y, width - x);
                        break;
                    default:
                        event.setLocation(x, y);
                }
                return mChild.dispatchTouchEvent(event);
            }

            // 多点触控限API 9以上
            if (count == 2 &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.GINGERBREAD) {
                MotionEvent newEvent = getMtionEvent(event, count, width, height);
                return mChild.dispatchTouchEvent(newEvent);
            }

            return mChild.dispatchTouchEvent(event);
        }

        return super.dispatchTouchEvent(event);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean shouldDelayChildPressedState() {
        return false;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void setOrientation(int orientation, boolean animation) {
        orientation = orientation % 360;
        if (mOrientation == orientation) return;
        mOrientation = orientation;
        requestLayout();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewParent invalidateChildInParent(int[] location, Rect dirty) {
        if (LOWER_HONEYCOMB) {
            dirty.set(0, 0, getWidth(), getHeight());
        }
        return super.invalidateChildInParent(location, dirty);
    }

    /**
     * 取得转化后的MtionEvent，限API 9，API 10调用
     *
     * @param event  MotionEvent
     * @param count  PointerCount
     * @param width  width
     * @param height height
     * @return 转化后的MtionEvent
     * @author liubo
     */
    @SuppressLint(&quot;Recycle&quot;)
    @TargetApi(Build.VERSION_CODES.GINGERBREAD)
    private MotionEvent getMtionEvent(MotionEvent event, int count, float width, float height) {
        int[] pointerIds = new int[count];
        PointerCoords[] pointerCoords = new PointerCoords[count];

        for (int i = 0; i &lt; count; i++) {
            pointerIds[i] = event.getPointerId(i);

            PointerCoords coord = new PointerCoords();
            float x = event.getX(i);
            float y = event.getY(i);
            switch (mOrientation) {
                case 180:
                    coord.x = width - x;
                    coord.y = height - y;
                    coord.orientation = -event.getOrientation(i);
                    break;
                case 90:
                    coord.x = height - y;
                    coord.y = x;
                    coord.orientation = getCoordOrientation(event.getOrientation(i));
                    break;
                case 270:
                    coord.x = y;
                    coord.y = width - x;
                    coord.orientation = getCoordOrientation(event.getOrientation(i));
                    break;
                default:
                    coord.x = x;
                    coord.y = y;
                    coord.orientation = event.getOrientation(i);
            }

            coord.pressure = event.getPressure(i);
            coord.size = event.getSize(i);
            coord.toolMajor = event.getToolMajor(i);
            coord.toolMinor = event.getToolMinor(i);
            coord.touchMajor = event.getTouchMajor(i);
            coord.touchMinor = event.getTouchMinor(i);

            pointerCoords[i] = coord;
        }

        @SuppressWarnings(&quot;deprecation&quot;)
        MotionEvent newEvent = MotionEvent.obtain(event.getDownTime(),
                event.getEventTime(), event.getAction(), count, pointerIds,
                pointerCoords, event.getMetaState(), event.getXPrecision(),
                event.getYPrecision(), event.getDeviceId(),
                event.getEdgeFlags(), event.getSource(), event.getFlags());
        return newEvent;
    }

    private float getCoordOrientation(float angel) {
        float result = angel;
        switch (mOrientation) {
            case 90:
                result = angel - (float) Math.PI / 2;
                break;
            case 270:
                result = angel + (float) Math.PI / 2;
                break;
            case 180:
                result = -angel;
                break;
            default:
                break;
        }

        if (result &lt; -Math.PI / 2) {
            result += Math.PI;
        } else if (result &gt; Math.PI / 2) {
            result -= Math.PI;
        }

        return result;
    }
}</sourceCode>
    <number>1874931570</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>27 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86722</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>23</start>
        <end>49</end>
      </range>
    </lineRanges>
    <primaryLineNumber>23</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/lib/MD5.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.lib</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-82758616</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/lib</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>27 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86723</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>24</start>
            <end>50</end>
          </range>
        </lineRanges>
        <primaryLineNumber>24</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/login/lib/util/MD5.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.login.lib.util</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-533924142</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/login/lib/util</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>public static String password_md5(String password) {
        String strResult = &quot;&quot;;
        MessageDigest md5;
        try {
            md5 = MessageDigest.getInstance(&quot;MD5&quot;);
            md5.update(password.getBytes(&quot;UTF-8&quot;));
            byte[] bzpassword_1 = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i &lt; bzpassword_1.length; ++i) {
                sb.append(String.format(&quot;%02x&quot;, bzpassword_1[i]));
            }
            md5.update(sb.toString().getBytes(&quot;UTF-8&quot;));
            sb = new StringBuffer();
            byte[] bzpassword_2 = md5.digest();
            for (int i = 0; i &lt; bzpassword_2.length; ++i) {
                sb.append(String.format(&quot;%02x&quot;, bzpassword_2[i]));
            }
            strResult = sb.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            return null;
        }
        return strResult;
    }</sourceCode>
        <number>1874931588</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>public static String password_md5(String password) {
        String strResult = &quot;&quot;;
        MessageDigest md5;
        try {
            md5 = MessageDigest.getInstance(&quot;MD5&quot;);
            md5.update(password.getBytes(&quot;UTF-8&quot;));
            byte[] bzpassword_1 = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i &lt; bzpassword_1.length; ++i) {
                sb.append(String.format(&quot;%02x&quot;, bzpassword_1[i]));
            }
            md5.update(sb.toString().getBytes(&quot;UTF-8&quot;));
            sb = new StringBuffer();
            byte[] bzpassword_2 = md5.digest();
            for (int i = 0; i &lt; bzpassword_2.length; ++i) {
                sb.append(String.format(&quot;%02x&quot;, bzpassword_2[i]));
            }
            strResult = sb.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            return null;
        }
        return strResult;
    }</sourceCode>
    <number>1874931588</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>22 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86823</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>449</start>
        <end>470</end>
      </range>
    </lineRanges>
    <primaryLineNumber>449</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/camera/util/Exif.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.camera.util</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-1749754479</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/camera/util</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>22 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86822</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>260</start>
            <end>281</end>
          </range>
        </lineRanges>
        <primaryLineNumber>260</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/camera/util/Exif.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.camera.util</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>811530862</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/camera/util</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>while (offset + 2 &lt; jpgLength &amp;&amp; (jpeg[offset++] &amp; 0xFF) == 0xFF) {
            int marker = jpeg[offset] &amp; 0xFF;
            if (marker == 0xFF) {
                continue;
            }

            if (marker == 0xD8 || marker == 0xD9) {
                break;
            }

            // 在正常范围之外的直接退出
            if (marker &lt; 0xC0 || marker &gt;= 0xFF) {
                break;
            }

            offset++;

            length = pack(jpeg, offset, 2, false);

            if (length &lt; 2 || offset + length &gt; jpgLength) {
                CMLogger.i(TAG, &quot;Invalid length&quot;);
                return jpeg;</sourceCode>
        <number>1874931636</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>while (offset + 2 &lt; jpgLength &amp;&amp; (jpeg[offset++] &amp; 0xFF) == 0xFF) {
            int marker = jpeg[offset] &amp; 0xFF;
            if (marker == 0xFF) {
                continue;
            }

            if (marker == 0xD8 || marker == 0xD9) {
                break;
            }

            // 在正常范围之外的直接退出
            if (marker &lt; 0xC0 || marker &gt;= 0xFF) {
                break;
            }

            offset++;

            length = pack(jpeg, offset, 2, false);

            if (length &lt; 2 || offset + length &gt; jpgLength) {
                CMLogger.i(TAG, &quot;Invalid length&quot;);
                return jpeg;</sourceCode>
    <number>1874931636</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>24 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86818</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>177</start>
        <end>200</end>
      </range>
    </lineRanges>
    <primaryLineNumber>177</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixMainActivity.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.mix</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>777921686</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/mix</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>24 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86819</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>250</start>
            <end>273</end>
          </range>
        </lineRanges>
        <primaryLineNumber>250</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixMainActivity.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.mix</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-2077762192</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/mix</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>public void onEditBtnClick(View v) {

        SharedPreferences sp = getSharedPreferences(
                PGCompositeSDKApi.PG_EDIT_SDK_DATA_INIT, Context.MODE_PRIVATE);
        boolean initialized = sp.getBoolean(
                PGCompositeSDKApi.PG_EDIT_SDK_DATA_INIT.toLowerCase(), false);
        if (!initialized) {

            if (null != mProgressView) {
                mProgressView.setVisibility(View.VISIBLE);
            }

            PGCompositeSDKApi.initData(this,
                    new PGCompositeSDKApi.InitDataCallback() {
                        @Override
                        public void onInitStart() {

                        }

                        @Override
                        public void onInitFinish() {
                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {</sourceCode>
        <number>1874931634</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>public void onEditBtnClick(View v) {

        SharedPreferences sp = getSharedPreferences(
                PGCompositeSDKApi.PG_EDIT_SDK_DATA_INIT, Context.MODE_PRIVATE);
        boolean initialized = sp.getBoolean(
                PGCompositeSDKApi.PG_EDIT_SDK_DATA_INIT.toLowerCase(), false);
        if (!initialized) {

            if (null != mProgressView) {
                mProgressView.setVisibility(View.VISIBLE);
            }

            PGCompositeSDKApi.initData(this,
                    new PGCompositeSDKApi.InitDataCallback() {
                        @Override
                        public void onInitStart() {

                        }

                        @Override
                        public void onInitFinish() {
                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {</sourceCode>
    <number>1874931634</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>1,507 lines of duplicate code.</message>
    <priority>HIGH</priority>
    <key>86681</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>20</start>
        <end>1526</end>
      </range>
    </lineRanges>
    <primaryLineNumber>20</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/camera/model/CameraParameters.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.camera.model</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-1726562549</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/camera/model</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>1,507 lines of duplicate code.</message>
        <priority>HIGH</priority>
        <key>86682</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>21</start>
            <end>1527</end>
          </range>
        </lineRanges>
        <primaryLineNumber>21</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/camera/setting/CameraParameters.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.camera.setting</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1726562549</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/camera/setting</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>public class CameraParameters {

    private static final String TAG = CameraParameters.class.getSimpleName();
    private Parameters parameters = null;

    public CameraParameters(CameraManager.CameraProxy camera) {
        this.parameters = camera.getParameters();
        //此行代码较耗时，故暂时只在Debug模式时打印
        CMLogger.d(TAG, &quot;CameraParameters:&quot; + this.parameters.flatten());
    }

    /**
     * 摄像过程设置参数需要每次更新参数为最新值&lt;br&gt;
     * 因为摄像的相关类可能修改相机的参数
     *
     * @param parameters
     */
    public void changeRealParameters(Parameters parameters) {
        this.parameters = parameters;
    }

    public void updateParameters(CameraManager.CameraProxy camera) {
        CMLogger.i(&quot;&quot;, &quot;updateParameters:&quot; + parameters.getZoom());
        if (GAdapter.IS_UER_START_SMOOTH_ZOOM) {
            camera.startSmoothZoom(parameters.getZoom());
        }
        camera.setParameters(this.parameters);
    }

    /**
     * Returns the value of a String parameter.
     *
     * @param key the key name for the parameter
     * @return the String value of the parameter
     */
    public String get(String key) {
        return this.parameters.get(key);
    }

    /**
     * Returns the value of an integer parameter.
     *
     * @param key the key name for the parameter
     * @return the int value of the parameter
     */
    public int getInt(String key) {
        return this.parameters.getInt(key);
    }

    /**
     * Sets a String parameter.
     *
     * @param key   the key name for the parameter
     * @param value the String value of the parameter
     */
    public void set(String key, String value) {
        this.parameters.set(key, value);
    }

    /**
     * Sets an integer parameter.
     *
     * @param key   the key name for the parameter
     * @param value the int value of the parameter
     */
    public void set(String key, int value) {
        this.parameters.set(key, value);
    }

    /**
     * Sets the dimensions for preview pictures. If the preview has already
     * started, applications should stop the preview first before changing
     * preview size.
     * &lt;p/&gt;
     * The sides of width and height are based on camera orientation. That
     * is, the preview size is the size before it is rotated by display
     * orientation. So applications need to consider the display orientation
     * while setting preview size. For example, suppose the camera supports
     * both 480x320 and 320x480 preview sizes. The application wants a 3:2
     * preview ratio. If the display orientation is set to 0 or 180, preview
     * size should be set to 480x320. If the display orientation is set to
     * 90 or 270, preview size should be set to 320x480. The display
     * orientation should also be considered while setting picture size and
     * thumbnail size.
     *
     * @param width  the width of the pictures, in pixels
     * @param height the height of the pictures, in pixels
     * @see android.hardware.Camera#setDisplayOrientation(int)
     * @see android.hardware.Camera#getCameraInfo(int, android.hardware.Camera.CameraInfo) ;
     * @see #setPictureSize(int, int)
     * @see #setJpegThumbnailSize(int, int)
     */
    public void setPreviewSize(int width, int height) {
        this.parameters.setPreviewSize(width, height);
    }

    /**
     * Returns the dimensions setting for preview pictures.
     *
     * @return a Size object with the width and height setting
     * for the preview picture
     */
    public Size getPreviewSize() {
        return this.parameters.getPreviewSize();
    }

    /**
     * Gets the supported preview sizes.
     *
     * @return a list of Size object. This method will always return a list
     * with at least one element.
     */
    public List&lt;Size&gt; getSupportedPreviewSizes() {
        return this.parameters.getSupportedPreviewSizes();
    }

    /**
     * &lt;p&gt;Gets the supported video frame sizes that can be used by
     * MediaRecorder.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;If the returned list is not null, the returned list will contain at
     * least one Size and one of the sizes in the returned list must be
     * passed to MediaRecorder.setVideoSize() for camcorder application if
     * camera is used as the video source. In this case, the size of the
     * preview can be different from the resolution of the recorded video
     * during video recording.&lt;/p&gt;
     *
     * @return a list of Size object if camera has separate preview and
     * video output; otherwise, null is returned.
     * @see #getPreferredPreviewSizeForVideo()
     */
    @TargetApi(ApiHelper.VERSION_CODES.HONEYCOMB)
    public List&lt;Size&gt; getSupportedVideoSizes() {
        if (ApiHelper.AFTER_HONEYCOMB) {
            return this.parameters.getSupportedVideoSizes();
        }
        return null;
    }

    /**
     * Returns the preferred or recommended preview size (width and height)
     * in pixels for video recording. Camcorder applications should
     * set the preview size to a value that is not larger than the
     * preferred preview size. In other words, the product of the width
     * and height of the preview size should not be larger than that of
     * the preferred preview size. In addition, we recommend to choose a
     * preview size that has the same aspect ratio as the resolution of
     * video to be recorded.
     *
     * @return the preferred preview size (width and height) in pixels for
     * video recording if getSupportedVideoSizes() does not return
     * null; otherwise, null is returned.
     * @see #getSupportedVideoSizes()
     */
    @TargetApi(ApiHelper.VERSION_CODES.HONEYCOMB)
    public Size getPreferredPreviewSizeForVideo() {
        if (ApiHelper.AFTER_HONEYCOMB) {
            return this.parameters.getPreferredPreviewSizeForVideo();
        }
        return null;
    }

    /**
     * &lt;p&gt;Sets the dimensions for EXIF thumbnail in Jpeg picture. If
     * applications set both width and height to 0, EXIF will not contain
     * thumbnail.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Applications need to consider the display orientation. See {@link
     * #setPreviewSize(int, int)} for reference.&lt;/p&gt;
     *
     * @param width  the width of the thumbnail, in pixels
     * @param height the height of the thumbnail, in pixels
     * @see #setPreviewSize(int, int)
     */
    public void setJpegThumbnailSize(int width, int height) {
        this.parameters.setJpegThumbnailSize(width, height);
    }

    /**
     * Returns the dimensions for EXIF thumbnail in Jpeg picture.
     *
     * @return a Size object with the height and width setting for the EXIF
     * thumbnails
     */
    public Size getJpegThumbnailSize() {
        return this.parameters.getJpegThumbnailSize();
    }

    /**
     * Gets the supported jpeg thumbnail sizes.
     *
     * @return a list of Size object. This method will always return a list
     * with at least two elements. Size 0,0 (no thumbnail) is always
     * supported.
     */
    public List&lt;Size&gt; getSupportedJpegThumbnailSizes() {
        return this.parameters.getSupportedJpegThumbnailSizes();
    }

    /**
     * Sets the quality of the EXIF thumbnail in Jpeg picture.
     *
     * @param quality the JPEG quality of the EXIF thumbnail. The range is 1
     *                to 100, with 100 being the best.
     */
    public void setJpegThumbnailQuality(int quality) {
        this.parameters.setJpegThumbnailQuality(quality);
    }

    /**
     * Returns the quality setting for the EXIF thumbnail in Jpeg picture.
     *
     * @return the JPEG quality setting of the EXIF thumbnail.
     */
    public int getJpegThumbnailQuality() {
        return this.parameters.getJpegThumbnailQuality();
    }

    /**
     * Sets Jpeg quality of captured picture.
     *
     * @param quality the JPEG quality of captured picture. The range is 1
     *                to 100, with 100 being the best.
     */
    public void setJpegQuality(int quality) {
        this.parameters.setJpegQuality(quality);
    }

    /**
     * Returns the quality setting for the JPEG picture.
     *
     * @return the JPEG picture quality setting.
     */
    public int getJpegQuality() {
        return this.parameters.getJpegQuality();
    }

    /**
     * Sets the rate at which preview frames are received. This is the
     * target frame rate. The actual frame rate depends on the driver.
     *
     * @param fps the frame rate (frames per second)
     */
    @SuppressWarnings(&quot;deprecation&quot;)
    public void setPreviewFrameRate(int fps) {
        this.parameters.setPreviewFrameRate(fps);
    }

    /**
     * Returns the setting for the rate at which preview frames are
     * received. This is the target frame rate. The actual frame rate
     * depends on the driver.
     *
     * @return the frame rate setting (frames per second)
     */
    @SuppressWarnings(&quot;deprecation&quot;)
    public int getPreviewFrameRate() {
        return this.parameters.getPreviewFrameRate();
    }

    /**
     * Gets the supported preview frame rates.
     *
     * @return a list of supported preview frame rates. null if preview
     * frame rate setting is not supported.
     */
    @SuppressWarnings(&quot;deprecation&quot;)
    public List&lt;Integer&gt; getSupportedPreviewFrameRates() {
        return this.parameters.getSupportedPreviewFrameRates();
    }


    /**
     * Sets the maximum and maximum preview fps. This controls the rate of
     * preview frames received in {@link android.hardware.Camera.PreviewCallback}. The minimum and
     * maximum preview fps must be one of the elements from {@link
     * #getSupportedPreviewFpsRange}.
     *
     * @param min the minimum preview fps (scaled by 1000).
     * @param max the maximum preview fps (scaled by 1000).
     * @throws RuntimeException if fps range is invalid.
     * @see android.hardware.Camera#setPreviewCallbackWithBuffer(android.hardware.Camera.PreviewCallback)
     * @see #getSupportedPreviewFpsRange()
     */
    @TargetApi(ApiHelper.VERSION_CODES.GINGERBREAD)
    @SuppressWarnings(&quot;deprecation&quot;)
    public void setPreviewFpsRange(int min, int max) {
        if (ApiHelper.AFTER_GINGERBREAD) {
            this.parameters.setPreviewFpsRange(min, max);
        } else {
            this.parameters.setPreviewFrameRate((min + max) / 2);
        }
    }

    /**
     * Returns the current minimum and maximum preview fps. The values are
     * one of the elements returned by {@link #getSupportedPreviewFpsRange}.
     *
     * @return range the minimum and maximum preview fps (scaled by 1000).
     * @see android.hardware.Camera.Parameters#PREVIEW_FPS_MIN_INDEX
     * @see android.hardware.Camera.Parameters#PREVIEW_FPS_MAX_INDEX
     * @see #getSupportedPreviewFpsRange()
     */
    @TargetApi(ApiHelper.VERSION_CODES.GINGERBREAD)
    @SuppressWarnings(&quot;deprecation&quot;)
    public void getPreviewFpsRange(int[] range) {
        if (ApiHelper.AFTER_GINGERBREAD) {
            this.parameters.getPreviewFpsRange(range);
        } else {
            if (range == null || range.length != 2) {
                throw new IllegalArgumentException(
                        &quot;range must be an array with two elements.&quot;);
            }
            range[0] = range[1] = this.parameters.getPreviewFrameRate();
        }

    }

    /**
     * Gets the supported preview fps (frame-per-second) ranges. Each range
     * contains a minimum fps and maximum fps. If minimum fps equals to
     * maximum fps, the camera outputs frames in fixed frame rate. If not,
     * the camera outputs frames in auto frame rate. The actual frame rate
     * fluctuates between the minimum and the maximum. The values are
     * multiplied by 1000 and represented in integers. For example, if frame
     * rate is 26.623 frames per second, the value is 26623.
     *
     * @return a list of supported preview fps ranges. This method returns a
     * list with at least one element. Every element is an int array
     * of two values - minimum fps and maximum fps. The list is
     * sorted from small to large (first by maximum fps and then
     * minimum fps).
     * @see android.hardware.Camera.Parameters#PREVIEW_FPS_MIN_INDEX
     * @see android.hardware.Camera.Parameters#PREVIEW_FPS_MAX_INDEX
     */
    @TargetApi(ApiHelper.VERSION_CODES.GINGERBREAD)
    @SuppressWarnings(&quot;deprecation&quot;)
    public List&lt;int[]&gt; getSupportedPreviewFpsRange() {
        if (ApiHelper.AFTER_GINGERBREAD) {
            return this.parameters.getSupportedPreviewFpsRange();
        }

        List&lt;Integer&gt; list = this.parameters.getSupportedPreviewFrameRates();
        if (list == null) {
            return null;
        }

        List&lt;int[]&gt; newList = new ArrayList&lt;int[]&gt;();
        for (int fps : list) {
            int[] array = new int[2];
            array[0] = array[1] = fps;
            newList.add(array);
        }
        return newList;

    }

    /**
     * Sets the image format for preview pictures.
     * &lt;p&gt;If this is never called, the default format will be
     * {@link android.graphics.ImageFormat#NV21}, which
     * uses the NV21 encoding format.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Use {@link android.hardware.Camera.Parameters#getSupportedPreviewFormats} to get a list of
     * the available preview formats.
     * &lt;p/&gt;
     * &lt;p&gt;It is strongly recommended that either
     * {@link android.graphics.ImageFormat#NV21} or
     * {@link android.graphics.ImageFormat#YV12} is used, since
     * they are supported by all camera devices.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;For YV12, the image buffer that is received is not necessarily
     * tightly packed, as there may be padding at the end of each row of
     * pixel data, as described in
     * {@link android.graphics.ImageFormat#YV12}. For camera callback data,
     * it can be assumed that the stride of the Y and UV data is the
     * smallest possible that meets the alignment requirementStr. That is, if
     * the preview size is &lt;var&gt;width x height&lt;/var&gt;, then the following
     * equations describe the buffer index for the beginning of row
     * &lt;var&gt;y&lt;/var&gt; for the Y plane and row &lt;var&gt;c&lt;/var&gt; for the U and V
     * planes:
     * &lt;p/&gt;
     * {@code
     * &lt;pre&gt;
     * yStride   = (int) ceil(width / 16.0) * 16;
     * uvStride  = (int) ceil( (yStride / 2) / 16.0) * 16;
     * ySize     = yStride * height;
     * uvSize    = uvStride * height / 2;
     * yRowIndex = yStride * y;
     * uRowIndex = ySize + uvSize + uvStride * c;
     * vRowIndex = ySize + uvStride * c;
     * size      = ySize + uvSize * 2;&lt;/pre&gt;
     * }
     *
     * @param pixel_format the desired preview picture format, defined by
     *                     one of the {@link android.graphics.ImageFormat} constants.  (E.g.,
     *                     &lt;var&gt;ImageFormat.NV21&lt;/var&gt; (default), or
     *                     &lt;var&gt;ImageFormat.YV12&lt;/var&gt;)
     * @see android.graphics.ImageFormat
     * @see android.hardware.Camera.Parameters#getSupportedPreviewFormats
     */
    public void setPreviewFormat(int pixel_format) {
        this.parameters.setPreviewFormat(pixel_format);
    }

    /**
     * Returns the image format for preview frames got from
     * {@link android.hardware.Camera.PreviewCallback}.
     *
     * @return the preview format.
     * @see android.graphics.ImageFormat
     * @see #setPreviewFormat
     */
    public int getPreviewFormat() {
        return this.parameters.getPreviewFormat();
    }

    public String getPreviewFormatString() {
        return parameters.get(&quot;preview-format&quot;);
    }

    /**
     * Gets the supported preview formats. {@link android.graphics.ImageFormat#NV21}
     * is always supported. {@link android.graphics.ImageFormat#YV12}
     * is always supported since API level 12.
     *
     * @return a list of supported preview formats. This method will always
     * return a list with at least one element.
     * @see android.graphics.ImageFormat
     * @see #setPreviewFormat
     */
    public List&lt;Integer&gt; getSupportedPreviewFormats() {
        return this.parameters.getSupportedPreviewFormats();
    }

    /**
     * &lt;p&gt;Sets the dimensions for pictures.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Applications need to consider the display orientation. See {@link
     * #setPreviewSize(int, int)} for reference.&lt;/p&gt;
     *
     * @param width  the width for pictures, in pixels
     * @param height the height for pictures, in pixels
     * @see #setPreviewSize(int, int)
     */
    public void setPictureSize(int width, int height) {
        this.parameters.setPictureSize(width, height);
    }

    /**
     * Returns the dimension setting for pictures.
     *
     * @return a Size object with the height and width setting
     * for pictures
     */
    public Size getPictureSize() {
        return this.parameters.getPictureSize();
    }

    /**
     * Gets the supported picture sizes.
     *
     * @return a list of supported picture sizes. This method will always
     * return a list with at least one element.
     */
    public List&lt;Size&gt; getSupportedPictureSizes() {
        return this.parameters.getSupportedPictureSizes();
    }

    /**
     * Sets the image format for pictures.
     *
     * @param pixel_format the desired picture format
     *                     (&lt;var&gt;ImageFormat.NV21&lt;/var&gt;,
     *                     &lt;var&gt;ImageFormat.RGB_565&lt;/var&gt;, or
     *                     &lt;var&gt;ImageFormat.JPEG&lt;/var&gt;)
     * @see android.graphics.ImageFormat
     */
    public void setPictureFormat(int pixel_format) {
        this.parameters.setPictureFormat(pixel_format);
    }

    /**
     * Returns the image format for pictures.
     *
     * @return the picture format
     * @see android.graphics.ImageFormat
     */
    public int getPictureFormat() {
        return this.parameters.getPictureFormat();
    }

    /**
     * Gets the supported picture formats.
     *
     * @return supported picture formats. This method will always return a
     * list with at least one element.
     * @see android.graphics.ImageFormat
     */
    public List&lt;Integer&gt; getSupportedPictureFormats() {
        return this.parameters.getSupportedPictureFormats();
    }

    /**
     * Sets the clockwise rotation angle in degrees relative to the
     * orientation of the camera. This affects the pictures returned from
     * JPEG {@link android.hardware.Camera.PictureCallback}. The camera driver may set orientation
     * in the EXIF header without rotating the picture. Or the driver may
     * rotate the picture and the EXIF thumbnail. If the Jpeg picture is
     * rotated, the orientation in the EXIF header will be missing or 1
     * (row #0 is top and column #0 is left side).
     * &lt;p/&gt;
     * &lt;p&gt;If applications want to rotate the picture to match the orientation
     * of what users see, apps should use {@link
     * android.view.OrientationEventListener} and {@link android.hardware.Camera.CameraInfo}.
     * The value from OrientationEventListener is relative to the natural
     * orientation of the device. CameraInfo.orientation is the angle
     * between camera orientation and natural device orientation. The sum
     * of the two is the rotation angle for back-facing camera. The
     * difference of the two is the rotation angle for front-facing camera.
     * Note that the JPEG pictures of front-facing cameras are not mirrored
     * as in preview display.
     * &lt;p/&gt;
     * &lt;p&gt;For example, suppose the natural orientation of the device is
     * portrait. The device is rotated 270 degrees clockwise, so the device
     * orientation is 270. Suppose a back-facing camera sensor is mounted in
     * landscape and the top side of the camera sensor is aligned with the
     * right edge of the display in natural orientation. So the camera
     * orientation is 90. The rotation should be set to 0 (270 + 90).
     * &lt;p/&gt;
     * &lt;p&gt;The reference code is as follows.
     * &lt;p/&gt;
     * &lt;pre&gt;
     * public void onOrientationChanged(int orientation) {
     *     if (orientation == ORIENTATION_UNKNOWN) return;
     *     android.hardware.Camera.CameraInfo info =
     *            new android.hardware.Camera.CameraInfo();
     *     android.hardware.Camera.getCameraInfo(cameraId, info);
     *     orientation = (orientation + 45) / 90 * 90;
     *     int rotation = 0;
     *     if (info.facing == CameraInfo.CAMERA_FACING_FRONT) {
     *         rotation = (info.orientation - orientation + 360) % 360;
     *     } else {  // back-facing camera
     *         rotation = (info.orientation + orientation) % 360;
     *     }
     *     mParameters.setRotation(rotation);
     * }
     * &lt;/pre&gt;
     *
     * @param rotation The rotation angle in degrees relative to the
     *                 orientation of the camera. Rotation can only be 0,
     *                 90, 180 or 270.
     * @throws IllegalArgumentException if rotation value is invalid.
     * @see android.view.OrientationEventListener
     * @see android.hardware.Camera#getCameraInfo(int, android.hardware.Camera.CameraInfo)
     */
    public void setRotation(int rotation) {
        this.parameters.setRotation(rotation);
    }

    /**
     * Sets GPS latitude coordinate. This will be stored in JPEG EXIF
     * header.
     *
     * @param latitude GPS latitude coordinate.
     */
    public void setGpsLatitude(double latitude) {
        this.parameters.setGpsLatitude(latitude);
    }

    /**
     * Sets GPS longitude coordinate. This will be stored in JPEG EXIF
     * header.
     *
     * @param longitude GPS longitude coordinate.
     */
    public void setGpsLongitude(double longitude) {
        this.parameters.setGpsLongitude(longitude);
    }

    /**
     * Sets GPS altitude. This will be stored in JPEG EXIF header.
     *
     * @param altitude GPS altitude in meters.
     */
    public void setGpsAltitude(double altitude) {
        this.parameters.setGpsAltitude(altitude);
    }

    /**
     * Sets GPS timestamp. This will be stored in JPEG EXIF header.
     *
     * @param timestamp GPS timestamp (UTC in seconds since January 1,
     *                  1970).
     */
    public void setGpsTimestamp(long timestamp) {
        this.parameters.setGpsTimestamp(timestamp);
    }

    /**
     * Sets GPS processing method. It will store up to 32 characters
     * in JPEG EXIF header.
     *
     * @param processing_method The processing method to get this location.
     */
    public void setGpsProcessingMethod(String processing_method) {
        this.parameters.setGpsProcessingMethod(processing_method);
    }

    /**
     * Removes GPS latitude, longitude, altitude, and timestamp from the
     * parameters.
     */
    public void removeGpsData() {
        this.parameters.removeGpsData();
    }

    /**
     * Gets the current white balance setting.
     *
     * @return current white balance. null if white balance setting is not
     * supported.
     * @see android.hardware.Camera.Parameters#WHITE_BALANCE_AUTO
     * @see android.hardware.Camera.Parameters#WHITE_BALANCE_INCANDESCENT
     * @see android.hardware.Camera.Parameters#WHITE_BALANCE_FLUORESCENT
     * @see android.hardware.Camera.Parameters#WHITE_BALANCE_WARM_FLUORESCENT
     * @see android.hardware.Camera.Parameters#WHITE_BALANCE_DAYLIGHT
     * @see android.hardware.Camera.Parameters#WHITE_BALANCE_CLOUDY_DAYLIGHT
     * @see android.hardware.Camera.Parameters#WHITE_BALANCE_TWILIGHT
     * @see android.hardware.Camera.Parameters#WHITE_BALANCE_SHADE
     */
    public String getWhiteBalance() {
        return this.parameters.getWhiteBalance();
    }

    /**
     * Sets the white balance. Changing the setting will release the
     * auto-white balance lock. It is recommended not to change white
     * balance and AWB lock at the same time.
     *
     * @param value new white balance.
     * @see #getWhiteBalance()
     * @see #setAutoWhiteBalanceLock(boolean)
     */
    public void setWhiteBalance(String value) {
        this.parameters.setWhiteBalance(value);
    }

    /**
     * Gets the supported white balance.
     *
     * @return a list of supported white balance. null if white balance
     * setting is not supported.
     * @see #getWhiteBalance()
     */
    public List&lt;String&gt; getSupportedWhiteBalance() {
        return this.parameters.getSupportedWhiteBalance();
    }

    /**
     * Gets the current color effect setting.
     *
     * @return current color effect. null if color effect
     * setting is not supported.
     * @see android.hardware.Camera.Parameters#EFFECT_NONE
     * @see android.hardware.Camera.Parameters#EFFECT_MONO
     * @see android.hardware.Camera.Parameters#EFFECT_NEGATIVE
     * @see android.hardware.Camera.Parameters#EFFECT_SOLARIZE
     * @see android.hardware.Camera.Parameters#EFFECT_SEPIA
     * @see android.hardware.Camera.Parameters#EFFECT_POSTERIZE
     * @see android.hardware.Camera.Parameters#EFFECT_WHITEBOARD
     * @see android.hardware.Camera.Parameters#EFFECT_BLACKBOARD
     * @see android.hardware.Camera.Parameters#EFFECT_AQUA
     */
    public String getColorEffect() {
        return this.parameters.getColorEffect();
    }

    /**
     * Sets the current color effect setting.
     *
     * @param value new color effect.
     * @see #getColorEffect()
     */
    public void setColorEffect(String value) {
        this.parameters.setColorEffect(value);
    }

    /**
     * Gets the supported color effects.
     *
     * @return a list of supported color effects. null if color effect
     * setting is not supported.
     * @see #getColorEffect()
     */
    public List&lt;String&gt; getSupportedColorEffects() {
        return this.parameters.getSupportedColorEffects();
    }


    /**
     * Gets the current antibanding setting.
     *
     * @return current antibanding. null if antibanding setting is not
     * supported.
     * @see android.hardware.Camera.Parameters#ANTIBANDING_AUTO
     * @see android.hardware.Camera.Parameters#ANTIBANDING_50HZ
     * @see android.hardware.Camera.Parameters#ANTIBANDING_60HZ
     * @see android.hardware.Camera.Parameters#ANTIBANDING_OFF
     */
    public String getAntibanding() {
        return this.parameters.getAntibanding();
    }

    /**
     * Sets the antibanding.
     *
     * @param antibanding new antibanding value.
     * @see #getAntibanding()
     */
    public void setAntibanding(String antibanding) {
        this.parameters.setAntibanding(antibanding);
    }

    /**
     * Gets the supported antibanding values.
     *
     * @return a list of supported antibanding values. null if antibanding
     * setting is not supported.
     * @see #getAntibanding()
     */
    public List&lt;String&gt; getSupportedAntibanding() {
        return this.parameters.getSupportedAntibanding();
    }

    /**
     * Gets the current scene mode setting.
     *
     * @return one of SCENE_MODE_XXX string constant. null if scene mode
     * setting is not supported.
     * @see android.hardware.Camera.Parameters#SCENE_MODE_AUTO
     * @see android.hardware.Camera.Parameters#SCENE_MODE_ACTION
     * @see android.hardware.Camera.Parameters#SCENE_MODE_PORTRAIT
     * @see android.hardware.Camera.Parameters#SCENE_MODE_LANDSCAPE
     * @see android.hardware.Camera.Parameters#SCENE_MODE_NIGHT
     * @see android.hardware.Camera.Parameters#SCENE_MODE_NIGHT_PORTRAIT
     * @see android.hardware.Camera.Parameters#SCENE_MODE_THEATRE
     * @see android.hardware.Camera.Parameters#SCENE_MODE_BEACH
     * @see android.hardware.Camera.Parameters#SCENE_MODE_SNOW
     * @see android.hardware.Camera.Parameters#SCENE_MODE_SUNSET
     * @see android.hardware.Camera.Parameters#SCENE_MODE_STEADYPHOTO
     * @see android.hardware.Camera.Parameters#SCENE_MODE_FIREWORKS
     * @see android.hardware.Camera.Parameters#SCENE_MODE_SPORTS
     * @see android.hardware.Camera.Parameters#SCENE_MODE_PARTY
     * @see android.hardware.Camera.Parameters#SCENE_MODE_CANDLELIGHT
     * @see android.hardware.Camera.Parameters#SCENE_MODE_BARCODE
     */
    public String getSceneMode() {
        return this.parameters.getSceneMode();
    }

    /**
     * Sets the scene mode. Changing scene mode may override other
     * parameters (such as flash mode, focus mode, white balance). For
     * example, suppose originally flash mode is on and supported flash
     * modes are on/off. In night scene mode, both flash mode and supported
     * flash mode may be changed to off. After setting scene mode,
     * applications should call getParameters to know if some parameters are
     * changed.
     *
     * @param value scene mode.
     * @see #getSceneMode()
     */
    public void setSceneMode(String value) {
        this.parameters.setSceneMode(value);
    }

    /**
     * Gets the supported scene modes.
     *
     * @return a list of supported scene modes. null if scene mode setting
     * is not supported.
     * @see #getSceneMode()
     */
    public List&lt;String&gt; getSupportedSceneModes() {
        return this.parameters.getSupportedSceneModes();
    }

    /**
     * Gets the current flash mode setting.
     *
     * @return current flash mode. null if flash mode setting is not
     * supported.
     * @see android.hardware.Camera.Parameters#FLASH_MODE_OFF
     * @see android.hardware.Camera.Parameters#FLASH_MODE_AUTO
     * @see android.hardware.Camera.Parameters#FLASH_MODE_ON
     * @see android.hardware.Camera.Parameters#FLASH_MODE_RED_EYE
     * @see android.hardware.Camera.Parameters#FLASH_MODE_TORCH
     */
    public String getFlashMode() {
        return this.parameters.getFlashMode();
    }

    /**
     * Sets the flash mode.
     *
     * @param value flash mode.
     * @see #getFlashMode()
     */
    public void setFlashMode(String value) {
        this.parameters.setFlashMode(value);
    }

    /**
     * Gets the supported flash modes.
     *
     * @return a list of supported flash modes. null if flash mode setting
     * is not supported.
     * @see #getFlashMode()
     */
    public List&lt;String&gt; getSupportedFlashModes() {
        return this.parameters.getSupportedFlashModes();
    }

    /**
     * Gets the current focus mode setting.
     *
     * @return current focus mode. This method will always return a non-null
     * value. Applications should call {@link
     * android.hardware.Camera#autoFocus(android.hardware.Camera.AutoFocusCallback)} to start the focus if focus
     * mode is FOCUS_MODE_AUTO or FOCUS_MODE_MACRO.
     * @see android.hardware.Camera.Parameters#FOCUS_MODE_AUTO
     * @see android.hardware.Camera.Parameters#FOCUS_MODE_INFINITY
     * @see android.hardware.Camera.Parameters#FOCUS_MODE_MACRO
     * @see android.hardware.Camera.Parameters#FOCUS_MODE_FIXED
     * @see android.hardware.Camera.Parameters#FOCUS_MODE_EDOF
     * @see android.hardware.Camera.Parameters#FOCUS_MODE_CONTINUOUS_VIDEO
     */
    public String getFocusMode() {
        return this.parameters.getFocusMode();
    }

    /**
     * Sets the focus mode.
     *
     * @param value focus mode.
     * @see #getFocusMode()
     */
    public void setFocusMode(String value) {
        this.parameters.setFocusMode(value);
    }

    /**
     * Gets the supported focus modes.
     *
     * @return a list of supported focus modes. This method will always
     * return a list with at least one element.
     * @see #getFocusMode()
     */
    public List&lt;String&gt; getSupportedFocusModes() {
        return this.parameters.getSupportedFocusModes();
    }

    /**
     * Gets the focal length (in millimeter) of the camera.
     *
     * @return the focal length. This method will always return a valid
     * value.
     */
    public float getFocalLength() {
        return this.parameters.getFocalLength();
    }

    /**
     * Gets the horizontal angle of view in degrees.
     *
     * @return horizontal angle of view. This method will always return a
     * valid value.
     */
    public float getHorizontalViewAngle() {
        return this.parameters.getHorizontalViewAngle();
    }

    /**
     * Gets the vertical angle of view in degrees.
     *
     * @return vertical angle of view. This method will always return a
     * valid value.
     */
    public float getVerticalViewAngle() {
        return this.parameters.getVerticalViewAngle();
    }

    /**
     * Gets the current exposure compensation index.
     *
     * @return current exposure compensation index. The range is {@link
     * #getMinExposureCompensation} to {@link
     * #getMaxExposureCompensation}. 0 means exposure is not
     * adjusted.
     */
    public int getExposureCompensation() {
        return this.parameters.getExposureCompensation();
    }

    /**
     * Sets the exposure compensation index.
     *
     * @param value exposure compensation index. The valid value range is
     *              from {@link #getMinExposureCompensation} (inclusive) to {@link
     *              #getMaxExposureCompensation} (inclusive). 0 means exposure is
     *              not adjusted. Application should call
     *              getMinExposureCompensation and getMaxExposureCompensation to
     *              know if exposure compensation is supported.
     */
    public void setExposureCompensation(int value) {
        this.parameters.setExposureCompensation(value);
    }

    /**
     * Gets the maximum exposure compensation index.
     *
     * @return maximum exposure compensation index (&gt;=0). If both this
     * method and {@link #getMinExposureCompensation} return 0,
     * exposure compensation is not supported.
     */
    public int getMaxExposureCompensation() {
        return this.parameters.getMaxExposureCompensation();
    }

    /**
     * Gets the minimum exposure compensation index.
     *
     * @return minimum exposure compensation index (&lt;=0). If both this
     * method and {@link #getMaxExposureCompensation} return 0,
     * exposure compensation is not supported.
     */
    public int getMinExposureCompensation() {
        return this.parameters.getMinExposureCompensation();
    }

    /**
     * Gets the exposure compensation step.
     *
     * @return exposure compensation step. Applications can get EV by
     * multiplying the exposure compensation index and step. Ex: if
     * exposure compensation index is -6 and step is 0.333333333, EV
     * is -2.
     */
    public float getExposureCompensationStep() {
        return this.parameters.getExposureCompensationStep();
    }

    /**
     * &lt;p&gt;Sets the auto-exposure lock state. Applications should check
     * {@link #isAutoExposureLockSupported} before using this method.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;If set to true, the camera auto-exposure routine will immediately
     * pause until the lock is set to false. Exposure compensation settings
     * changes will still take effect while auto-exposure is locked.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;If auto-exposure is already locked, setting this to true again has
     * no effect (the driver will not recalculate exposure values).&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Stopping preview with {@link android.hardware.Camera#stopPreview()}, or triggering still
     * image capture with {@link android.hardware.Camera#takePicture(android.hardware.Camera.ShutterCallback,
     * android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback)}, will not change the
     * lock.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Exposure compensation, auto-exposure lock, and auto-white balance
     * lock can be used to capture an exposure-bracketed burst of images,
     * for example.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Auto-exposure state, including the lock state, will not be
     * maintained after camera {@link android.hardware.Camera#release()} is called.  Locking
     * auto-exposure after {@link android.hardware.Camera#open()} but before the first call to
     * {@link android.hardware.Camera#startPreview()} will not allow the auto-exposure routine to
     * run at all, and may result in severely over- or under-exposed
     * images.&lt;/p&gt;
     *
     * @param toggle new state of the auto-exposure lock. True means that
     *               auto-exposure is locked, false means that the auto-exposure
     *               routine is free to run normally.
     * @see #getAutoExposureLock()
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public void setAutoExposureLock(boolean toggle) {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            this.parameters.setAutoExposureLock(toggle);
        }
    }

    /**
     * Gets the state of the auto-exposure lock. Applications should check
     * {@link #isAutoExposureLockSupported} before using this method. See
     * {@link #setAutoExposureLock} for details about the lock.
     *
     * @return State of the auto-exposure lock. Returns true if
     * auto-exposure is currently locked, and false otherwise.
     * @see #setAutoExposureLock(boolean)
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public boolean getAutoExposureLock() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.getAutoExposureLock();
        }
        return false;
    }

    /**
     * Returns true if auto-exposure locking is supported. Applications
     * should call this before trying to lock auto-exposure. See
     * {@link #setAutoExposureLock} for details about the lock.
     *
     * @return true if auto-exposure lock is supported.
     * @see #setAutoExposureLock(boolean)
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public boolean isAutoExposureLockSupported() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.isAutoExposureLockSupported();
        }
        return false;
    }

    /**
     * &lt;p&gt;Sets the auto-white balance lock state. Applications should check
     * {@link #isAutoWhiteBalanceLockSupported} before using this
     * method.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;If set to true, the camera auto-white balance routine will
     * immediately pause until the lock is set to false.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;If auto-white balance is already locked, setting this to true
     * again has no effect (the driver will not recalculate white balance
     * values).&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Stopping preview with {@link android.hardware.Camera#stopPreview()}, or triggering still
     * image capture with {@link android.hardware.Camera#takePicture(android.hardware.Camera.ShutterCallback,
     * android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback)}, will not change the
     * the lock.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt; Changing the white balance mode with {@link #setWhiteBalance}
     * will release the auto-white balance lock if it is set.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Exposure compensation, AE lock, and AWB lock can be used to
     * capture an exposure-bracketed burst of images, for example.
     * Auto-white balance state, including the lock state, will not be
     * maintained after camera {@link android.hardware.Camera#release()} is called.  Locking
     * auto-white balance after {@link android.hardware.Camera#open()} but before the first call to
     * {@link android.hardware.Camera#startPreview()} will not allow the auto-white balance routine
     * to run at all, and may result in severely incorrect color in captured
     * images.&lt;/p&gt;
     *
     * @param toggle new state of the auto-white balance lock. True means
     *               that auto-white balance is locked, false means that the
     *               auto-white balance routine is free to run normally.
     * @see #getAutoWhiteBalanceLock()
     * @see #setWhiteBalance(String)
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public void setAutoWhiteBalanceLock(boolean toggle) {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            this.parameters.setAutoWhiteBalanceLock(toggle);
        }
    }

    /**
     * Gets the state of the auto-white balance lock. Applications should
     * check {@link #isAutoWhiteBalanceLockSupported} before using this
     * method. See {@link #setAutoWhiteBalanceLock} for details about the
     * lock.
     *
     * @return State of the auto-white balance lock. Returns true if
     * auto-white balance is currently locked, and false
     * otherwise.
     * @see #setAutoWhiteBalanceLock(boolean)
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public boolean getAutoWhiteBalanceLock() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.getAutoWhiteBalanceLock();
        }
        return false;
    }

    /**
     * Returns true if auto-white balance locking is supported. Applications
     * should call this before trying to lock auto-white balance. See
     * {@link #setAutoWhiteBalanceLock} for details about the lock.
     *
     * @return true if auto-white balance lock is supported.
     * @see #setAutoWhiteBalanceLock(boolean)
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public boolean isAutoWhiteBalanceLockSupported() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.isAutoWhiteBalanceLockSupported();
        }
        return false;
    }

    /**
     * Gets current zoom value. This also works when smooth zoom is in
     * progress. Applications should check {@link #isZoomSupported} before
     * using this method.
     *
     * @return the current zoom value. The range is 0 to {@link
     * #getMaxZoom}. 0 means the camera is not zoomed.
     */
    public int getZoom() {
        return this.parameters.getZoom();
    }

    /**
     * Sets current zoom value. If the camera is zoomed (value &gt; 0), the
     * actual picture size may be smaller than picture size setting.
     * Applications can check the actual picture size after picture is
     * returned from {@link android.hardware.Camera.PictureCallback}. The preview size remains the
     * same in zoom. Applications should check {@link #isZoomSupported}
     * before using this method.
     *
     * @param value zoom value. The valid range is 0 to {@link #getMaxZoom}.
     */
    public void setZoom(int value) {
        this.parameters.setZoom(value);
    }

    /**
     * Returns true if zoom is supported. Applications should call this
     * before using other zoom methods.
     *
     * @return true if zoom is supported.
     */
    public boolean isZoomSupported() {
        if (GAdapter.IS_NOT_SUPPORT_ZOOM) {
            return false;
        }
        return this.parameters.isZoomSupported() &amp;&amp; this.parameters.getMaxZoom() &gt; 0;
    }

    /**
     * Gets the maximum zoom value allowed for snapshot. This is the maximum
     * value that applications can set to {@link #setZoom(int)}.
     * Applications should call {@link #isZoomSupported} before using this
     * method. This value may change in different preview size. Applications
     * should call this again after setting preview size.
     *
     * @return the maximum zoom value supported by the camera.
     */
    public int getMaxZoom() {
        return this.parameters.getMaxZoom();
    }

    /**
     * Gets the zoom ratios of all zoom values. Applications should check
     * {@link #isZoomSupported} before using this method.
     *
     * @return the zoom ratios in 1/100 increments. Ex: a zoom of 3.2x is
     * returned as 320. The number of elements is {@link
     * #getMaxZoom} + 1. The list is sorted from small to large. The
     * first element is always 100. The last element is the zoom
     * ratio of the maximum zoom value.
     */
    public List&lt;Integer&gt; getZoomRatios() {
        return this.parameters.getZoomRatios();
    }

    /**
     * Returns true if smooth zoom is supported. Applications should call
     * this before using other smooth zoom methods.
     *
     * @return true if smooth zoom is supported.
     */
    public boolean isSmoothZoomSupported() {
        return this.parameters.isSmoothZoomSupported();
    }

    /**
     * &lt;p&gt;Gets the distances from the camera to where an object appears to be
     * in focus. The object is sharpest at the optimal focus distance. The
     * depth of field is the far focus distance minus near focus distance.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Focus distances may change after calling {@link
     * android.hardware.Camera#autoFocus(android.hardware.Camera.AutoFocusCallback)}, {@link android.hardware.Camera#cancelAutoFocus}, or {@link
     * android.hardware.Camera#startPreview()}. Applications can call {@link android.hardware.Camera.Parameters#getParameters()}
     * and this method anytime to get the latest focus distances. If the
     * focus mode is FOCUS_MODE_CONTINUOUS_VIDEO, focus distances may change
     * from time to time.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;This method is intended to estimate the distance between the camera
     * and the subject. After autofocus, the subject distance may be within
     * near and far focus distance. However, the precision depends on the
     * camera hardware, autofocus algorithm, the focus area, and the scene.
     * The error can be large and it should be only used as a reference.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Far focus distance &gt;= optimal focus distance &gt;= near focus distance.
     * If the focus distance is infinity, the value will be
     * {@code Float.POSITIVE_INFINITY}.&lt;/p&gt;
     *
     * @param output focus distances in meters. output must be a float
     *               array with three elements. Near focus distance, optimal focus
     *               distance, and far focus distance will be filled in the array.
     * @see android.hardware.Camera.Parameters#FOCUS_DISTANCE_NEAR_INDEX
     * @see android.hardware.Camera.Parameters#FOCUS_DISTANCE_OPTIMAL_INDEX
     * @see android.hardware.Camera.Parameters#FOCUS_DISTANCE_FAR_INDEX
     */
    @TargetApi(ApiHelper.VERSION_CODES.GINGERBREAD)
    public void getFocusDistances(float[] output) {
        if (ApiHelper.AFTER_GINGERBREAD) {
            this.parameters.getFocusDistances(output);
        }
    }

    /**
     * Gets the maximum number of focus areas supported. This is the maximum
     * length of the list in {@link #setFocusAreas(java.util.List)} and
     * {@link #getFocusAreas()}.
     *
     * @return the maximum number of focus areas supported by the camera.
     * @see #getFocusAreas()
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public int getMaxNumFocusAreas() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.getMaxNumFocusAreas();
        }
        return 0;
    }

    /**
     * &lt;p&gt;Gets the current focus areas. Camera driver uses the areas to decide
     * focus.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Before using this API or {@link #setFocusAreas(java.util.List)}, apps should
     * call {@link #getMaxNumFocusAreas()} to know the maximum number of
     * focus areas first. If the value is 0, focus area is not supported.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Each focus area is a rectangle with specified weight. The direction
     * is relative to the sensor orientation, that is, what the sensor sees.
     * The direction is not affected by the rotation or mirroring of
     * {@link android.hardware.Camera#setDisplayOrientation(int)}. Coordinates of the rectangle
     * range from -1000 to 1000. (-1000, -1000) is the upper left point.
     * (1000, 1000) is the lower right point. The width and height of focus
     * areas cannot be 0 or negative.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;The weight must range from 1 to 1000. The weight should be
     * interpreted as a per-pixel weight - all pixels in the area have the
     * specified weight. This means a small area with the same weight as a
     * larger area will have less influence on the focusing than the larger
     * area. Focus areas can partially overlap and the driver will add the
     * weights in the overlap region.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;A special case of a {@code null} focus area list means the driver is
     * free to select focus targets as it wants. For example, the driver may
     * use more signals to select focus areas and change them
     * dynamically. Apps can set the focus area list to {@code null} if they
     * want the driver to completely control focusing.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Focus areas are relative to the current field of view
     * ({@link #getZoom()}). No matter what the zoom level is, (-1000,-1000)
     * represents the top of the currently visible camera frame. The focus
     * area cannot be set to be outside the current field of view, even
     * when using zoom.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Focus area only has effect if the current focus mode is
     * {@link android.hardware.Camera.Parameters#FOCUS_MODE_AUTO}, {@link android.hardware.Camera.Parameters#FOCUS_MODE_MACRO},
     * {@link android.hardware.Camera.Parameters#FOCUS_MODE_CONTINUOUS_VIDEO}, or
     * {@link android.hardware.Camera.Parameters#FOCUS_MODE_CONTINUOUS_PICTURE}.&lt;/p&gt;
     *
     * @return a list of current focus areas
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public List&lt;Area&gt; getFocusAreas() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.getFocusAreas();
        }
        return Collections.emptyList();
    }

    /**
     * Sets focus areas. See {@link #getFocusAreas()} for documentation.
     *
     * @param focusAreas the focus areas
     * @see #getFocusAreas()
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public void setFocusAreas(List&lt;Area&gt; focusAreas) {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH &amp;&amp; focusAreas != null) {
            this.parameters.setFocusAreas(focusAreas);
        }
    }

    /**
     * Gets the maximum number of metering areas supported. This is the
     * maximum length of the list in {@link #setMeteringAreas(java.util.List)} and
     * {@link #getMeteringAreas()}.
     *
     * @return the maximum number of metering areas supported by the camera.
     * @see #getMeteringAreas()
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public int getMaxNumMeteringAreas() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.getMaxNumMeteringAreas();
        }
        return 0;
    }

    /**
     * &lt;p&gt;Gets the current metering areas. Camera driver uses these areas to
     * decide exposure.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Before using this API or {@link #setMeteringAreas(java.util.List)}, apps should
     * call {@link #getMaxNumMeteringAreas()} to know the maximum number of
     * metering areas first. If the value is 0, metering area is not
     * supported.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Each metering area is a rectangle with specified weight. The
     * direction is relative to the sensor orientation, that is, what the
     * sensor sees. The direction is not affected by the rotation or
     * mirroring of {@link android.hardware.Camera#setDisplayOrientation(int)}. Coordinates of the
     * rectangle range from -1000 to 1000. (-1000, -1000) is the upper left
     * point. (1000, 1000) is the lower right point. The width and height of
     * metering areas cannot be 0 or negative.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;The weight must range from 1 to 1000, and represents a weight for
     * every pixel in the area. This means that a large metering area with
     * the same weight as a smaller area will have more effect in the
     * metering result.  Metering areas can partially overlap and the driver
     * will add the weights in the overlap region.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;A special case of a {@code null} metering area list means the driver
     * is free to meter as it chooses. For example, the driver may use more
     * signals to select metering areas and change them dynamically. Apps
     * can set the metering area list to {@code null} if they want the
     * driver to completely control metering.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Metering areas are relative to the current field of view
     * ({@link #getZoom()}). No matter what the zoom level is, (-1000,-1000)
     * represents the top of the currently visible camera frame. The
     * metering area cannot be set to be outside the current field of view,
     * even when using zoom.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;No matter what metering areas are, the final exposure are compensated
     * by {@link #setExposureCompensation(int)}.&lt;/p&gt;
     *
     * @return a list of current metering areas
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public List&lt;Area&gt; getMeteringAreas() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.getMeteringAreas();
        }
        return Collections.emptyList();
    }

    /**
     * Sets metering areas. See {@link #getMeteringAreas()} for
     * documentation.
     *
     * @param meteringAreas the metering areas
     * @see #getMeteringAreas()
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public void setMeteringAreas(List&lt;Area&gt; meteringAreas) {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH &amp;&amp; meteringAreas != null) {
            this.parameters.setMeteringAreas(meteringAreas);
        }
    }

    /**
     * Gets the maximum number of detected faces supported. This is the
     * maximum length of the list returned from {@link android.hardware.Camera.FaceDetectionListener}.
     * If the return value is 0, face detection of the specified type is not
     * supported.
     *
     * @return the maximum number of detected face supported by the camera.
     * @see android.hardware.Camera#startFaceDetection()
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public int getMaxNumDetectedFaces() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.getMaxNumDetectedFaces();
        }
        return 0;
    }

    /**
     * Sets recording mode hint. This tells the camera that the intent of
     * the application is to record videos {@link
     * android.media.MediaRecorder#start()}, not to take still pictures
     * {@link android.hardware.Camera#takePicture(android.hardware.Camera.ShutterCallback, android.hardware.Camera.PictureCallback,
     * android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback)}. Using this hint can
     * allow MediaRecorder.start() to start faster or with fewer glitches on
     * output. This should be called before starting preview for the best
     * result, but can be changed while the preview is active. The default
     * value is false.
     * &lt;p/&gt;
     * The app can still call takePicture() when the hint is true or call
     * MediaRecorder.start() when the hint is false. But the performance may
     * be worse.
     *
     * @param hint true if the apps intend to record videos using
     *             {@link android.media.MediaRecorder}.
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public void setRecordingHint(boolean hint) {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            this.parameters.setRecordingHint(hint);
        }
    }

    /**
     * &lt;p&gt;Returns true if video snapshot is supported. That is, applications
     * can call {@link android.hardware.Camera#takePicture(android.hardware.Camera.ShutterCallback,
     * android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback,
     * android.hardware.Camera.PictureCallback)} during recording. Applications do not need
     * to call {@link android.hardware.Camera#startPreview()} after taking a picture. The preview
     * will be still active. Other than that, taking a picture during
     * recording is identical to taking a picture normally. All settings and
     * methods related to takePicture work identically. Ex:
     * {@link #getPictureSize()}, {@link #getSupportedPictureSizes()},
     * {@link #setJpegQuality(int)}, {@link #setRotation(int)}, and etc. The
     * picture will have an EXIF header. {@link android.hardware.Camera.Parameters#FLASH_MODE_AUTO} and
     * {@link android.hardware.Camera.Parameters#FLASH_MODE_ON} also still work, but the video will record the
     * flash.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Applications can set shutter callback as null to avoid the shutter
     * sound. It is also recommended to set raw picture and post view
     * callbacks to null to avoid the interrupt of preview display.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Field-of-view of the recorded video may be different from that of the
     * captured pictures. The maximum size of a video snapshot may be
     * smaller than that for regular still captures. If the current picture
     * size is set higher than can be supported by video snapshot, the
     * picture will be captured at the maximum supported size instead.&lt;/p&gt;
     *
     * @return true if video snapshot is supported.
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public boolean isVideoSnapshotSupported() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.isVideoSnapshotSupported();
        }
        return false;
    }

    /**
     * &lt;p&gt;Enables and disables video stabilization. Use
     * {@link #isVideoStabilizationSupported} to determine if calling this
     * method is valid.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Video stabilization reduces the shaking due to the motion of the
     * camera in both the preview stream and in recorded videos, including
     * data received from the preview callback. It does not reduce motion
     * blur in images captured with
     * {@link android.hardware.Camera#takePicture takePicture}.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Video stabilization can be enabled and disabled while preview or
     * recording is active, but toggling it may cause a jump in the video
     * stream that may be undesirable in a recorded video.&lt;/p&gt;
     *
     * @param toggle Set to true to enable video stabilization, and false to
     *               disable video stabilization.
     * @see #isVideoStabilizationSupported()
     * @see #getVideoStabilization()
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
    public void setVideoStabilization(boolean toggle) {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH_MR1) {
            this.parameters.setVideoStabilization(toggle);
        }
    }

    /**
     * Get the current state of video stabilization. See
     * {@link #setVideoStabilization} for details of video stabilization.
     *
     * @return true if video stabilization is enabled
     * @see #isVideoStabilizationSupported()
     * @see #setVideoStabilization(boolean)
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
    public boolean getVideoStabilization() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH_MR1) {
            return this.parameters.getVideoStabilization();
        }
        return false;
    }

    /**
     * Returns true if video stabilization is supported. See
     * {@link #setVideoStabilization} for details of video stabilization.
     *
     * @return true if video stabilization is supported
     * @see #setVideoStabilization(boolean)
     * @see #getVideoStabilization()
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
    public boolean isVideoStabilizationSupported() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH_MR1) {
            return this.parameters.isVideoStabilizationSupported();
        }
        return false;
    }
}</sourceCode>
        <number>1874931569</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>public class CameraParameters {

    private static final String TAG = CameraParameters.class.getSimpleName();
    private Parameters parameters = null;

    public CameraParameters(CameraManager.CameraProxy camera) {
        this.parameters = camera.getParameters();
        //此行代码较耗时，故暂时只在Debug模式时打印
        CMLogger.d(TAG, &quot;CameraParameters:&quot; + this.parameters.flatten());
    }

    /**
     * 摄像过程设置参数需要每次更新参数为最新值&lt;br&gt;
     * 因为摄像的相关类可能修改相机的参数
     *
     * @param parameters
     */
    public void changeRealParameters(Parameters parameters) {
        this.parameters = parameters;
    }

    public void updateParameters(CameraManager.CameraProxy camera) {
        CMLogger.i(&quot;&quot;, &quot;updateParameters:&quot; + parameters.getZoom());
        if (GAdapter.IS_UER_START_SMOOTH_ZOOM) {
            camera.startSmoothZoom(parameters.getZoom());
        }
        camera.setParameters(this.parameters);
    }

    /**
     * Returns the value of a String parameter.
     *
     * @param key the key name for the parameter
     * @return the String value of the parameter
     */
    public String get(String key) {
        return this.parameters.get(key);
    }

    /**
     * Returns the value of an integer parameter.
     *
     * @param key the key name for the parameter
     * @return the int value of the parameter
     */
    public int getInt(String key) {
        return this.parameters.getInt(key);
    }

    /**
     * Sets a String parameter.
     *
     * @param key   the key name for the parameter
     * @param value the String value of the parameter
     */
    public void set(String key, String value) {
        this.parameters.set(key, value);
    }

    /**
     * Sets an integer parameter.
     *
     * @param key   the key name for the parameter
     * @param value the int value of the parameter
     */
    public void set(String key, int value) {
        this.parameters.set(key, value);
    }

    /**
     * Sets the dimensions for preview pictures. If the preview has already
     * started, applications should stop the preview first before changing
     * preview size.
     * &lt;p/&gt;
     * The sides of width and height are based on camera orientation. That
     * is, the preview size is the size before it is rotated by display
     * orientation. So applications need to consider the display orientation
     * while setting preview size. For example, suppose the camera supports
     * both 480x320 and 320x480 preview sizes. The application wants a 3:2
     * preview ratio. If the display orientation is set to 0 or 180, preview
     * size should be set to 480x320. If the display orientation is set to
     * 90 or 270, preview size should be set to 320x480. The display
     * orientation should also be considered while setting picture size and
     * thumbnail size.
     *
     * @param width  the width of the pictures, in pixels
     * @param height the height of the pictures, in pixels
     * @see android.hardware.Camera#setDisplayOrientation(int)
     * @see android.hardware.Camera#getCameraInfo(int, android.hardware.Camera.CameraInfo) ;
     * @see #setPictureSize(int, int)
     * @see #setJpegThumbnailSize(int, int)
     */
    public void setPreviewSize(int width, int height) {
        this.parameters.setPreviewSize(width, height);
    }

    /**
     * Returns the dimensions setting for preview pictures.
     *
     * @return a Size object with the width and height setting
     * for the preview picture
     */
    public Size getPreviewSize() {
        return this.parameters.getPreviewSize();
    }

    /**
     * Gets the supported preview sizes.
     *
     * @return a list of Size object. This method will always return a list
     * with at least one element.
     */
    public List&lt;Size&gt; getSupportedPreviewSizes() {
        return this.parameters.getSupportedPreviewSizes();
    }

    /**
     * &lt;p&gt;Gets the supported video frame sizes that can be used by
     * MediaRecorder.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;If the returned list is not null, the returned list will contain at
     * least one Size and one of the sizes in the returned list must be
     * passed to MediaRecorder.setVideoSize() for camcorder application if
     * camera is used as the video source. In this case, the size of the
     * preview can be different from the resolution of the recorded video
     * during video recording.&lt;/p&gt;
     *
     * @return a list of Size object if camera has separate preview and
     * video output; otherwise, null is returned.
     * @see #getPreferredPreviewSizeForVideo()
     */
    @TargetApi(ApiHelper.VERSION_CODES.HONEYCOMB)
    public List&lt;Size&gt; getSupportedVideoSizes() {
        if (ApiHelper.AFTER_HONEYCOMB) {
            return this.parameters.getSupportedVideoSizes();
        }
        return null;
    }

    /**
     * Returns the preferred or recommended preview size (width and height)
     * in pixels for video recording. Camcorder applications should
     * set the preview size to a value that is not larger than the
     * preferred preview size. In other words, the product of the width
     * and height of the preview size should not be larger than that of
     * the preferred preview size. In addition, we recommend to choose a
     * preview size that has the same aspect ratio as the resolution of
     * video to be recorded.
     *
     * @return the preferred preview size (width and height) in pixels for
     * video recording if getSupportedVideoSizes() does not return
     * null; otherwise, null is returned.
     * @see #getSupportedVideoSizes()
     */
    @TargetApi(ApiHelper.VERSION_CODES.HONEYCOMB)
    public Size getPreferredPreviewSizeForVideo() {
        if (ApiHelper.AFTER_HONEYCOMB) {
            return this.parameters.getPreferredPreviewSizeForVideo();
        }
        return null;
    }

    /**
     * &lt;p&gt;Sets the dimensions for EXIF thumbnail in Jpeg picture. If
     * applications set both width and height to 0, EXIF will not contain
     * thumbnail.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Applications need to consider the display orientation. See {@link
     * #setPreviewSize(int, int)} for reference.&lt;/p&gt;
     *
     * @param width  the width of the thumbnail, in pixels
     * @param height the height of the thumbnail, in pixels
     * @see #setPreviewSize(int, int)
     */
    public void setJpegThumbnailSize(int width, int height) {
        this.parameters.setJpegThumbnailSize(width, height);
    }

    /**
     * Returns the dimensions for EXIF thumbnail in Jpeg picture.
     *
     * @return a Size object with the height and width setting for the EXIF
     * thumbnails
     */
    public Size getJpegThumbnailSize() {
        return this.parameters.getJpegThumbnailSize();
    }

    /**
     * Gets the supported jpeg thumbnail sizes.
     *
     * @return a list of Size object. This method will always return a list
     * with at least two elements. Size 0,0 (no thumbnail) is always
     * supported.
     */
    public List&lt;Size&gt; getSupportedJpegThumbnailSizes() {
        return this.parameters.getSupportedJpegThumbnailSizes();
    }

    /**
     * Sets the quality of the EXIF thumbnail in Jpeg picture.
     *
     * @param quality the JPEG quality of the EXIF thumbnail. The range is 1
     *                to 100, with 100 being the best.
     */
    public void setJpegThumbnailQuality(int quality) {
        this.parameters.setJpegThumbnailQuality(quality);
    }

    /**
     * Returns the quality setting for the EXIF thumbnail in Jpeg picture.
     *
     * @return the JPEG quality setting of the EXIF thumbnail.
     */
    public int getJpegThumbnailQuality() {
        return this.parameters.getJpegThumbnailQuality();
    }

    /**
     * Sets Jpeg quality of captured picture.
     *
     * @param quality the JPEG quality of captured picture. The range is 1
     *                to 100, with 100 being the best.
     */
    public void setJpegQuality(int quality) {
        this.parameters.setJpegQuality(quality);
    }

    /**
     * Returns the quality setting for the JPEG picture.
     *
     * @return the JPEG picture quality setting.
     */
    public int getJpegQuality() {
        return this.parameters.getJpegQuality();
    }

    /**
     * Sets the rate at which preview frames are received. This is the
     * target frame rate. The actual frame rate depends on the driver.
     *
     * @param fps the frame rate (frames per second)
     */
    @SuppressWarnings(&quot;deprecation&quot;)
    public void setPreviewFrameRate(int fps) {
        this.parameters.setPreviewFrameRate(fps);
    }

    /**
     * Returns the setting for the rate at which preview frames are
     * received. This is the target frame rate. The actual frame rate
     * depends on the driver.
     *
     * @return the frame rate setting (frames per second)
     */
    @SuppressWarnings(&quot;deprecation&quot;)
    public int getPreviewFrameRate() {
        return this.parameters.getPreviewFrameRate();
    }

    /**
     * Gets the supported preview frame rates.
     *
     * @return a list of supported preview frame rates. null if preview
     * frame rate setting is not supported.
     */
    @SuppressWarnings(&quot;deprecation&quot;)
    public List&lt;Integer&gt; getSupportedPreviewFrameRates() {
        return this.parameters.getSupportedPreviewFrameRates();
    }


    /**
     * Sets the maximum and maximum preview fps. This controls the rate of
     * preview frames received in {@link android.hardware.Camera.PreviewCallback}. The minimum and
     * maximum preview fps must be one of the elements from {@link
     * #getSupportedPreviewFpsRange}.
     *
     * @param min the minimum preview fps (scaled by 1000).
     * @param max the maximum preview fps (scaled by 1000).
     * @throws RuntimeException if fps range is invalid.
     * @see android.hardware.Camera#setPreviewCallbackWithBuffer(android.hardware.Camera.PreviewCallback)
     * @see #getSupportedPreviewFpsRange()
     */
    @TargetApi(ApiHelper.VERSION_CODES.GINGERBREAD)
    @SuppressWarnings(&quot;deprecation&quot;)
    public void setPreviewFpsRange(int min, int max) {
        if (ApiHelper.AFTER_GINGERBREAD) {
            this.parameters.setPreviewFpsRange(min, max);
        } else {
            this.parameters.setPreviewFrameRate((min + max) / 2);
        }
    }

    /**
     * Returns the current minimum and maximum preview fps. The values are
     * one of the elements returned by {@link #getSupportedPreviewFpsRange}.
     *
     * @return range the minimum and maximum preview fps (scaled by 1000).
     * @see android.hardware.Camera.Parameters#PREVIEW_FPS_MIN_INDEX
     * @see android.hardware.Camera.Parameters#PREVIEW_FPS_MAX_INDEX
     * @see #getSupportedPreviewFpsRange()
     */
    @TargetApi(ApiHelper.VERSION_CODES.GINGERBREAD)
    @SuppressWarnings(&quot;deprecation&quot;)
    public void getPreviewFpsRange(int[] range) {
        if (ApiHelper.AFTER_GINGERBREAD) {
            this.parameters.getPreviewFpsRange(range);
        } else {
            if (range == null || range.length != 2) {
                throw new IllegalArgumentException(
                        &quot;range must be an array with two elements.&quot;);
            }
            range[0] = range[1] = this.parameters.getPreviewFrameRate();
        }

    }

    /**
     * Gets the supported preview fps (frame-per-second) ranges. Each range
     * contains a minimum fps and maximum fps. If minimum fps equals to
     * maximum fps, the camera outputs frames in fixed frame rate. If not,
     * the camera outputs frames in auto frame rate. The actual frame rate
     * fluctuates between the minimum and the maximum. The values are
     * multiplied by 1000 and represented in integers. For example, if frame
     * rate is 26.623 frames per second, the value is 26623.
     *
     * @return a list of supported preview fps ranges. This method returns a
     * list with at least one element. Every element is an int array
     * of two values - minimum fps and maximum fps. The list is
     * sorted from small to large (first by maximum fps and then
     * minimum fps).
     * @see android.hardware.Camera.Parameters#PREVIEW_FPS_MIN_INDEX
     * @see android.hardware.Camera.Parameters#PREVIEW_FPS_MAX_INDEX
     */
    @TargetApi(ApiHelper.VERSION_CODES.GINGERBREAD)
    @SuppressWarnings(&quot;deprecation&quot;)
    public List&lt;int[]&gt; getSupportedPreviewFpsRange() {
        if (ApiHelper.AFTER_GINGERBREAD) {
            return this.parameters.getSupportedPreviewFpsRange();
        }

        List&lt;Integer&gt; list = this.parameters.getSupportedPreviewFrameRates();
        if (list == null) {
            return null;
        }

        List&lt;int[]&gt; newList = new ArrayList&lt;int[]&gt;();
        for (int fps : list) {
            int[] array = new int[2];
            array[0] = array[1] = fps;
            newList.add(array);
        }
        return newList;

    }

    /**
     * Sets the image format for preview pictures.
     * &lt;p&gt;If this is never called, the default format will be
     * {@link android.graphics.ImageFormat#NV21}, which
     * uses the NV21 encoding format.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Use {@link android.hardware.Camera.Parameters#getSupportedPreviewFormats} to get a list of
     * the available preview formats.
     * &lt;p/&gt;
     * &lt;p&gt;It is strongly recommended that either
     * {@link android.graphics.ImageFormat#NV21} or
     * {@link android.graphics.ImageFormat#YV12} is used, since
     * they are supported by all camera devices.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;For YV12, the image buffer that is received is not necessarily
     * tightly packed, as there may be padding at the end of each row of
     * pixel data, as described in
     * {@link android.graphics.ImageFormat#YV12}. For camera callback data,
     * it can be assumed that the stride of the Y and UV data is the
     * smallest possible that meets the alignment requirementStr. That is, if
     * the preview size is &lt;var&gt;width x height&lt;/var&gt;, then the following
     * equations describe the buffer index for the beginning of row
     * &lt;var&gt;y&lt;/var&gt; for the Y plane and row &lt;var&gt;c&lt;/var&gt; for the U and V
     * planes:
     * &lt;p/&gt;
     * {@code
     * &lt;pre&gt;
     * yStride   = (int) ceil(width / 16.0) * 16;
     * uvStride  = (int) ceil( (yStride / 2) / 16.0) * 16;
     * ySize     = yStride * height;
     * uvSize    = uvStride * height / 2;
     * yRowIndex = yStride * y;
     * uRowIndex = ySize + uvSize + uvStride * c;
     * vRowIndex = ySize + uvStride * c;
     * size      = ySize + uvSize * 2;&lt;/pre&gt;
     * }
     *
     * @param pixel_format the desired preview picture format, defined by
     *                     one of the {@link android.graphics.ImageFormat} constants.  (E.g.,
     *                     &lt;var&gt;ImageFormat.NV21&lt;/var&gt; (default), or
     *                     &lt;var&gt;ImageFormat.YV12&lt;/var&gt;)
     * @see android.graphics.ImageFormat
     * @see android.hardware.Camera.Parameters#getSupportedPreviewFormats
     */
    public void setPreviewFormat(int pixel_format) {
        this.parameters.setPreviewFormat(pixel_format);
    }

    /**
     * Returns the image format for preview frames got from
     * {@link android.hardware.Camera.PreviewCallback}.
     *
     * @return the preview format.
     * @see android.graphics.ImageFormat
     * @see #setPreviewFormat
     */
    public int getPreviewFormat() {
        return this.parameters.getPreviewFormat();
    }

    public String getPreviewFormatString() {
        return parameters.get(&quot;preview-format&quot;);
    }

    /**
     * Gets the supported preview formats. {@link android.graphics.ImageFormat#NV21}
     * is always supported. {@link android.graphics.ImageFormat#YV12}
     * is always supported since API level 12.
     *
     * @return a list of supported preview formats. This method will always
     * return a list with at least one element.
     * @see android.graphics.ImageFormat
     * @see #setPreviewFormat
     */
    public List&lt;Integer&gt; getSupportedPreviewFormats() {
        return this.parameters.getSupportedPreviewFormats();
    }

    /**
     * &lt;p&gt;Sets the dimensions for pictures.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Applications need to consider the display orientation. See {@link
     * #setPreviewSize(int, int)} for reference.&lt;/p&gt;
     *
     * @param width  the width for pictures, in pixels
     * @param height the height for pictures, in pixels
     * @see #setPreviewSize(int, int)
     */
    public void setPictureSize(int width, int height) {
        this.parameters.setPictureSize(width, height);
    }

    /**
     * Returns the dimension setting for pictures.
     *
     * @return a Size object with the height and width setting
     * for pictures
     */
    public Size getPictureSize() {
        return this.parameters.getPictureSize();
    }

    /**
     * Gets the supported picture sizes.
     *
     * @return a list of supported picture sizes. This method will always
     * return a list with at least one element.
     */
    public List&lt;Size&gt; getSupportedPictureSizes() {
        return this.parameters.getSupportedPictureSizes();
    }

    /**
     * Sets the image format for pictures.
     *
     * @param pixel_format the desired picture format
     *                     (&lt;var&gt;ImageFormat.NV21&lt;/var&gt;,
     *                     &lt;var&gt;ImageFormat.RGB_565&lt;/var&gt;, or
     *                     &lt;var&gt;ImageFormat.JPEG&lt;/var&gt;)
     * @see android.graphics.ImageFormat
     */
    public void setPictureFormat(int pixel_format) {
        this.parameters.setPictureFormat(pixel_format);
    }

    /**
     * Returns the image format for pictures.
     *
     * @return the picture format
     * @see android.graphics.ImageFormat
     */
    public int getPictureFormat() {
        return this.parameters.getPictureFormat();
    }

    /**
     * Gets the supported picture formats.
     *
     * @return supported picture formats. This method will always return a
     * list with at least one element.
     * @see android.graphics.ImageFormat
     */
    public List&lt;Integer&gt; getSupportedPictureFormats() {
        return this.parameters.getSupportedPictureFormats();
    }

    /**
     * Sets the clockwise rotation angle in degrees relative to the
     * orientation of the camera. This affects the pictures returned from
     * JPEG {@link android.hardware.Camera.PictureCallback}. The camera driver may set orientation
     * in the EXIF header without rotating the picture. Or the driver may
     * rotate the picture and the EXIF thumbnail. If the Jpeg picture is
     * rotated, the orientation in the EXIF header will be missing or 1
     * (row #0 is top and column #0 is left side).
     * &lt;p/&gt;
     * &lt;p&gt;If applications want to rotate the picture to match the orientation
     * of what users see, apps should use {@link
     * android.view.OrientationEventListener} and {@link android.hardware.Camera.CameraInfo}.
     * The value from OrientationEventListener is relative to the natural
     * orientation of the device. CameraInfo.orientation is the angle
     * between camera orientation and natural device orientation. The sum
     * of the two is the rotation angle for back-facing camera. The
     * difference of the two is the rotation angle for front-facing camera.
     * Note that the JPEG pictures of front-facing cameras are not mirrored
     * as in preview display.
     * &lt;p/&gt;
     * &lt;p&gt;For example, suppose the natural orientation of the device is
     * portrait. The device is rotated 270 degrees clockwise, so the device
     * orientation is 270. Suppose a back-facing camera sensor is mounted in
     * landscape and the top side of the camera sensor is aligned with the
     * right edge of the display in natural orientation. So the camera
     * orientation is 90. The rotation should be set to 0 (270 + 90).
     * &lt;p/&gt;
     * &lt;p&gt;The reference code is as follows.
     * &lt;p/&gt;
     * &lt;pre&gt;
     * public void onOrientationChanged(int orientation) {
     *     if (orientation == ORIENTATION_UNKNOWN) return;
     *     android.hardware.Camera.CameraInfo info =
     *            new android.hardware.Camera.CameraInfo();
     *     android.hardware.Camera.getCameraInfo(cameraId, info);
     *     orientation = (orientation + 45) / 90 * 90;
     *     int rotation = 0;
     *     if (info.facing == CameraInfo.CAMERA_FACING_FRONT) {
     *         rotation = (info.orientation - orientation + 360) % 360;
     *     } else {  // back-facing camera
     *         rotation = (info.orientation + orientation) % 360;
     *     }
     *     mParameters.setRotation(rotation);
     * }
     * &lt;/pre&gt;
     *
     * @param rotation The rotation angle in degrees relative to the
     *                 orientation of the camera. Rotation can only be 0,
     *                 90, 180 or 270.
     * @throws IllegalArgumentException if rotation value is invalid.
     * @see android.view.OrientationEventListener
     * @see android.hardware.Camera#getCameraInfo(int, android.hardware.Camera.CameraInfo)
     */
    public void setRotation(int rotation) {
        this.parameters.setRotation(rotation);
    }

    /**
     * Sets GPS latitude coordinate. This will be stored in JPEG EXIF
     * header.
     *
     * @param latitude GPS latitude coordinate.
     */
    public void setGpsLatitude(double latitude) {
        this.parameters.setGpsLatitude(latitude);
    }

    /**
     * Sets GPS longitude coordinate. This will be stored in JPEG EXIF
     * header.
     *
     * @param longitude GPS longitude coordinate.
     */
    public void setGpsLongitude(double longitude) {
        this.parameters.setGpsLongitude(longitude);
    }

    /**
     * Sets GPS altitude. This will be stored in JPEG EXIF header.
     *
     * @param altitude GPS altitude in meters.
     */
    public void setGpsAltitude(double altitude) {
        this.parameters.setGpsAltitude(altitude);
    }

    /**
     * Sets GPS timestamp. This will be stored in JPEG EXIF header.
     *
     * @param timestamp GPS timestamp (UTC in seconds since January 1,
     *                  1970).
     */
    public void setGpsTimestamp(long timestamp) {
        this.parameters.setGpsTimestamp(timestamp);
    }

    /**
     * Sets GPS processing method. It will store up to 32 characters
     * in JPEG EXIF header.
     *
     * @param processing_method The processing method to get this location.
     */
    public void setGpsProcessingMethod(String processing_method) {
        this.parameters.setGpsProcessingMethod(processing_method);
    }

    /**
     * Removes GPS latitude, longitude, altitude, and timestamp from the
     * parameters.
     */
    public void removeGpsData() {
        this.parameters.removeGpsData();
    }

    /**
     * Gets the current white balance setting.
     *
     * @return current white balance. null if white balance setting is not
     * supported.
     * @see android.hardware.Camera.Parameters#WHITE_BALANCE_AUTO
     * @see android.hardware.Camera.Parameters#WHITE_BALANCE_INCANDESCENT
     * @see android.hardware.Camera.Parameters#WHITE_BALANCE_FLUORESCENT
     * @see android.hardware.Camera.Parameters#WHITE_BALANCE_WARM_FLUORESCENT
     * @see android.hardware.Camera.Parameters#WHITE_BALANCE_DAYLIGHT
     * @see android.hardware.Camera.Parameters#WHITE_BALANCE_CLOUDY_DAYLIGHT
     * @see android.hardware.Camera.Parameters#WHITE_BALANCE_TWILIGHT
     * @see android.hardware.Camera.Parameters#WHITE_BALANCE_SHADE
     */
    public String getWhiteBalance() {
        return this.parameters.getWhiteBalance();
    }

    /**
     * Sets the white balance. Changing the setting will release the
     * auto-white balance lock. It is recommended not to change white
     * balance and AWB lock at the same time.
     *
     * @param value new white balance.
     * @see #getWhiteBalance()
     * @see #setAutoWhiteBalanceLock(boolean)
     */
    public void setWhiteBalance(String value) {
        this.parameters.setWhiteBalance(value);
    }

    /**
     * Gets the supported white balance.
     *
     * @return a list of supported white balance. null if white balance
     * setting is not supported.
     * @see #getWhiteBalance()
     */
    public List&lt;String&gt; getSupportedWhiteBalance() {
        return this.parameters.getSupportedWhiteBalance();
    }

    /**
     * Gets the current color effect setting.
     *
     * @return current color effect. null if color effect
     * setting is not supported.
     * @see android.hardware.Camera.Parameters#EFFECT_NONE
     * @see android.hardware.Camera.Parameters#EFFECT_MONO
     * @see android.hardware.Camera.Parameters#EFFECT_NEGATIVE
     * @see android.hardware.Camera.Parameters#EFFECT_SOLARIZE
     * @see android.hardware.Camera.Parameters#EFFECT_SEPIA
     * @see android.hardware.Camera.Parameters#EFFECT_POSTERIZE
     * @see android.hardware.Camera.Parameters#EFFECT_WHITEBOARD
     * @see android.hardware.Camera.Parameters#EFFECT_BLACKBOARD
     * @see android.hardware.Camera.Parameters#EFFECT_AQUA
     */
    public String getColorEffect() {
        return this.parameters.getColorEffect();
    }

    /**
     * Sets the current color effect setting.
     *
     * @param value new color effect.
     * @see #getColorEffect()
     */
    public void setColorEffect(String value) {
        this.parameters.setColorEffect(value);
    }

    /**
     * Gets the supported color effects.
     *
     * @return a list of supported color effects. null if color effect
     * setting is not supported.
     * @see #getColorEffect()
     */
    public List&lt;String&gt; getSupportedColorEffects() {
        return this.parameters.getSupportedColorEffects();
    }


    /**
     * Gets the current antibanding setting.
     *
     * @return current antibanding. null if antibanding setting is not
     * supported.
     * @see android.hardware.Camera.Parameters#ANTIBANDING_AUTO
     * @see android.hardware.Camera.Parameters#ANTIBANDING_50HZ
     * @see android.hardware.Camera.Parameters#ANTIBANDING_60HZ
     * @see android.hardware.Camera.Parameters#ANTIBANDING_OFF
     */
    public String getAntibanding() {
        return this.parameters.getAntibanding();
    }

    /**
     * Sets the antibanding.
     *
     * @param antibanding new antibanding value.
     * @see #getAntibanding()
     */
    public void setAntibanding(String antibanding) {
        this.parameters.setAntibanding(antibanding);
    }

    /**
     * Gets the supported antibanding values.
     *
     * @return a list of supported antibanding values. null if antibanding
     * setting is not supported.
     * @see #getAntibanding()
     */
    public List&lt;String&gt; getSupportedAntibanding() {
        return this.parameters.getSupportedAntibanding();
    }

    /**
     * Gets the current scene mode setting.
     *
     * @return one of SCENE_MODE_XXX string constant. null if scene mode
     * setting is not supported.
     * @see android.hardware.Camera.Parameters#SCENE_MODE_AUTO
     * @see android.hardware.Camera.Parameters#SCENE_MODE_ACTION
     * @see android.hardware.Camera.Parameters#SCENE_MODE_PORTRAIT
     * @see android.hardware.Camera.Parameters#SCENE_MODE_LANDSCAPE
     * @see android.hardware.Camera.Parameters#SCENE_MODE_NIGHT
     * @see android.hardware.Camera.Parameters#SCENE_MODE_NIGHT_PORTRAIT
     * @see android.hardware.Camera.Parameters#SCENE_MODE_THEATRE
     * @see android.hardware.Camera.Parameters#SCENE_MODE_BEACH
     * @see android.hardware.Camera.Parameters#SCENE_MODE_SNOW
     * @see android.hardware.Camera.Parameters#SCENE_MODE_SUNSET
     * @see android.hardware.Camera.Parameters#SCENE_MODE_STEADYPHOTO
     * @see android.hardware.Camera.Parameters#SCENE_MODE_FIREWORKS
     * @see android.hardware.Camera.Parameters#SCENE_MODE_SPORTS
     * @see android.hardware.Camera.Parameters#SCENE_MODE_PARTY
     * @see android.hardware.Camera.Parameters#SCENE_MODE_CANDLELIGHT
     * @see android.hardware.Camera.Parameters#SCENE_MODE_BARCODE
     */
    public String getSceneMode() {
        return this.parameters.getSceneMode();
    }

    /**
     * Sets the scene mode. Changing scene mode may override other
     * parameters (such as flash mode, focus mode, white balance). For
     * example, suppose originally flash mode is on and supported flash
     * modes are on/off. In night scene mode, both flash mode and supported
     * flash mode may be changed to off. After setting scene mode,
     * applications should call getParameters to know if some parameters are
     * changed.
     *
     * @param value scene mode.
     * @see #getSceneMode()
     */
    public void setSceneMode(String value) {
        this.parameters.setSceneMode(value);
    }

    /**
     * Gets the supported scene modes.
     *
     * @return a list of supported scene modes. null if scene mode setting
     * is not supported.
     * @see #getSceneMode()
     */
    public List&lt;String&gt; getSupportedSceneModes() {
        return this.parameters.getSupportedSceneModes();
    }

    /**
     * Gets the current flash mode setting.
     *
     * @return current flash mode. null if flash mode setting is not
     * supported.
     * @see android.hardware.Camera.Parameters#FLASH_MODE_OFF
     * @see android.hardware.Camera.Parameters#FLASH_MODE_AUTO
     * @see android.hardware.Camera.Parameters#FLASH_MODE_ON
     * @see android.hardware.Camera.Parameters#FLASH_MODE_RED_EYE
     * @see android.hardware.Camera.Parameters#FLASH_MODE_TORCH
     */
    public String getFlashMode() {
        return this.parameters.getFlashMode();
    }

    /**
     * Sets the flash mode.
     *
     * @param value flash mode.
     * @see #getFlashMode()
     */
    public void setFlashMode(String value) {
        this.parameters.setFlashMode(value);
    }

    /**
     * Gets the supported flash modes.
     *
     * @return a list of supported flash modes. null if flash mode setting
     * is not supported.
     * @see #getFlashMode()
     */
    public List&lt;String&gt; getSupportedFlashModes() {
        return this.parameters.getSupportedFlashModes();
    }

    /**
     * Gets the current focus mode setting.
     *
     * @return current focus mode. This method will always return a non-null
     * value. Applications should call {@link
     * android.hardware.Camera#autoFocus(android.hardware.Camera.AutoFocusCallback)} to start the focus if focus
     * mode is FOCUS_MODE_AUTO or FOCUS_MODE_MACRO.
     * @see android.hardware.Camera.Parameters#FOCUS_MODE_AUTO
     * @see android.hardware.Camera.Parameters#FOCUS_MODE_INFINITY
     * @see android.hardware.Camera.Parameters#FOCUS_MODE_MACRO
     * @see android.hardware.Camera.Parameters#FOCUS_MODE_FIXED
     * @see android.hardware.Camera.Parameters#FOCUS_MODE_EDOF
     * @see android.hardware.Camera.Parameters#FOCUS_MODE_CONTINUOUS_VIDEO
     */
    public String getFocusMode() {
        return this.parameters.getFocusMode();
    }

    /**
     * Sets the focus mode.
     *
     * @param value focus mode.
     * @see #getFocusMode()
     */
    public void setFocusMode(String value) {
        this.parameters.setFocusMode(value);
    }

    /**
     * Gets the supported focus modes.
     *
     * @return a list of supported focus modes. This method will always
     * return a list with at least one element.
     * @see #getFocusMode()
     */
    public List&lt;String&gt; getSupportedFocusModes() {
        return this.parameters.getSupportedFocusModes();
    }

    /**
     * Gets the focal length (in millimeter) of the camera.
     *
     * @return the focal length. This method will always return a valid
     * value.
     */
    public float getFocalLength() {
        return this.parameters.getFocalLength();
    }

    /**
     * Gets the horizontal angle of view in degrees.
     *
     * @return horizontal angle of view. This method will always return a
     * valid value.
     */
    public float getHorizontalViewAngle() {
        return this.parameters.getHorizontalViewAngle();
    }

    /**
     * Gets the vertical angle of view in degrees.
     *
     * @return vertical angle of view. This method will always return a
     * valid value.
     */
    public float getVerticalViewAngle() {
        return this.parameters.getVerticalViewAngle();
    }

    /**
     * Gets the current exposure compensation index.
     *
     * @return current exposure compensation index. The range is {@link
     * #getMinExposureCompensation} to {@link
     * #getMaxExposureCompensation}. 0 means exposure is not
     * adjusted.
     */
    public int getExposureCompensation() {
        return this.parameters.getExposureCompensation();
    }

    /**
     * Sets the exposure compensation index.
     *
     * @param value exposure compensation index. The valid value range is
     *              from {@link #getMinExposureCompensation} (inclusive) to {@link
     *              #getMaxExposureCompensation} (inclusive). 0 means exposure is
     *              not adjusted. Application should call
     *              getMinExposureCompensation and getMaxExposureCompensation to
     *              know if exposure compensation is supported.
     */
    public void setExposureCompensation(int value) {
        this.parameters.setExposureCompensation(value);
    }

    /**
     * Gets the maximum exposure compensation index.
     *
     * @return maximum exposure compensation index (&gt;=0). If both this
     * method and {@link #getMinExposureCompensation} return 0,
     * exposure compensation is not supported.
     */
    public int getMaxExposureCompensation() {
        return this.parameters.getMaxExposureCompensation();
    }

    /**
     * Gets the minimum exposure compensation index.
     *
     * @return minimum exposure compensation index (&lt;=0). If both this
     * method and {@link #getMaxExposureCompensation} return 0,
     * exposure compensation is not supported.
     */
    public int getMinExposureCompensation() {
        return this.parameters.getMinExposureCompensation();
    }

    /**
     * Gets the exposure compensation step.
     *
     * @return exposure compensation step. Applications can get EV by
     * multiplying the exposure compensation index and step. Ex: if
     * exposure compensation index is -6 and step is 0.333333333, EV
     * is -2.
     */
    public float getExposureCompensationStep() {
        return this.parameters.getExposureCompensationStep();
    }

    /**
     * &lt;p&gt;Sets the auto-exposure lock state. Applications should check
     * {@link #isAutoExposureLockSupported} before using this method.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;If set to true, the camera auto-exposure routine will immediately
     * pause until the lock is set to false. Exposure compensation settings
     * changes will still take effect while auto-exposure is locked.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;If auto-exposure is already locked, setting this to true again has
     * no effect (the driver will not recalculate exposure values).&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Stopping preview with {@link android.hardware.Camera#stopPreview()}, or triggering still
     * image capture with {@link android.hardware.Camera#takePicture(android.hardware.Camera.ShutterCallback,
     * android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback)}, will not change the
     * lock.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Exposure compensation, auto-exposure lock, and auto-white balance
     * lock can be used to capture an exposure-bracketed burst of images,
     * for example.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Auto-exposure state, including the lock state, will not be
     * maintained after camera {@link android.hardware.Camera#release()} is called.  Locking
     * auto-exposure after {@link android.hardware.Camera#open()} but before the first call to
     * {@link android.hardware.Camera#startPreview()} will not allow the auto-exposure routine to
     * run at all, and may result in severely over- or under-exposed
     * images.&lt;/p&gt;
     *
     * @param toggle new state of the auto-exposure lock. True means that
     *               auto-exposure is locked, false means that the auto-exposure
     *               routine is free to run normally.
     * @see #getAutoExposureLock()
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public void setAutoExposureLock(boolean toggle) {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            this.parameters.setAutoExposureLock(toggle);
        }
    }

    /**
     * Gets the state of the auto-exposure lock. Applications should check
     * {@link #isAutoExposureLockSupported} before using this method. See
     * {@link #setAutoExposureLock} for details about the lock.
     *
     * @return State of the auto-exposure lock. Returns true if
     * auto-exposure is currently locked, and false otherwise.
     * @see #setAutoExposureLock(boolean)
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public boolean getAutoExposureLock() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.getAutoExposureLock();
        }
        return false;
    }

    /**
     * Returns true if auto-exposure locking is supported. Applications
     * should call this before trying to lock auto-exposure. See
     * {@link #setAutoExposureLock} for details about the lock.
     *
     * @return true if auto-exposure lock is supported.
     * @see #setAutoExposureLock(boolean)
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public boolean isAutoExposureLockSupported() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.isAutoExposureLockSupported();
        }
        return false;
    }

    /**
     * &lt;p&gt;Sets the auto-white balance lock state. Applications should check
     * {@link #isAutoWhiteBalanceLockSupported} before using this
     * method.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;If set to true, the camera auto-white balance routine will
     * immediately pause until the lock is set to false.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;If auto-white balance is already locked, setting this to true
     * again has no effect (the driver will not recalculate white balance
     * values).&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Stopping preview with {@link android.hardware.Camera#stopPreview()}, or triggering still
     * image capture with {@link android.hardware.Camera#takePicture(android.hardware.Camera.ShutterCallback,
     * android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback)}, will not change the
     * the lock.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt; Changing the white balance mode with {@link #setWhiteBalance}
     * will release the auto-white balance lock if it is set.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Exposure compensation, AE lock, and AWB lock can be used to
     * capture an exposure-bracketed burst of images, for example.
     * Auto-white balance state, including the lock state, will not be
     * maintained after camera {@link android.hardware.Camera#release()} is called.  Locking
     * auto-white balance after {@link android.hardware.Camera#open()} but before the first call to
     * {@link android.hardware.Camera#startPreview()} will not allow the auto-white balance routine
     * to run at all, and may result in severely incorrect color in captured
     * images.&lt;/p&gt;
     *
     * @param toggle new state of the auto-white balance lock. True means
     *               that auto-white balance is locked, false means that the
     *               auto-white balance routine is free to run normally.
     * @see #getAutoWhiteBalanceLock()
     * @see #setWhiteBalance(String)
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public void setAutoWhiteBalanceLock(boolean toggle) {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            this.parameters.setAutoWhiteBalanceLock(toggle);
        }
    }

    /**
     * Gets the state of the auto-white balance lock. Applications should
     * check {@link #isAutoWhiteBalanceLockSupported} before using this
     * method. See {@link #setAutoWhiteBalanceLock} for details about the
     * lock.
     *
     * @return State of the auto-white balance lock. Returns true if
     * auto-white balance is currently locked, and false
     * otherwise.
     * @see #setAutoWhiteBalanceLock(boolean)
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public boolean getAutoWhiteBalanceLock() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.getAutoWhiteBalanceLock();
        }
        return false;
    }

    /**
     * Returns true if auto-white balance locking is supported. Applications
     * should call this before trying to lock auto-white balance. See
     * {@link #setAutoWhiteBalanceLock} for details about the lock.
     *
     * @return true if auto-white balance lock is supported.
     * @see #setAutoWhiteBalanceLock(boolean)
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public boolean isAutoWhiteBalanceLockSupported() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.isAutoWhiteBalanceLockSupported();
        }
        return false;
    }

    /**
     * Gets current zoom value. This also works when smooth zoom is in
     * progress. Applications should check {@link #isZoomSupported} before
     * using this method.
     *
     * @return the current zoom value. The range is 0 to {@link
     * #getMaxZoom}. 0 means the camera is not zoomed.
     */
    public int getZoom() {
        return this.parameters.getZoom();
    }

    /**
     * Sets current zoom value. If the camera is zoomed (value &gt; 0), the
     * actual picture size may be smaller than picture size setting.
     * Applications can check the actual picture size after picture is
     * returned from {@link android.hardware.Camera.PictureCallback}. The preview size remains the
     * same in zoom. Applications should check {@link #isZoomSupported}
     * before using this method.
     *
     * @param value zoom value. The valid range is 0 to {@link #getMaxZoom}.
     */
    public void setZoom(int value) {
        this.parameters.setZoom(value);
    }

    /**
     * Returns true if zoom is supported. Applications should call this
     * before using other zoom methods.
     *
     * @return true if zoom is supported.
     */
    public boolean isZoomSupported() {
        if (GAdapter.IS_NOT_SUPPORT_ZOOM) {
            return false;
        }
        return this.parameters.isZoomSupported() &amp;&amp; this.parameters.getMaxZoom() &gt; 0;
    }

    /**
     * Gets the maximum zoom value allowed for snapshot. This is the maximum
     * value that applications can set to {@link #setZoom(int)}.
     * Applications should call {@link #isZoomSupported} before using this
     * method. This value may change in different preview size. Applications
     * should call this again after setting preview size.
     *
     * @return the maximum zoom value supported by the camera.
     */
    public int getMaxZoom() {
        return this.parameters.getMaxZoom();
    }

    /**
     * Gets the zoom ratios of all zoom values. Applications should check
     * {@link #isZoomSupported} before using this method.
     *
     * @return the zoom ratios in 1/100 increments. Ex: a zoom of 3.2x is
     * returned as 320. The number of elements is {@link
     * #getMaxZoom} + 1. The list is sorted from small to large. The
     * first element is always 100. The last element is the zoom
     * ratio of the maximum zoom value.
     */
    public List&lt;Integer&gt; getZoomRatios() {
        return this.parameters.getZoomRatios();
    }

    /**
     * Returns true if smooth zoom is supported. Applications should call
     * this before using other smooth zoom methods.
     *
     * @return true if smooth zoom is supported.
     */
    public boolean isSmoothZoomSupported() {
        return this.parameters.isSmoothZoomSupported();
    }

    /**
     * &lt;p&gt;Gets the distances from the camera to where an object appears to be
     * in focus. The object is sharpest at the optimal focus distance. The
     * depth of field is the far focus distance minus near focus distance.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Focus distances may change after calling {@link
     * android.hardware.Camera#autoFocus(android.hardware.Camera.AutoFocusCallback)}, {@link android.hardware.Camera#cancelAutoFocus}, or {@link
     * android.hardware.Camera#startPreview()}. Applications can call {@link android.hardware.Camera.Parameters#getParameters()}
     * and this method anytime to get the latest focus distances. If the
     * focus mode is FOCUS_MODE_CONTINUOUS_VIDEO, focus distances may change
     * from time to time.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;This method is intended to estimate the distance between the camera
     * and the subject. After autofocus, the subject distance may be within
     * near and far focus distance. However, the precision depends on the
     * camera hardware, autofocus algorithm, the focus area, and the scene.
     * The error can be large and it should be only used as a reference.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Far focus distance &gt;= optimal focus distance &gt;= near focus distance.
     * If the focus distance is infinity, the value will be
     * {@code Float.POSITIVE_INFINITY}.&lt;/p&gt;
     *
     * @param output focus distances in meters. output must be a float
     *               array with three elements. Near focus distance, optimal focus
     *               distance, and far focus distance will be filled in the array.
     * @see android.hardware.Camera.Parameters#FOCUS_DISTANCE_NEAR_INDEX
     * @see android.hardware.Camera.Parameters#FOCUS_DISTANCE_OPTIMAL_INDEX
     * @see android.hardware.Camera.Parameters#FOCUS_DISTANCE_FAR_INDEX
     */
    @TargetApi(ApiHelper.VERSION_CODES.GINGERBREAD)
    public void getFocusDistances(float[] output) {
        if (ApiHelper.AFTER_GINGERBREAD) {
            this.parameters.getFocusDistances(output);
        }
    }

    /**
     * Gets the maximum number of focus areas supported. This is the maximum
     * length of the list in {@link #setFocusAreas(java.util.List)} and
     * {@link #getFocusAreas()}.
     *
     * @return the maximum number of focus areas supported by the camera.
     * @see #getFocusAreas()
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public int getMaxNumFocusAreas() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.getMaxNumFocusAreas();
        }
        return 0;
    }

    /**
     * &lt;p&gt;Gets the current focus areas. Camera driver uses the areas to decide
     * focus.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Before using this API or {@link #setFocusAreas(java.util.List)}, apps should
     * call {@link #getMaxNumFocusAreas()} to know the maximum number of
     * focus areas first. If the value is 0, focus area is not supported.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Each focus area is a rectangle with specified weight. The direction
     * is relative to the sensor orientation, that is, what the sensor sees.
     * The direction is not affected by the rotation or mirroring of
     * {@link android.hardware.Camera#setDisplayOrientation(int)}. Coordinates of the rectangle
     * range from -1000 to 1000. (-1000, -1000) is the upper left point.
     * (1000, 1000) is the lower right point. The width and height of focus
     * areas cannot be 0 or negative.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;The weight must range from 1 to 1000. The weight should be
     * interpreted as a per-pixel weight - all pixels in the area have the
     * specified weight. This means a small area with the same weight as a
     * larger area will have less influence on the focusing than the larger
     * area. Focus areas can partially overlap and the driver will add the
     * weights in the overlap region.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;A special case of a {@code null} focus area list means the driver is
     * free to select focus targets as it wants. For example, the driver may
     * use more signals to select focus areas and change them
     * dynamically. Apps can set the focus area list to {@code null} if they
     * want the driver to completely control focusing.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Focus areas are relative to the current field of view
     * ({@link #getZoom()}). No matter what the zoom level is, (-1000,-1000)
     * represents the top of the currently visible camera frame. The focus
     * area cannot be set to be outside the current field of view, even
     * when using zoom.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Focus area only has effect if the current focus mode is
     * {@link android.hardware.Camera.Parameters#FOCUS_MODE_AUTO}, {@link android.hardware.Camera.Parameters#FOCUS_MODE_MACRO},
     * {@link android.hardware.Camera.Parameters#FOCUS_MODE_CONTINUOUS_VIDEO}, or
     * {@link android.hardware.Camera.Parameters#FOCUS_MODE_CONTINUOUS_PICTURE}.&lt;/p&gt;
     *
     * @return a list of current focus areas
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public List&lt;Area&gt; getFocusAreas() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.getFocusAreas();
        }
        return Collections.emptyList();
    }

    /**
     * Sets focus areas. See {@link #getFocusAreas()} for documentation.
     *
     * @param focusAreas the focus areas
     * @see #getFocusAreas()
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public void setFocusAreas(List&lt;Area&gt; focusAreas) {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH &amp;&amp; focusAreas != null) {
            this.parameters.setFocusAreas(focusAreas);
        }
    }

    /**
     * Gets the maximum number of metering areas supported. This is the
     * maximum length of the list in {@link #setMeteringAreas(java.util.List)} and
     * {@link #getMeteringAreas()}.
     *
     * @return the maximum number of metering areas supported by the camera.
     * @see #getMeteringAreas()
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public int getMaxNumMeteringAreas() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.getMaxNumMeteringAreas();
        }
        return 0;
    }

    /**
     * &lt;p&gt;Gets the current metering areas. Camera driver uses these areas to
     * decide exposure.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Before using this API or {@link #setMeteringAreas(java.util.List)}, apps should
     * call {@link #getMaxNumMeteringAreas()} to know the maximum number of
     * metering areas first. If the value is 0, metering area is not
     * supported.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Each metering area is a rectangle with specified weight. The
     * direction is relative to the sensor orientation, that is, what the
     * sensor sees. The direction is not affected by the rotation or
     * mirroring of {@link android.hardware.Camera#setDisplayOrientation(int)}. Coordinates of the
     * rectangle range from -1000 to 1000. (-1000, -1000) is the upper left
     * point. (1000, 1000) is the lower right point. The width and height of
     * metering areas cannot be 0 or negative.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;The weight must range from 1 to 1000, and represents a weight for
     * every pixel in the area. This means that a large metering area with
     * the same weight as a smaller area will have more effect in the
     * metering result.  Metering areas can partially overlap and the driver
     * will add the weights in the overlap region.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;A special case of a {@code null} metering area list means the driver
     * is free to meter as it chooses. For example, the driver may use more
     * signals to select metering areas and change them dynamically. Apps
     * can set the metering area list to {@code null} if they want the
     * driver to completely control metering.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Metering areas are relative to the current field of view
     * ({@link #getZoom()}). No matter what the zoom level is, (-1000,-1000)
     * represents the top of the currently visible camera frame. The
     * metering area cannot be set to be outside the current field of view,
     * even when using zoom.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;No matter what metering areas are, the final exposure are compensated
     * by {@link #setExposureCompensation(int)}.&lt;/p&gt;
     *
     * @return a list of current metering areas
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public List&lt;Area&gt; getMeteringAreas() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.getMeteringAreas();
        }
        return Collections.emptyList();
    }

    /**
     * Sets metering areas. See {@link #getMeteringAreas()} for
     * documentation.
     *
     * @param meteringAreas the metering areas
     * @see #getMeteringAreas()
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public void setMeteringAreas(List&lt;Area&gt; meteringAreas) {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH &amp;&amp; meteringAreas != null) {
            this.parameters.setMeteringAreas(meteringAreas);
        }
    }

    /**
     * Gets the maximum number of detected faces supported. This is the
     * maximum length of the list returned from {@link android.hardware.Camera.FaceDetectionListener}.
     * If the return value is 0, face detection of the specified type is not
     * supported.
     *
     * @return the maximum number of detected face supported by the camera.
     * @see android.hardware.Camera#startFaceDetection()
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public int getMaxNumDetectedFaces() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.getMaxNumDetectedFaces();
        }
        return 0;
    }

    /**
     * Sets recording mode hint. This tells the camera that the intent of
     * the application is to record videos {@link
     * android.media.MediaRecorder#start()}, not to take still pictures
     * {@link android.hardware.Camera#takePicture(android.hardware.Camera.ShutterCallback, android.hardware.Camera.PictureCallback,
     * android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback)}. Using this hint can
     * allow MediaRecorder.start() to start faster or with fewer glitches on
     * output. This should be called before starting preview for the best
     * result, but can be changed while the preview is active. The default
     * value is false.
     * &lt;p/&gt;
     * The app can still call takePicture() when the hint is true or call
     * MediaRecorder.start() when the hint is false. But the performance may
     * be worse.
     *
     * @param hint true if the apps intend to record videos using
     *             {@link android.media.MediaRecorder}.
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public void setRecordingHint(boolean hint) {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            this.parameters.setRecordingHint(hint);
        }
    }

    /**
     * &lt;p&gt;Returns true if video snapshot is supported. That is, applications
     * can call {@link android.hardware.Camera#takePicture(android.hardware.Camera.ShutterCallback,
     * android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback,
     * android.hardware.Camera.PictureCallback)} during recording. Applications do not need
     * to call {@link android.hardware.Camera#startPreview()} after taking a picture. The preview
     * will be still active. Other than that, taking a picture during
     * recording is identical to taking a picture normally. All settings and
     * methods related to takePicture work identically. Ex:
     * {@link #getPictureSize()}, {@link #getSupportedPictureSizes()},
     * {@link #setJpegQuality(int)}, {@link #setRotation(int)}, and etc. The
     * picture will have an EXIF header. {@link android.hardware.Camera.Parameters#FLASH_MODE_AUTO} and
     * {@link android.hardware.Camera.Parameters#FLASH_MODE_ON} also still work, but the video will record the
     * flash.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Applications can set shutter callback as null to avoid the shutter
     * sound. It is also recommended to set raw picture and post view
     * callbacks to null to avoid the interrupt of preview display.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Field-of-view of the recorded video may be different from that of the
     * captured pictures. The maximum size of a video snapshot may be
     * smaller than that for regular still captures. If the current picture
     * size is set higher than can be supported by video snapshot, the
     * picture will be captured at the maximum supported size instead.&lt;/p&gt;
     *
     * @return true if video snapshot is supported.
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH)
    public boolean isVideoSnapshotSupported() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH) {
            return this.parameters.isVideoSnapshotSupported();
        }
        return false;
    }

    /**
     * &lt;p&gt;Enables and disables video stabilization. Use
     * {@link #isVideoStabilizationSupported} to determine if calling this
     * method is valid.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Video stabilization reduces the shaking due to the motion of the
     * camera in both the preview stream and in recorded videos, including
     * data received from the preview callback. It does not reduce motion
     * blur in images captured with
     * {@link android.hardware.Camera#takePicture takePicture}.&lt;/p&gt;
     * &lt;p/&gt;
     * &lt;p&gt;Video stabilization can be enabled and disabled while preview or
     * recording is active, but toggling it may cause a jump in the video
     * stream that may be undesirable in a recorded video.&lt;/p&gt;
     *
     * @param toggle Set to true to enable video stabilization, and false to
     *               disable video stabilization.
     * @see #isVideoStabilizationSupported()
     * @see #getVideoStabilization()
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
    public void setVideoStabilization(boolean toggle) {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH_MR1) {
            this.parameters.setVideoStabilization(toggle);
        }
    }

    /**
     * Get the current state of video stabilization. See
     * {@link #setVideoStabilization} for details of video stabilization.
     *
     * @return true if video stabilization is enabled
     * @see #isVideoStabilizationSupported()
     * @see #setVideoStabilization(boolean)
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
    public boolean getVideoStabilization() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH_MR1) {
            return this.parameters.getVideoStabilization();
        }
        return false;
    }

    /**
     * Returns true if video stabilization is supported. See
     * {@link #setVideoStabilization} for details of video stabilization.
     *
     * @return true if video stabilization is supported
     * @see #setVideoStabilization(boolean)
     * @see #getVideoStabilization()
     */
    @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
    public boolean isVideoStabilizationSupported() {
        if (ApiHelper.AFTER_ICE_CREAM_SANDWICH_MR1) {
            return this.parameters.isVideoStabilizationSupported();
        }
        return false;
    }
}</sourceCode>
    <number>1874931569</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>25 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86745</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>180</start>
        <end>204</end>
      </range>
    </lineRanges>
    <primaryLineNumber>180</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/effect/model/entity/type/AdvanceHSL.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.effect.model.entity.type</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-1346495237</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/effect/model/entity/type</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>25 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86744</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>113</start>
            <end>137</end>
          </range>
        </lineRanges>
        <primaryLineNumber>113</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/effect/model/entity/type/AdvanceBase.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.effect.model.entity.type</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1346495237</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/effect/model/entity/type</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
          <dry>
            <message>25 lines of duplicate code.</message>
            <priority>NORMAL</priority>
            <key>86746</key>
            <lineRanges>
              <range plugin="analysis-core@1.65">
                <start>92</start>
                <end>116</end>
              </range>
            </lineRanges>
            <primaryLineNumber>92</primaryLineNumber>
            <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/effect/model/entity/type/AdvanceVignette.java</fileName>
            <moduleName></moduleName>
            <packageName>us.pinguo.android.effect.group.sdk.effect.model.entity.type</packageName>
            <category></category>
            <type>Duplicate Code</type>
            <contextHashCode>-2025410334</contextHashCode>
            <origin>dry</origin>
            <pathName>src/us/pinguo/android/effect/group/sdk/effect/model/entity/type</pathName>
            <primaryColumnStart>0</primaryColumnStart>
            <primaryColumnEnd>0</primaryColumnEnd>
            <links>
              <dry reference="../../../../../.."/>
              <dry reference="../../../.."/>
            </links>
            <sourceCode>if (item instanceof ParamFloatItem) {
                    if (((ParamFloatItem) item).value
                            == ((ParamFloatItem) item).defaultValue) {
                        continue;
                    }
                    JSONObject jsonObject = new JSONObject();
                    try {
                        jsonObject.put(&quot;key&quot;, item.key);
                        jsonObject.put(&quot;packName&quot;, &quot;&quot;);
                        jsonObject.put(&quot;name&quot;, &quot;&quot;);
                        jsonObject.put(&quot;value&quot;, Math.round(((ParamFloatItem) item).value / ((ParamFloatItem) item).step));
                        jsonObject.put(&quot;minValue&quot;, Math.round(((ParamFloatItem) item).min));
                        jsonObject.put(&quot;type&quot;, 1);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                    list.add(jsonObject);
                }
            }
        }

        return list;
    }
}</sourceCode>
            <number>1874931599</number>
            <isDerived>false</isDerived>
          </dry>
        </links>
        <sourceCode>if (item instanceof ParamFloatItem) {
                    if (((ParamFloatItem) item).value
                            == ((ParamFloatItem) item).defaultValue) {
                        continue;
                    }
                    JSONObject jsonObject = new JSONObject();
                    try {
                        jsonObject.put(&quot;key&quot;, item.key);
                        jsonObject.put(&quot;packName&quot;, &quot;&quot;);
                        jsonObject.put(&quot;name&quot;, &quot;&quot;);
                        jsonObject.put(&quot;value&quot;, Math.round(((ParamFloatItem) item).value / ((ParamFloatItem) item).step));
                        jsonObject.put(&quot;minValue&quot;, Math.round(((ParamFloatItem) item).min));
                        jsonObject.put(&quot;type&quot;, 1);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                    list.add(jsonObject);
                }
            }
        }

        return list;
    }
}</sourceCode>
        <number>1874931599</number>
        <isDerived>false</isDerived>
      </dry>
      <dry reference="../dry/links/dry[2]"/>
    </links>
    <sourceCode>if (item instanceof ParamFloatItem) {
                    if (((ParamFloatItem) item).value
                            == ((ParamFloatItem) item).defaultValue) {
                        continue;
                    }
                    JSONObject jsonObject = new JSONObject();
                    try {
                        jsonObject.put(&quot;key&quot;, item.key);
                        jsonObject.put(&quot;packName&quot;, &quot;&quot;);
                        jsonObject.put(&quot;name&quot;, &quot;&quot;);
                        jsonObject.put(&quot;value&quot;, Math.round(((ParamFloatItem) item).value / ((ParamFloatItem) item).step));
                        jsonObject.put(&quot;minValue&quot;, Math.round(((ParamFloatItem) item).min));
                        jsonObject.put(&quot;type&quot;, 1);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                    list.add(jsonObject);
                }
            }
        }

        return list;
    }
}</sourceCode>
    <number>1874931599</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>73 lines of duplicate code.</message>
    <priority>HIGH</priority>
    <key>86702</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>337</start>
        <end>409</end>
      </range>
    </lineRanges>
    <primaryLineNumber>337</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/view/VerticalLayout.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.view</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>1560738821</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/view</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>73 lines of duplicate code.</message>
        <priority>HIGH</priority>
        <key>86701</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>332</start>
            <end>404</end>
          </range>
        </lineRanges>
        <primaryLineNumber>332</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/view/HorizontalLayout.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.view</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>1820396951</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/view</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>HorizontalLayout.this.setVisibility(View.GONE);

            } else if (msg.what == SET_VIEW_INVISIBLE) {
                revertLayout();

            }
        }
    };

    public void scrollToView(final View currentView, final HorizontalLayoutCallBackListener callBackListener) {

        scrollView.getRefreshableView().post(new Runnable() {
            @Override
            public void run() {
                int containerWidth = getMeasuredWidth();
                int viewWidth = (int) (getMeasuredWidth() / count);

                int index = 0;
                if (null != currentView) {
                    index = layout.indexOfChild(currentView);
                }

                int totalWidth = viewWidth * index;

                int gap = totalWidth % containerWidth;
                int predictor = totalWidth / containerWidth;

                int scrollX = 0;
                if (0 != index) {
                    scrollX = gap + containerWidth * predictor - 2 * viewWidth;
                }
                scrollView.getRefreshableView().scrollTo(scrollX, scrollView.getRefreshableView().getScrollY());


                if (callBackListener != null) {
                    callBackListener.callBack();
                }
            }
        });
    }

    public void scrollToView(View currentView) {
        scrollToView(currentView, null);
    }

    public void scrollToViewWithAnimation(final View currentView, final float right, final int displayWidth, final HorizontalLayoutCallBackListener callBackListener) {

        scrollToView(currentView, new HorizontalLayoutCallBackListener() {
            @Override
            public void callBack() {
                int index = layout.indexOfChild(currentView);
                if (index == -1) {
                    index = 0;
                }
                showViewForTranslateAnimation(right, index, displayWidth);

                if (callBackListener != null) {
                    callBackListener.callBack();
                }
            }
        });

    }

    public ViewGroup getContainerView() {
        return layout;
    }

    public static interface HorizontalLayoutCallBackListener {

        public void callBack();
    }
}</sourceCode>
        <number>1874931578</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>HorizontalLayout.this.setVisibility(View.GONE);

            } else if (msg.what == SET_VIEW_INVISIBLE) {
                revertLayout();

            }
        }
    };

    public void scrollToView(final View currentView, final HorizontalLayoutCallBackListener callBackListener) {

        scrollView.getRefreshableView().post(new Runnable() {
            @Override
            public void run() {
                int containerWidth = getMeasuredWidth();
                int viewWidth = (int) (getMeasuredWidth() / count);

                int index = 0;
                if (null != currentView) {
                    index = layout.indexOfChild(currentView);
                }

                int totalWidth = viewWidth * index;

                int gap = totalWidth % containerWidth;
                int predictor = totalWidth / containerWidth;

                int scrollX = 0;
                if (0 != index) {
                    scrollX = gap + containerWidth * predictor - 2 * viewWidth;
                }
                scrollView.getRefreshableView().scrollTo(scrollX, scrollView.getRefreshableView().getScrollY());


                if (callBackListener != null) {
                    callBackListener.callBack();
                }
            }
        });
    }

    public void scrollToView(View currentView) {
        scrollToView(currentView, null);
    }

    public void scrollToViewWithAnimation(final View currentView, final float right, final int displayWidth, final HorizontalLayoutCallBackListener callBackListener) {

        scrollToView(currentView, new HorizontalLayoutCallBackListener() {
            @Override
            public void callBack() {
                int index = layout.indexOfChild(currentView);
                if (index == -1) {
                    index = 0;
                }
                showViewForTranslateAnimation(right, index, displayWidth);

                if (callBackListener != null) {
                    callBackListener.callBack();
                }
            }
        });

    }

    public ViewGroup getContainerView() {
        return layout;
    }

    public static interface HorizontalLayoutCallBackListener {

        public void callBack();
    }
}</sourceCode>
    <number>1874931578</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[12]/links/dry"/>
  <dry reference="../dry[3]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>25 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86739</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>582</start>
        <end>606</end>
      </range>
    </lineRanges>
    <primaryLineNumber>582</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/group/menu/TiltShiftMenu.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.group.menu</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>99634062</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/group/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>25 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86738</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>233</start>
            <end>257</end>
          </range>
        </lineRanges>
        <primaryLineNumber>233</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/group/menu/TiltShiftMenu.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.group.menu</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-2107793343</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/group/menu</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>mLastEffectKey = mCurEffect.key;
            if (mLastEffectKey.equals(TiltShiftCircle.class.getSimpleName())) {
                ParamItem circleParamItem = mCurEffect.getParamItem(
                        TiltShiftCircle.PARAM_KEY_CIRCLE_PARAM, TiltShiftCircle.EFFECT_KEY_SINGLE);
                mLastCircleParamValue = ((ParamVecItem) circleParamItem).value;

                ParamFloatItem circleStrongParamItem = (ParamFloatItem) mCurEffect.getParamItem(
                        TiltShiftCircle.PARAM_KEY_CIRCLE_STRONG_PARAM, TiltShiftCircle.EFFECT_KEY_BLUR);
                mLastCircleStrongParamValue = circleStrongParamItem.value;
            } else if (mLastEffectKey.equals(TiltShiftLine.class.getSimpleName())) {
                ParamItem lineParamItem1 = mCurEffect.getParamItem(
                        TiltShiftLine.PARAM_KEY_LINE_PARAM1, TiltShiftLine.EFFECT_KEY_SINGLE);
                ParamItem lineParamItem2 = mCurEffect.getParamItem(
                        TiltShiftLine.PARAM_KEY_LINE_PARAM2, TiltShiftLine.EFFECT_KEY_SINGLE);
                mLastLineParamValue1 = ((ParamVecItem) lineParamItem1).value;
                mLastLineParamValue2 = ((ParamVecItem) lineParamItem2).value;

                ParamFloatItem lineStrongParamItem = (ParamFloatItem) mCurEffect.getParamItem(
                        TiltShiftLine.PARAM_KEY_LINE_STRONG_PARAM, TiltShiftLine.EFFECT_KEY_BLUR);
                mLastLineStrongParamValue = lineStrongParamItem.value;
            }
        }


    }</sourceCode>
        <number>1874931596</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>mLastEffectKey = mCurEffect.key;
            if (mLastEffectKey.equals(TiltShiftCircle.class.getSimpleName())) {
                ParamItem circleParamItem = mCurEffect.getParamItem(
                        TiltShiftCircle.PARAM_KEY_CIRCLE_PARAM, TiltShiftCircle.EFFECT_KEY_SINGLE);
                mLastCircleParamValue = ((ParamVecItem) circleParamItem).value;

                ParamFloatItem circleStrongParamItem = (ParamFloatItem) mCurEffect.getParamItem(
                        TiltShiftCircle.PARAM_KEY_CIRCLE_STRONG_PARAM, TiltShiftCircle.EFFECT_KEY_BLUR);
                mLastCircleStrongParamValue = circleStrongParamItem.value;
            } else if (mLastEffectKey.equals(TiltShiftLine.class.getSimpleName())) {
                ParamItem lineParamItem1 = mCurEffect.getParamItem(
                        TiltShiftLine.PARAM_KEY_LINE_PARAM1, TiltShiftLine.EFFECT_KEY_SINGLE);
                ParamItem lineParamItem2 = mCurEffect.getParamItem(
                        TiltShiftLine.PARAM_KEY_LINE_PARAM2, TiltShiftLine.EFFECT_KEY_SINGLE);
                mLastLineParamValue1 = ((ParamVecItem) lineParamItem1).value;
                mLastLineParamValue2 = ((ParamVecItem) lineParamItem2).value;

                ParamFloatItem lineStrongParamItem = (ParamFloatItem) mCurEffect.getParamItem(
                        TiltShiftLine.PARAM_KEY_LINE_STRONG_PARAM, TiltShiftLine.EFFECT_KEY_BLUR);
                mLastLineStrongParamValue = lineStrongParamItem.value;
            }
        }


    }</sourceCode>
    <number>1874931596</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>92 lines of duplicate code.</message>
    <priority>HIGH</priority>
    <key>86697</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>28</start>
        <end>119</end>
      </range>
    </lineRanges>
    <primaryLineNumber>28</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/login/view/Rotate3dAnimation.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.login.view</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-1945442527</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/login/view</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>92 lines of duplicate code.</message>
        <priority>HIGH</priority>
        <key>86696</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>28</start>
            <end>119</end>
          </range>
        </lineRanges>
        <primaryLineNumber>28</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/login/activity/Rotate3dAnimation.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.login.activity</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1945442527</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/login/activity</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>public class Rotate3dAnimation extends Animation {
    private final float mFromDegrees;
    private final float mToDegrees;
    private final float mCenterX;
    private final float mCenterY;
    private final float mDepthZ;
    private final boolean mReverse;
    private Camera mCamera;
    // 用于监听动画进度
    private InterpolatedTimeListener mListener;

    /**
     * Creates a new 3D rotation on the Y axis. The rotation is defined by its
     * start angle and its end angle. Both angles are in degrees. The rotation
     * is performed around a center point on the 2D space, definied by a pair
     * of X and Y coordinates, called centerX and centerY. When the animation
     * starts, a translation on the Z axis (depth) is performed. The length
     * of the translation can be specified, as well as whether the translation
     * should be reversed in time.
     *
     * @param fromDegrees the start angle of the 3D rotation
     * @param toDegrees   the end angle of the 3D rotation
     * @param centerX     the X center of the 3D rotation
     * @param centerY     the Y center of the 3D rotation
     * @param reverse     true if the translation should be reversed, false otherwise
     */
    public Rotate3dAnimation(float fromDegrees, float toDegrees,
                             float centerX, float centerY, float depthZ, boolean reverse) {
        mFromDegrees = fromDegrees;
        mToDegrees = toDegrees;
        mCenterX = centerX;
        mCenterY = centerY;
        mDepthZ = depthZ;
        mReverse = reverse;
    }

    @Override
    public void initialize(int width, int height, int parentWidth, int parentHeight) {
        super.initialize(width, height, parentWidth, parentHeight);
        mCamera = new Camera();
    }

    @Override
    protected void applyTransformation(float interpolatedTime, Transformation t) {

        if (mListener != null) {
            mListener.interpolatedTime(interpolatedTime);
        }
        final float fromDegrees = mFromDegrees;
        float degrees = fromDegrees + ((mToDegrees - fromDegrees) * interpolatedTime);

        boolean overHalf = (interpolatedTime &gt; 0.5f);

        if (overHalf) {
            // 翻转过半的情况下，为保证文字仍为可读的文字而非镜面效果的文字，需翻转180度。
            degrees = degrees - 180;
        }

        final float centerX = mCenterX;
        final float centerY = mCenterY;
        final Camera camera = mCamera;

        //修改Z轴的值，否则动画完成后会看到view的大小会变小
        final float depth = (0.5f - Math.abs(interpolatedTime - 0.5f)) * mDepthZ;
        final Matrix matrix = t.getMatrix();

        camera.save();
        if (mReverse) {
            camera.translate(0.0f, 0.0f, mDepthZ * interpolatedTime);
        } else {
            camera.translate(0.0f, 0.0f, depth);
        }
        camera.rotateY(degrees);
        camera.getMatrix(matrix);
        camera.restore();
        matrix.preTranslate(-centerX, -centerY);
        matrix.postTranslate(centerX, centerY);

    }

    public void setInterpolatedTimeListener(InterpolatedTimeListener listener) {
        mListener = listener;
    }

    /**
     * 动画进度监听器。
     */
    public static interface InterpolatedTimeListener {
        public void interpolatedTime(float interpolatedTime);
    }

}</sourceCode>
        <number>1874931576</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>public class Rotate3dAnimation extends Animation {
    private final float mFromDegrees;
    private final float mToDegrees;
    private final float mCenterX;
    private final float mCenterY;
    private final float mDepthZ;
    private final boolean mReverse;
    private Camera mCamera;
    // 用于监听动画进度
    private InterpolatedTimeListener mListener;

    /**
     * Creates a new 3D rotation on the Y axis. The rotation is defined by its
     * start angle and its end angle. Both angles are in degrees. The rotation
     * is performed around a center point on the 2D space, definied by a pair
     * of X and Y coordinates, called centerX and centerY. When the animation
     * starts, a translation on the Z axis (depth) is performed. The length
     * of the translation can be specified, as well as whether the translation
     * should be reversed in time.
     *
     * @param fromDegrees the start angle of the 3D rotation
     * @param toDegrees   the end angle of the 3D rotation
     * @param centerX     the X center of the 3D rotation
     * @param centerY     the Y center of the 3D rotation
     * @param reverse     true if the translation should be reversed, false otherwise
     */
    public Rotate3dAnimation(float fromDegrees, float toDegrees,
                             float centerX, float centerY, float depthZ, boolean reverse) {
        mFromDegrees = fromDegrees;
        mToDegrees = toDegrees;
        mCenterX = centerX;
        mCenterY = centerY;
        mDepthZ = depthZ;
        mReverse = reverse;
    }

    @Override
    public void initialize(int width, int height, int parentWidth, int parentHeight) {
        super.initialize(width, height, parentWidth, parentHeight);
        mCamera = new Camera();
    }

    @Override
    protected void applyTransformation(float interpolatedTime, Transformation t) {

        if (mListener != null) {
            mListener.interpolatedTime(interpolatedTime);
        }
        final float fromDegrees = mFromDegrees;
        float degrees = fromDegrees + ((mToDegrees - fromDegrees) * interpolatedTime);

        boolean overHalf = (interpolatedTime &gt; 0.5f);

        if (overHalf) {
            // 翻转过半的情况下，为保证文字仍为可读的文字而非镜面效果的文字，需翻转180度。
            degrees = degrees - 180;
        }

        final float centerX = mCenterX;
        final float centerY = mCenterY;
        final Camera camera = mCamera;

        //修改Z轴的值，否则动画完成后会看到view的大小会变小
        final float depth = (0.5f - Math.abs(interpolatedTime - 0.5f)) * mDepthZ;
        final Matrix matrix = t.getMatrix();

        camera.save();
        if (mReverse) {
            camera.translate(0.0f, 0.0f, mDepthZ * interpolatedTime);
        } else {
            camera.translate(0.0f, 0.0f, depth);
        }
        camera.rotateY(degrees);
        camera.getMatrix(matrix);
        camera.restore();
        matrix.preTranslate(-centerX, -centerY);
        matrix.postTranslate(centerX, centerY);

    }

    public void setInterpolatedTimeListener(InterpolatedTimeListener listener) {
        mListener = listener;
    }

    /**
     * 动画进度监听器。
     */
    public static interface InterpolatedTimeListener {
        public void interpolatedTime(float interpolatedTime);
    }

}</sourceCode>
    <number>1874931576</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>28 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86786</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>214</start>
        <end>241</end>
      </range>
    </lineRanges>
    <primaryLineNumber>214</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareActivity.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.mix</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-1019386702</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/mix</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>28 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86787</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>279</start>
            <end>306</end>
          </range>
        </lineRanges>
        <primaryLineNumber>279</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareFilterActivity.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.mix</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1019386702</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/mix</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
          <dry>
            <message>28 lines of duplicate code.</message>
            <priority>NORMAL</priority>
            <key>86785</key>
            <lineRanges>
              <range plugin="analysis-core@1.65">
                <start>168</start>
                <end>195</end>
              </range>
            </lineRanges>
            <primaryLineNumber>168</primaryLineNumber>
            <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/filter/square/fragment/FilterDetails.java</fileName>
            <moduleName></moduleName>
            <packageName>com.pinguo.edit.sdk.filter.square.fragment</packageName>
            <category></category>
            <type>Duplicate Code</type>
            <contextHashCode>95559079</contextHashCode>
            <origin>dry</origin>
            <pathName>src/com/pinguo/edit/sdk/filter/square/fragment</pathName>
            <primaryColumnStart>0</primaryColumnStart>
            <primaryColumnEnd>0</primaryColumnEnd>
            <links>
              <dry reference="../../../../../.."/>
              <dry reference="../../../.."/>
            </links>
            <sourceCode>mPreviewImage.setVisibility(View.VISIBLE);
                    }
                    return true;
                }
            });

            mPreviewImage.setImageLoadingListener(new ImageLoadingListener() {
                @Override
                public void onLoadingStarted(String s, View view) {
                }

                @Override
                public void onLoadingFailed(String s, View view, FailReason failReason) {
                }

                @Override
                public void onLoadingComplete(String s, View view, Bitmap bitmap) {
                    AlphaAnimation animation = new AlphaAnimation(0, 1.0f);
                    animation.setDuration(1000);
                    view.startAnimation(animation);
                }

                @Override
                public void onLoadingCancelled(String s, View view) {

                }
            });
            mPreviewImage.setImageUrl(path);</sourceCode>
            <number>1874931618</number>
            <isDerived>false</isDerived>
          </dry>
        </links>
        <sourceCode>mPreviewImage.setVisibility(View.VISIBLE);
                    }
                    return true;
                }
            });

            mPreviewImage.setImageLoadingListener(new ImageLoadingListener() {
                @Override
                public void onLoadingStarted(String s, View view) {
                }

                @Override
                public void onLoadingFailed(String s, View view, FailReason failReason) {
                }

                @Override
                public void onLoadingComplete(String s, View view, Bitmap bitmap) {
                    AlphaAnimation animation = new AlphaAnimation(0, 1.0f);
                    animation.setDuration(1000);
                    view.startAnimation(animation);
                }

                @Override
                public void onLoadingCancelled(String s, View view) {

                }
            });
            mPreviewImage.setImageUrl(path);</sourceCode>
        <number>1874931618</number>
        <isDerived>false</isDerived>
      </dry>
      <dry reference="../dry/links/dry[2]"/>
    </links>
    <sourceCode>mPreviewImage.setVisibility(View.VISIBLE);
                    }
                    return true;
                }
            });

            mPreviewImage.setImageLoadingListener(new ImageLoadingListener() {
                @Override
                public void onLoadingStarted(String s, View view) {
                }

                @Override
                public void onLoadingFailed(String s, View view, FailReason failReason) {
                }

                @Override
                public void onLoadingComplete(String s, View view, Bitmap bitmap) {
                    AlphaAnimation animation = new AlphaAnimation(0, 1.0f);
                    animation.setDuration(1000);
                    view.startAnimation(animation);
                }

                @Override
                public void onLoadingCancelled(String s, View view) {

                }
            });
            mPreviewImage.setImageUrl(path);</sourceCode>
    <number>1874931618</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>33 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86782</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>668</start>
        <end>700</end>
      </range>
    </lineRanges>
    <primaryLineNumber>668</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareFilterActivity.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.mix</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-1629213474</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/mix</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>33 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86781</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>633</start>
            <end>665</end>
          </range>
        </lineRanges>
        <primaryLineNumber>633</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareActivity.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.mix</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>409175225</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/mix</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>GLogger.i(TAG, &quot;Delete temp at file uploaded:&quot; + path);
                                    FileUtils.deleteFile(path);
                                }
                            }
                        }
                    });
                }
            }

            @Override
            public void onError(String error) {
                GLogger.i(TAG, &quot;Get upload photo auth failed:&quot; + error);
                isUploadSucceed[0] = false;
                countDownLatch.countDown();
                countDownLatch.countDown();
            }
        });

        try {
            countDownLatch.await();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        return isUploadSucceed[0];
    }

    private static String buildTransaction(final String type) {
        return (type == null) ? String.valueOf(System.currentTimeMillis())
                : type + System.currentTimeMillis();
    }

    private WXDataReceiver mWXDataReceiver = new WXDataReceiver();</sourceCode>
        <number>1874931616</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>GLogger.i(TAG, &quot;Delete temp at file uploaded:&quot; + path);
                                    FileUtils.deleteFile(path);
                                }
                            }
                        }
                    });
                }
            }

            @Override
            public void onError(String error) {
                GLogger.i(TAG, &quot;Get upload photo auth failed:&quot; + error);
                isUploadSucceed[0] = false;
                countDownLatch.countDown();
                countDownLatch.countDown();
            }
        });

        try {
            countDownLatch.await();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        return isUploadSucceed[0];
    }

    private static String buildTransaction(final String type) {
        return (type == null) ? String.valueOf(System.currentTimeMillis())
                : type + System.currentTimeMillis();
    }

    private WXDataReceiver mWXDataReceiver = new WXDataReceiver();</sourceCode>
    <number>1874931616</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>15 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86757</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>50</start>
        <end>64</end>
      </range>
    </lineRanges>
    <primaryLineNumber>50</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/androidsdk/model/CropRendererMethodForPictureInfo.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.androidsdk.model</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>991136857</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/androidsdk/model</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>15 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86758</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>117</start>
            <end>131</end>
          </range>
        </lineRanges>
        <primaryLineNumber>117</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/androidsdk/model/CropRendererMethodForPictureInfo.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.androidsdk.model</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-538916692</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/androidsdk/model</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>mPGRect = new PGRect(left, top, right, bottom);

        // debug
        GLogger.d(TAG, &quot;pictureInfo rectF:&quot; + rectF);
        GLogger.d(TAG, &quot;pictureInfo size:&quot; + pictureInfo.getPicSize());
        float wShouldBe = pictureInfo.getPicSize().getMinLength();
        float hShouldBe;
        if (top == 0f) {
            hShouldBe = Math.abs(pictureInfo.getPicSize().getWidth() * right -
                    pictureInfo.getPicSize().getWidth()*left);
        } else {
            hShouldBe = Math.abs(pictureInfo.getPicSize().getWidth() * bottom -
                    pictureInfo.getPicSize().getWidth() * top);
        }
        GLogger.d(TAG, &quot;pictureInfo should be:&quot; +   wShouldBe + &quot;x&quot; + hShouldBe);</sourceCode>
        <number>1874931605</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>mPGRect = new PGRect(left, top, right, bottom);

        // debug
        GLogger.d(TAG, &quot;pictureInfo rectF:&quot; + rectF);
        GLogger.d(TAG, &quot;pictureInfo size:&quot; + pictureInfo.getPicSize());
        float wShouldBe = pictureInfo.getPicSize().getMinLength();
        float hShouldBe;
        if (top == 0f) {
            hShouldBe = Math.abs(pictureInfo.getPicSize().getWidth() * right -
                    pictureInfo.getPicSize().getWidth()*left);
        } else {
            hShouldBe = Math.abs(pictureInfo.getPicSize().getWidth() * bottom -
                    pictureInfo.getPicSize().getWidth() * top);
        }
        GLogger.d(TAG, &quot;pictureInfo should be:&quot; +   wShouldBe + &quot;x&quot; + hShouldBe);</sourceCode>
    <number>1874931605</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[16]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>24 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86802</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>53</start>
        <end>76</end>
      </range>
    </lineRanges>
    <primaryLineNumber>53</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/login/view/Dialog/LogicDialog.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.login.view.Dialog</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-1944907608</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/login/view/Dialog</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>24 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86803</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>48</start>
            <end>71</end>
          </range>
        </lineRanges>
        <primaryLineNumber>48</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/option/view/SelectDialog.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.option.view</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1528551961</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/option/view</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>}
        });

        TextView message = (TextView) findViewById(
                ResourceHelper.getId(getContext(), &quot;dialog_tv&quot;));
        if (0 != mMessage) {
            String text = &quot;&quot;;
            if (0 != mMessage) {

                if (mExtraMessage != null &amp;&amp; !mExtraMessage.isEmpty()) {
                    text = getContext().getString(mMessage, mExtraMessage);
                } else {
                    text = getContext().getString(mMessage, mExtraMessage);
                }
            }
            message.setText(text);
        }
    }

    public void setExtraMessage(String mes) {
        mExtraMessage = mes;
    }

    public void setPositiveBtn(View.OnClickListener listener) {</sourceCode>
        <number>1874931626</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>}
        });

        TextView message = (TextView) findViewById(
                ResourceHelper.getId(getContext(), &quot;dialog_tv&quot;));
        if (0 != mMessage) {
            String text = &quot;&quot;;
            if (0 != mMessage) {

                if (mExtraMessage != null &amp;&amp; !mExtraMessage.isEmpty()) {
                    text = getContext().getString(mMessage, mExtraMessage);
                } else {
                    text = getContext().getString(mMessage, mExtraMessage);
                }
            }
            message.setText(text);
        }
    }

    public void setExtraMessage(String mes) {
        mExtraMessage = mes;
    }

    public void setPositiveBtn(View.OnClickListener listener) {</sourceCode>
    <number>1874931626</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>21 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86773</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>63</start>
        <end>83</end>
      </range>
    </lineRanges>
    <primaryLineNumber>63</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareListDialog.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.mix</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-1630761060</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/mix</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>21 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86774</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>54</start>
            <end>74</end>
          </range>
        </lineRanges>
        <primaryLineNumber>54</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/group/CompositeSaveListDialog.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.group</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1469230344</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/group</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>}


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        WindowManager m = (WindowManager) getContext()
                .getSystemService(Context.WINDOW_SERVICE);
        Display d = m.getDefaultDisplay();
        WindowManager.LayoutParams p = getWindow().getAttributes();
        p.width = d.getWidth();
        getWindow().setGravity(Gravity.BOTTOM);
        getWindow().setWindowAnimations(ResourceHelper.getStyle(mContext, &quot;CompositeSDKPopupDialog&quot;));
        getWindow().setAttributes(p);
    }

    private View.OnClickListener mOnClickListener = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            if (mRootView == v) {</sourceCode>
        <number>1874931612</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>}


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        WindowManager m = (WindowManager) getContext()
                .getSystemService(Context.WINDOW_SERVICE);
        Display d = m.getDefaultDisplay();
        WindowManager.LayoutParams p = getWindow().getAttributes();
        p.width = d.getWidth();
        getWindow().setGravity(Gravity.BOTTOM);
        getWindow().setWindowAnimations(ResourceHelper.getStyle(mContext, &quot;CompositeSDKPopupDialog&quot;));
        getWindow().setAttributes(p);
    }

    private View.OnClickListener mOnClickListener = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            if (mRootView == v) {</sourceCode>
    <number>1874931612</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[11]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>16 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86809</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>302</start>
        <end>317</end>
      </range>
    </lineRanges>
    <primaryLineNumber>302</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/option/feedback/Camera360FeedbackActivity.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.option.feedback</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>1914990900</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/option/feedback</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>16 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86808</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>252</start>
            <end>267</end>
          </range>
        </lineRanges>
        <primaryLineNumber>252</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/option/feedback/Camera360FeedbackActivity.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.option.feedback</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>775466693</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/option/feedback</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>Log.i(&quot;test&quot;, &quot;服务器返回的反馈数据:&quot; + s);
                new Thread() {
                    public void run() {
                        try {
                            JSONObject object = new JSONObject(s);
                            @SuppressWarnings(&quot;unchecked&quot;)
                            Iterator&lt;String&gt; keys = object.keys();
                            while (keys.hasNext()) {
                                String key = keys.next();
                                if (key.equals(&quot;status&quot;)) {
                                    int status = object.getInt(key);
                                    if (status != 200) {
                                        break;
                                    }
                                } else if (key.equals(&quot;dialogs&quot;)) {
                                    JSONArray array = object.getJSONArray(key);</sourceCode>
        <number>1874931629</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>Log.i(&quot;test&quot;, &quot;服务器返回的反馈数据:&quot; + s);
                new Thread() {
                    public void run() {
                        try {
                            JSONObject object = new JSONObject(s);
                            @SuppressWarnings(&quot;unchecked&quot;)
                            Iterator&lt;String&gt; keys = object.keys();
                            while (keys.hasNext()) {
                                String key = keys.next();
                                if (key.equals(&quot;status&quot;)) {
                                    int status = object.getInt(key);
                                    if (status != 200) {
                                        break;
                                    }
                                } else if (key.equals(&quot;dialogs&quot;)) {
                                    JSONArray array = object.getJSONArray(key);</sourceCode>
    <number>1874931629</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[27]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>15 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86776</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>101</start>
        <end>115</end>
      </range>
    </lineRanges>
    <primaryLineNumber>101</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/option/feedback/Camera360FeedbackAdapter.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.option.feedback</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>437745318</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/option/feedback</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>15 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86775</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>41</start>
            <end>55</end>
          </range>
        </lineRanges>
        <primaryLineNumber>41</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/option/feedback/Camera360FeedbackAdapter.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.option.feedback</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>1057671435</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/option/feedback</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>if (datas != null) {
            IntArray intArray = new IntArray();
            int size = datas.size();
            long firstTime = -1;
            long lastTime = -1;
            for (int i = 0; i &lt; size; i++) {
                long time = datas.get(i).getTime();
                if (Math.abs(time - firstTime) &gt; 30 * 60 * 1000 &amp;&amp; Math.abs(time - lastTime) &gt; 5 * 60 * 1000) {
                    intArray.add(i);
                    firstTime = time;
                }
                lastTime = time;
            }
            dateArraryPosition = intArray.toArray(new int[intArray.size()]);
        }</sourceCode>
        <number>1874931613</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>if (datas != null) {
            IntArray intArray = new IntArray();
            int size = datas.size();
            long firstTime = -1;
            long lastTime = -1;
            for (int i = 0; i &lt; size; i++) {
                long time = datas.get(i).getTime();
                if (Math.abs(time - firstTime) &gt; 30 * 60 * 1000 &amp;&amp; Math.abs(time - lastTime) &gt; 5 * 60 * 1000) {
                    intArray.add(i);
                    firstTime = time;
                }
                lastTime = time;
            }
            dateArraryPosition = intArray.toArray(new int[intArray.size()]);
        }</sourceCode>
    <number>1874931613</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>225 lines of duplicate code.</message>
    <priority>HIGH</priority>
    <key>86686</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>93</start>
        <end>317</end>
      </range>
    </lineRanges>
    <primaryLineNumber>93</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/view/HorizontalLayout.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.view</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>398258610</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/view</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>225 lines of duplicate code.</message>
        <priority>HIGH</priority>
        <key>86687</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>98</start>
            <end>322</end>
          </range>
        </lineRanges>
        <primaryLineNumber>98</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/view/VerticalLayout.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.view</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>803062988</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/view</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>params.height = getMeasuredHeight();
        view.setLayoutParams(params);
        layout.addView(view);
    }

    public void removeAllChildViews(){
        mViewClickMap.clear();
        layout.removeAllViews();
    }

    @Override
    public void scrollTo(int x, int y) {
        scrollView.getRefreshableView().scrollTo(x, y);
    }

    @Override
    public void scrollBy(int x, int y) {
        mScroller.startScroll(scrollView.getRefreshableView().getScrollX(), 0,
                x - scrollView.getRefreshableView().getScrollX(), 0, 400);
        invalidate();
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);

        if (mScroller.computeScrollOffset()) {
            int curX = mScroller.getCurrX();
            scrollView.getRefreshableView().scrollTo(curX, 0);
            invalidate();
        }
    }

    private OnClickListener mOnItemClickListener = new OnClickListener() {
        @Override
        public void onClick(View v) {
            Rect rect = new Rect();
            v.getGlobalVisibleRect(rect);
            int width = rect.width();
            if (width &lt; v.getMeasuredWidth()) {
                int scrollLength = 2 * v.getMeasuredWidth() - width;
                if (rect.right == getRight()) {
                    scrollBy(scrollView.getRefreshableView().getScrollX() + scrollLength, 0);
                } else {
                    scrollBy(scrollView.getRefreshableView().getScrollX()
                            - scrollLength - v.getMeasuredWidth(), 0);
                }
            } else if (rect.right == getRight()) {
                scrollBy(scrollView.getRefreshableView().getScrollX() + v.getMeasuredWidth(), 0);

            } else if (rect.left == getLeft()) {
                scrollBy(scrollView.getRefreshableView().getScrollX()
                        - v.getMeasuredWidth() - v.getMeasuredWidth(), 0);

            } else if (getRight() - rect.right &lt; v.getMeasuredWidth()) {
                scrollBy(scrollView.getRefreshableView().getScrollX() + v.getMeasuredWidth() - (getRight() - rect.right), 0);

            } else if (rect.left - getLeft() &lt; v.getMeasuredWidth()) {
                scrollBy(scrollView.getRefreshableView().getScrollX()
                        - (v.getMeasuredWidth() - (rect.left - getLeft())) - v.getMeasuredWidth(), 0);
            } else if (rect.left - getLeft() &lt; v.getMeasuredWidth() * 2) {
                scrollBy(scrollView.getRefreshableView().getScrollX()
                        - (v.getMeasuredWidth() * 2 - (rect.left - getLeft())), 0);
            }

            if(mViewClickMap.get(v) != null){
                mViewClickMap.get(v).onClick(v);
            }
        }
    };

    public OnClickListener getOnItemClickListener(){
        return mOnItemClickListener;
    }

    public void clickItem(View v) {
        if(mViewClickMap.get(v) != null){
            mViewClickMap.get(v).onClick(v);
        }
    }

    public void setCount(float count) {
        this.count = count;
    }

    public void showViewForTranslateAnimation(float right, int index, int displayWidth) {

        Rect rect = new Rect();
        layout.getChildAt(index).getGlobalVisibleRect(rect);
        float selectedRight = rect.right;
//        System.out.println(&quot;left:&quot;+layout.getChildAt(index).getLeft());

        float lastRightDis = selectedRight;
        int startPosition = 0;
        for (int i = index; i &gt;= 0; i--) {
            lastRightDis -= layout.getChildAt(i).getLayoutParams().width;
            if (lastRightDis &gt; 0) {

                continue;

            } else {
                startPosition = i;
                break;
            }
        }

        float nextLeftDis = selectedRight - layout.getChildAt(index).getLayoutParams().width;
        int endPosition = index;
        for (int i = index; i &lt; layout.getChildCount(); i++) {
            nextLeftDis += layout.getChildAt(i).getLayoutParams().width;

            if (nextLeftDis &lt; displayWidth) {

                continue;

            } else {
                endPosition = i;
                break;
            }
        }

//System.out.println(&quot;right:&quot;+right+&quot;,startPosition:&quot;+startPosition+&quot;,endPosition:&quot;+endPosition+&quot;,index:&quot;+index);
        float fromXDelta = right - layout.getChildAt(index).getLayoutParams().width - lastRightDis;
        for (int i = startPosition; i &lt;= endPosition; i++) {


            TranslateAnimation translateAnimation = new TranslateAnimation(fromXDelta, 0f, 0f, 0f);
            translateAnimation.setInterpolator(new DecelerateInterpolator());
            translateAnimation.setDuration(350l);

            AlphaAnimation alphaAnimation = new AlphaAnimation(0f, 1f);
            alphaAnimation.setInterpolator(new DecelerateInterpolator());
            alphaAnimation.setDuration(350l);

            AnimationSet animationSet = new AnimationSet(true);
            animationSet.addAnimation(translateAnimation);

            View childView = layout.getChildAt(i);
            childView.startAnimation(animationSet);
            fromXDelta -= childView.getLayoutParams().width;

        }
    }

    public void hideViewForTranslateAnimation(float x) {
        int left = scrollView.getRefreshableView().getScrollX();
        int right = left + getWidth();

        for (int i = 0; i &lt; layout.getChildCount(); i++) {
            if (i == 0) {
                x -= layout.getChildAt(0).getLayoutParams().width;
            }

            View childView = layout.getChildAt(i);
            if (childView.getRight() &gt; left &amp;&amp; childView.getLeft() &lt; right) {
                float toXDelta = x - (childView.getLeft() - left);

                TranslateAnimation translateAnimation = new TranslateAnimation(0f, toXDelta, 0f, 0f);
                translateAnimation.setInterpolator(new DecelerateInterpolator());
                translateAnimation.setAnimationListener(new Animation.AnimationListener() {
                    @Override
                    public void onAnimationStart(Animation animation) {

                    }

                    @Override
                    public void onAnimationEnd(Animation animation) {
                        mHandler.sendEmptyMessage(SET_VIEW_INVISIBLE);
                    }

                    @Override
                    public void onAnimationRepeat(Animation animation) {

                    }
                });
                translateAnimation.setDuration(350l);

                AlphaAnimation alphaAnimation = new AlphaAnimation(1f, 0f);
                alphaAnimation.setInterpolator(new DecelerateInterpolator());
                alphaAnimation.setDuration(350l);

                AnimationSet animationSet = new AnimationSet(true);
                animationSet.addAnimation(translateAnimation);
                animationSet.addAnimation(alphaAnimation);

                childView.startAnimation(animationSet);

            }
        }
    }

    public void hideViewForAlphaAnimation() {

        AlphaAnimation alphaAnimation = new AlphaAnimation(1f, 0f);
        alphaAnimation.setDuration(350l);
        alphaAnimation.setInterpolator(new DecelerateInterpolator());
        alphaAnimation.setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {

            }

            @Override
            public void onAnimationEnd(Animation animation) {

                mHandler.sendEmptyMessage(SET_VIEW_GONE);
            }

            @Override
            public void onAnimationRepeat(Animation animation) {

            }
        });
        this.startAnimation(alphaAnimation);
    }

    public void showViewForAlphaAnimation() {
//        AlphaAnimation alphaAnimation = new AlphaAnimation(0f, 1f);
//        alphaAnimation.setDuration(200l);
//        this.startAnimation(alphaAnimation);
    }

    public void revertLayout() {
        scrollView.scrollTo(0, 0);
        layout.removeAllViews();</sourceCode>
        <number>1874931571</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>params.height = getMeasuredHeight();
        view.setLayoutParams(params);
        layout.addView(view);
    }

    public void removeAllChildViews(){
        mViewClickMap.clear();
        layout.removeAllViews();
    }

    @Override
    public void scrollTo(int x, int y) {
        scrollView.getRefreshableView().scrollTo(x, y);
    }

    @Override
    public void scrollBy(int x, int y) {
        mScroller.startScroll(scrollView.getRefreshableView().getScrollX(), 0,
                x - scrollView.getRefreshableView().getScrollX(), 0, 400);
        invalidate();
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);

        if (mScroller.computeScrollOffset()) {
            int curX = mScroller.getCurrX();
            scrollView.getRefreshableView().scrollTo(curX, 0);
            invalidate();
        }
    }

    private OnClickListener mOnItemClickListener = new OnClickListener() {
        @Override
        public void onClick(View v) {
            Rect rect = new Rect();
            v.getGlobalVisibleRect(rect);
            int width = rect.width();
            if (width &lt; v.getMeasuredWidth()) {
                int scrollLength = 2 * v.getMeasuredWidth() - width;
                if (rect.right == getRight()) {
                    scrollBy(scrollView.getRefreshableView().getScrollX() + scrollLength, 0);
                } else {
                    scrollBy(scrollView.getRefreshableView().getScrollX()
                            - scrollLength - v.getMeasuredWidth(), 0);
                }
            } else if (rect.right == getRight()) {
                scrollBy(scrollView.getRefreshableView().getScrollX() + v.getMeasuredWidth(), 0);

            } else if (rect.left == getLeft()) {
                scrollBy(scrollView.getRefreshableView().getScrollX()
                        - v.getMeasuredWidth() - v.getMeasuredWidth(), 0);

            } else if (getRight() - rect.right &lt; v.getMeasuredWidth()) {
                scrollBy(scrollView.getRefreshableView().getScrollX() + v.getMeasuredWidth() - (getRight() - rect.right), 0);

            } else if (rect.left - getLeft() &lt; v.getMeasuredWidth()) {
                scrollBy(scrollView.getRefreshableView().getScrollX()
                        - (v.getMeasuredWidth() - (rect.left - getLeft())) - v.getMeasuredWidth(), 0);
            } else if (rect.left - getLeft() &lt; v.getMeasuredWidth() * 2) {
                scrollBy(scrollView.getRefreshableView().getScrollX()
                        - (v.getMeasuredWidth() * 2 - (rect.left - getLeft())), 0);
            }

            if(mViewClickMap.get(v) != null){
                mViewClickMap.get(v).onClick(v);
            }
        }
    };

    public OnClickListener getOnItemClickListener(){
        return mOnItemClickListener;
    }

    public void clickItem(View v) {
        if(mViewClickMap.get(v) != null){
            mViewClickMap.get(v).onClick(v);
        }
    }

    public void setCount(float count) {
        this.count = count;
    }

    public void showViewForTranslateAnimation(float right, int index, int displayWidth) {

        Rect rect = new Rect();
        layout.getChildAt(index).getGlobalVisibleRect(rect);
        float selectedRight = rect.right;
//        System.out.println(&quot;left:&quot;+layout.getChildAt(index).getLeft());

        float lastRightDis = selectedRight;
        int startPosition = 0;
        for (int i = index; i &gt;= 0; i--) {
            lastRightDis -= layout.getChildAt(i).getLayoutParams().width;
            if (lastRightDis &gt; 0) {

                continue;

            } else {
                startPosition = i;
                break;
            }
        }

        float nextLeftDis = selectedRight - layout.getChildAt(index).getLayoutParams().width;
        int endPosition = index;
        for (int i = index; i &lt; layout.getChildCount(); i++) {
            nextLeftDis += layout.getChildAt(i).getLayoutParams().width;

            if (nextLeftDis &lt; displayWidth) {

                continue;

            } else {
                endPosition = i;
                break;
            }
        }

//System.out.println(&quot;right:&quot;+right+&quot;,startPosition:&quot;+startPosition+&quot;,endPosition:&quot;+endPosition+&quot;,index:&quot;+index);
        float fromXDelta = right - layout.getChildAt(index).getLayoutParams().width - lastRightDis;
        for (int i = startPosition; i &lt;= endPosition; i++) {


            TranslateAnimation translateAnimation = new TranslateAnimation(fromXDelta, 0f, 0f, 0f);
            translateAnimation.setInterpolator(new DecelerateInterpolator());
            translateAnimation.setDuration(350l);

            AlphaAnimation alphaAnimation = new AlphaAnimation(0f, 1f);
            alphaAnimation.setInterpolator(new DecelerateInterpolator());
            alphaAnimation.setDuration(350l);

            AnimationSet animationSet = new AnimationSet(true);
            animationSet.addAnimation(translateAnimation);

            View childView = layout.getChildAt(i);
            childView.startAnimation(animationSet);
            fromXDelta -= childView.getLayoutParams().width;

        }
    }

    public void hideViewForTranslateAnimation(float x) {
        int left = scrollView.getRefreshableView().getScrollX();
        int right = left + getWidth();

        for (int i = 0; i &lt; layout.getChildCount(); i++) {
            if (i == 0) {
                x -= layout.getChildAt(0).getLayoutParams().width;
            }

            View childView = layout.getChildAt(i);
            if (childView.getRight() &gt; left &amp;&amp; childView.getLeft() &lt; right) {
                float toXDelta = x - (childView.getLeft() - left);

                TranslateAnimation translateAnimation = new TranslateAnimation(0f, toXDelta, 0f, 0f);
                translateAnimation.setInterpolator(new DecelerateInterpolator());
                translateAnimation.setAnimationListener(new Animation.AnimationListener() {
                    @Override
                    public void onAnimationStart(Animation animation) {

                    }

                    @Override
                    public void onAnimationEnd(Animation animation) {
                        mHandler.sendEmptyMessage(SET_VIEW_INVISIBLE);
                    }

                    @Override
                    public void onAnimationRepeat(Animation animation) {

                    }
                });
                translateAnimation.setDuration(350l);

                AlphaAnimation alphaAnimation = new AlphaAnimation(1f, 0f);
                alphaAnimation.setInterpolator(new DecelerateInterpolator());
                alphaAnimation.setDuration(350l);

                AnimationSet animationSet = new AnimationSet(true);
                animationSet.addAnimation(translateAnimation);
                animationSet.addAnimation(alphaAnimation);

                childView.startAnimation(animationSet);

            }
        }
    }

    public void hideViewForAlphaAnimation() {

        AlphaAnimation alphaAnimation = new AlphaAnimation(1f, 0f);
        alphaAnimation.setDuration(350l);
        alphaAnimation.setInterpolator(new DecelerateInterpolator());
        alphaAnimation.setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {

            }

            @Override
            public void onAnimationEnd(Animation animation) {

                mHandler.sendEmptyMessage(SET_VIEW_GONE);
            }

            @Override
            public void onAnimationRepeat(Animation animation) {

            }
        });
        this.startAnimation(alphaAnimation);
    }

    public void showViewForAlphaAnimation() {
//        AlphaAnimation alphaAnimation = new AlphaAnimation(0f, 1f);
//        alphaAnimation.setDuration(200l);
//        this.startAnimation(alphaAnimation);
    }

    public void revertLayout() {
        scrollView.scrollTo(0, 0);
        layout.removeAllViews();</sourceCode>
    <number>1874931571</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>19 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86824</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>39</start>
        <end>57</end>
      </range>
    </lineRanges>
    <primaryLineNumber>39</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/api/HttpRequest.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.mix.api</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>2013915198</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/mix/api</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>19 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86825</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>39</start>
            <end>57</end>
          </range>
        </lineRanges>
        <primaryLineNumber>39</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/api/UploadRequest.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.mix.api</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-2034808923</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/mix/api</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>Log.i(TAG, &quot;Get server response for url:&quot; + url);
                Log.i(TAG, &quot;Get server response data:&quot; + s);
                try {
                    JSONObject json = new JSONObject(s);
                    int status = json.getInt(&quot;status&quot;);
                    String message = &quot;&quot;;
                    if (json.has(&quot;message&quot;)) {
                        message = json.getString(&quot;message&quot;);
                    }

                    if (200 != status) {
                        if (null != callback) {
                            Log.i(TAG, &quot;Get server response error:&quot; + message);
                            callback.onError(message);
                        }
                        return;
                    }

                    if (json.has(&quot;serverTime&quot;)) {</sourceCode>
        <number>1874931637</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>Log.i(TAG, &quot;Get server response for url:&quot; + url);
                Log.i(TAG, &quot;Get server response data:&quot; + s);
                try {
                    JSONObject json = new JSONObject(s);
                    int status = json.getInt(&quot;status&quot;);
                    String message = &quot;&quot;;
                    if (json.has(&quot;message&quot;)) {
                        message = json.getString(&quot;message&quot;);
                    }

                    if (200 != status) {
                        if (null != callback) {
                            Log.i(TAG, &quot;Get server response error:&quot; + message);
                            callback.onError(message);
                        }
                        return;
                    }

                    if (json.has(&quot;serverTime&quot;)) {</sourceCode>
    <number>1874931637</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>16 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86815</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>39</start>
        <end>54</end>
      </range>
    </lineRanges>
    <primaryLineNumber>39</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/login/user/ApiEmailLogin.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.login.user</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>683925613</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/login/user</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>16 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86814</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>46</start>
            <end>61</end>
          </range>
        </lineRanges>
        <primaryLineNumber>46</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/login/user/ApiEmailBind.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.login.user</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>939443127</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/login/user</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>execute(new HttpStringRequest(Request.Method.POST, url) {
            @Override
            protected Map&lt;String, String&gt; getParams() throws AuthFailureError {
                Map&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();
                LoginConfig.prepareCommonParams(mContext, params);

                //邮箱跟密码参数
                params.put(&quot;email&quot;, mEmail);
                params.put(&quot;password&quot;, md5_password);

                //获取签名
                String sig = com.pinguo.Camera360Lib.utils.NetworkUtils.getSigByParamMap(params);
                params.put(&quot;sig&quot;, sig);

                try {
                    Log.i(&quot;test&quot;, &quot;&quot; + HttpUtils.getUrl(url, params));</sourceCode>
        <number>1874931632</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>execute(new HttpStringRequest(Request.Method.POST, url) {
            @Override
            protected Map&lt;String, String&gt; getParams() throws AuthFailureError {
                Map&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();
                LoginConfig.prepareCommonParams(mContext, params);

                //邮箱跟密码参数
                params.put(&quot;email&quot;, mEmail);
                params.put(&quot;password&quot;, md5_password);

                //获取签名
                String sig = com.pinguo.Camera360Lib.utils.NetworkUtils.getSigByParamMap(params);
                params.put(&quot;sig&quot;, sig);

                try {
                    Log.i(&quot;test&quot;, &quot;&quot; + HttpUtils.getUrl(url, params));</sourceCode>
    <number>1874931632</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>19 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86743</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>402</start>
        <end>420</end>
      </range>
    </lineRanges>
    <primaryLineNumber>402</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/option/feedback/Camera360FeedbackActivity.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.option.feedback</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>1005146589</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/option/feedback</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>19 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86742</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>353</start>
            <end>371</end>
          </range>
        </lineRanges>
        <primaryLineNumber>353</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/option/feedback/Camera360FeedbackActivity.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.option.feedback</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1359270331</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/option/feedback</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>if (array != null) {
                int size = array.length();
                if (size &gt; 0) {
                    for (int i = 0; i &lt; size; i++) {
                        JSONObject object = array.getJSONObject(i);
                        @SuppressWarnings(&quot;unchecked&quot;)
                        Iterator&lt;String&gt; keys = object.keys();
                        Camera360FeedbackData itemData = new Camera360FeedbackData();
                        while (keys.hasNext()) {
                            String key = keys.next();
                            if (key.equals(&quot;msg&quot;)) {
                                String message = object.getString(key);
                                itemData.setMessage(message);
                            } else if (key.equals(&quot;name&quot;)) {
                                itemData.setName(object.getString(key));
                            } else if (key.equals(&quot;time&quot;)) {
                                itemData.setTime(object.getLong(key));
                            }
                        }</sourceCode>
        <number>1874931598</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>if (array != null) {
                int size = array.length();
                if (size &gt; 0) {
                    for (int i = 0; i &lt; size; i++) {
                        JSONObject object = array.getJSONObject(i);
                        @SuppressWarnings(&quot;unchecked&quot;)
                        Iterator&lt;String&gt; keys = object.keys();
                        Camera360FeedbackData itemData = new Camera360FeedbackData();
                        while (keys.hasNext()) {
                            String key = keys.next();
                            if (key.equals(&quot;msg&quot;)) {
                                String message = object.getString(key);
                                itemData.setMessage(message);
                            } else if (key.equals(&quot;name&quot;)) {
                                itemData.setName(object.getString(key));
                            } else if (key.equals(&quot;time&quot;)) {
                                itemData.setTime(object.getLong(key));
                            }
                        }</sourceCode>
    <number>1874931598</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>41 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86716</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>48</start>
        <end>88</end>
      </range>
    </lineRanges>
    <primaryLineNumber>48</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/login/user/ApiPhoneSendVerifyCode.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.login.user</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>451795536</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/login/user</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>41 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86715</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>52</start>
            <end>92</end>
          </range>
        </lineRanges>
        <primaryLineNumber>52</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/login/user/ApiPhoneRegister.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.login.user</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>1145402176</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/login/user</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>params.put(&quot;password&quot;, md5_password);
                //获取签名
                String sig = com.pinguo.Camera360Lib.utils.NetworkUtils.getSigByParamMap(params);
                params.put(&quot;sig&quot;, sig);
                return params;

            }

            @Override
            protected void onResponse(String s) {
                try {
                    JSONObject responseObj = new JSONObject(s);
                    Iterator&lt;String&gt; keys = responseObj.keys();
                    Response response = new Response();
                    while (keys.hasNext()) {
                        String key = keys.next();
                        if (key.equals(&quot;status&quot;)) {
                            response.status = responseObj.getInt(key);
                        } else if (key.equals(&quot;data&quot;)) {
                            try {
                                response.data = responseObj.getBoolean(key);
                            } catch (Exception e) {

                            }
                        } else if (key.equals(&quot;message&quot;)) {
                            response.message = responseObj.getString(key);
                        }
                    }
                    postResponse(result, response);
                } catch (JSONException e) {
                    onErrorResponse(e);
                }
            }

            @Override
            protected void onErrorResponse(Exception e) {
                postError(result, e);
            }
        });
    }
}</sourceCode>
        <number>1874931585</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>params.put(&quot;password&quot;, md5_password);
                //获取签名
                String sig = com.pinguo.Camera360Lib.utils.NetworkUtils.getSigByParamMap(params);
                params.put(&quot;sig&quot;, sig);
                return params;

            }

            @Override
            protected void onResponse(String s) {
                try {
                    JSONObject responseObj = new JSONObject(s);
                    Iterator&lt;String&gt; keys = responseObj.keys();
                    Response response = new Response();
                    while (keys.hasNext()) {
                        String key = keys.next();
                        if (key.equals(&quot;status&quot;)) {
                            response.status = responseObj.getInt(key);
                        } else if (key.equals(&quot;data&quot;)) {
                            try {
                                response.data = responseObj.getBoolean(key);
                            } catch (Exception e) {

                            }
                        } else if (key.equals(&quot;message&quot;)) {
                            response.message = responseObj.getString(key);
                        }
                    }
                    postResponse(result, response);
                } catch (JSONException e) {
                    onErrorResponse(e);
                }
            }

            @Override
            protected void onErrorResponse(Exception e) {
                postError(result, e);
            }
        });
    }
}</sourceCode>
    <number>1874931585</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>23 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86749</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>872</start>
        <end>894</end>
      </range>
    </lineRanges>
    <primaryLineNumber>872</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/sdk/BeautyController.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.sdk</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>744972619</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/sdk</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>23 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86750</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>916</start>
            <end>938</end>
          </range>
        </lineRanges>
        <primaryLineNumber>916</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/sdk/BeautyController.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.sdk</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1201809833</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/sdk</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>private void editCurrentFilter() {

        GetGLSurfaceViewBitmapRendererMethod getRendererMethod = new GetGLSurfaceViewBitmapRendererMethod();
        getRendererMethod.setWidthHeight(mShowWidth, mShowHeight);
        getRendererMethod.setRendererMethodActionListener(new EffectGroupRendererMethod.RendererMethodActionListener() {
            @Override
            public void success(Bitmap bitmap) {
                final String effectPhotoPath = ToolUtils.getCompositeDiskCachePath(mContext, &quot;tmp_adv_eft&quot;);
                File parentFile = new File(effectPhotoPath).getParentFile();
                if (!parentFile.exists()) {
                    parentFile.mkdirs();
                }

                boolean result = false;
                try {
                    result = bitmap.compress(Bitmap.CompressFormat.JPEG, ConstantUtil.PHOTO_QUALITY, new FileOutputStream(effectPhotoPath));
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                if (result) {
                    mActivity.runOnUiThread(new Runnable() {
                        @Override
                        public void run() {</sourceCode>
        <number>1874931601</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>private void editCurrentFilter() {

        GetGLSurfaceViewBitmapRendererMethod getRendererMethod = new GetGLSurfaceViewBitmapRendererMethod();
        getRendererMethod.setWidthHeight(mShowWidth, mShowHeight);
        getRendererMethod.setRendererMethodActionListener(new EffectGroupRendererMethod.RendererMethodActionListener() {
            @Override
            public void success(Bitmap bitmap) {
                final String effectPhotoPath = ToolUtils.getCompositeDiskCachePath(mContext, &quot;tmp_adv_eft&quot;);
                File parentFile = new File(effectPhotoPath).getParentFile();
                if (!parentFile.exists()) {
                    parentFile.mkdirs();
                }

                boolean result = false;
                try {
                    result = bitmap.compress(Bitmap.CompressFormat.JPEG, ConstantUtil.PHOTO_QUALITY, new FileOutputStream(effectPhotoPath));
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                if (result) {
                    mActivity.runOnUiThread(new Runnable() {
                        @Override
                        public void run() {</sourceCode>
    <number>1874931601</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>42 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86712</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>589</start>
        <end>630</end>
      </range>
    </lineRanges>
    <primaryLineNumber>589</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareFilterActivity.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.mix</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-1079350196</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/mix</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>42 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86711</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>554</start>
            <end>595</end>
          </range>
        </lineRanges>
        <primaryLineNumber>554</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareActivity.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.mix</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>961270299</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/mix</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>GLogger.i(TAG, &quot;Add process info failed:&quot; + error);
                synchronized (lock) {
                    lock.notify();
                }
            }
        });

        synchronized (lock) {
            try {
                lock.wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        if (result.size() &gt; 0) {
            return result.get(0);
        }

        return null;

    }

    private boolean startUploadPhoto(final List&lt;String&gt; paths) {
        GLogger.i(TAG, &quot;Start upload photo auth!&quot;);
        final CountDownLatch countDownLatch = new CountDownLatch(2);
        final boolean[] isUploadSucceed = new boolean[1];
        isUploadSucceed[0] = true;
        UploadApi.photoUploadAuth(new ApiCallback&lt;String&gt;() {
            @Override
            public void onResponse(String data, Object... params) {

                GLogger.i(TAG, &quot;Get upload photo auth succeed!&quot;);

                Bundle resultBundle = (Bundle) params[0];
                String url = data;
                String token = resultBundle.getString(ApiConstants.PARAM_TOKEN);
                String expires = resultBundle.getString(ApiConstants.PARAM_EXPIRES);

                for (final String path : paths) {
                    GLogger.i(TAG, &quot;Start upload photo:&quot; + path);
                    StatisticManager.onEvent(MixShareActivity.this,</sourceCode>
        <number>1874931583</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>GLogger.i(TAG, &quot;Add process info failed:&quot; + error);
                synchronized (lock) {
                    lock.notify();
                }
            }
        });

        synchronized (lock) {
            try {
                lock.wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        if (result.size() &gt; 0) {
            return result.get(0);
        }

        return null;

    }

    private boolean startUploadPhoto(final List&lt;String&gt; paths) {
        GLogger.i(TAG, &quot;Start upload photo auth!&quot;);
        final CountDownLatch countDownLatch = new CountDownLatch(2);
        final boolean[] isUploadSucceed = new boolean[1];
        isUploadSucceed[0] = true;
        UploadApi.photoUploadAuth(new ApiCallback&lt;String&gt;() {
            @Override
            public void onResponse(String data, Object... params) {

                GLogger.i(TAG, &quot;Get upload photo auth succeed!&quot;);

                Bundle resultBundle = (Bundle) params[0];
                String url = data;
                String token = resultBundle.getString(ApiConstants.PARAM_TOKEN);
                String expires = resultBundle.getString(ApiConstants.PARAM_EXPIRES);

                for (final String path : paths) {
                    GLogger.i(TAG, &quot;Start upload photo:&quot; + path);
                    StatisticManager.onEvent(MixShareActivity.this,</sourceCode>
    <number>1874931583</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[15]/links/dry"/>
  <dry reference="../dry[11]/links/dry/links/dry[2]"/>
  <dry plugin="dry@2.40">
    <message>46 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86720</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>116</start>
        <end>161</end>
      </range>
    </lineRanges>
    <primaryLineNumber>116</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/utils/AESEncrypt.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.utils</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-1911115213</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/utils</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>46 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86721</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>60</start>
            <end>105</end>
          </range>
        </lineRanges>
        <primaryLineNumber>60</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/utils/EncryptUtils.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.utils</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1821054923</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/utils</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;);
            cipher.init(Cipher.ENCRYPT_MODE, skeySpec, ivParameterSpec);

            return cipher.doFinal(clearText);

        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (BadPaddingException e) {
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
        } catch (IllegalBlockSizeException e) {
            e.printStackTrace();
        } catch (InvalidAlgorithmParameterException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * Decodes a String using AES-256 and Base64
     *
     * @param encrypedPwdBytes
     * @param password
     * @return desoded String
     */
    public static String decrypt(byte[] encrypedPwdBytes, String password) throws NullPointerException {

        if (password.length() == 0 || password == null) {
            throw new NullPointerException(&quot;Please give Password&quot;);
        }

        try {
            SecretKey key = getKey(password);

            // IMPORTANT TO GET SAME RESULTS ON iOS and ANDROID
            final byte[] iv = new byte[16];
            Arrays.fill(iv, (byte) 0x00);
            IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);

            // cipher is not thread safe
            Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;);</sourceCode>
        <number>1874931587</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;);
            cipher.init(Cipher.ENCRYPT_MODE, skeySpec, ivParameterSpec);

            return cipher.doFinal(clearText);

        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (BadPaddingException e) {
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
        } catch (IllegalBlockSizeException e) {
            e.printStackTrace();
        } catch (InvalidAlgorithmParameterException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * Decodes a String using AES-256 and Base64
     *
     * @param encrypedPwdBytes
     * @param password
     * @return desoded String
     */
    public static String decrypt(byte[] encrypedPwdBytes, String password) throws NullPointerException {

        if (password.length() == 0 || password == null) {
            throw new NullPointerException(&quot;Please give Password&quot;);
        }

        try {
            SecretKey key = getKey(password);

            // IMPORTANT TO GET SAME RESULTS ON iOS and ANDROID
            final byte[] iv = new byte[16];
            Arrays.fill(iv, (byte) 0x00);
            IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);

            // cipher is not thread safe
            Cipher cipher = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;);</sourceCode>
    <number>1874931587</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[22]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>15 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86801</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>46</start>
        <end>60</end>
      </range>
    </lineRanges>
    <primaryLineNumber>46</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/gallery/ui/layout/ListSlotLayout.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.gallery.ui.layout</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-165980352</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/gallery/ui/layout</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>15 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86800</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>45</start>
            <end>59</end>
          </range>
        </lineRanges>
        <primaryLineNumber>45</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/gallery/ui/layout/ContractSlotLayout.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.gallery.ui.layout</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>755491112</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/gallery/ui/layout</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>int end = Math.min(mSlotCount, mCloumCount * endRow);
            setVisibleRange(start, end);
        }
    }

    @Override
    public int getSlotIndexByPosition(float x, float y) {
        int absoluteX = Math.round(x) + (SlotView.WIDE_SCROLLING ? mScrollPosition : 0);
        int absoluteY = Math.round(y) + (SlotView.WIDE_SCROLLING ? 0 : mScrollPosition);
        if (absoluteX &lt; 0 || absoluteY &lt; 0) {
            return SlotView.INDEX_NONE;
        }
        int columnIdx = absoluteX / (mSlotWidth + mSlotGap);
        int rowIdx = absoluteY / (mSlotHeight + mSlotGap);
        if (!SlotView.WIDE_SCROLLING &amp;&amp; columnIdx &gt;= mCloumCount) {</sourceCode>
        <number>1874931625</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>int end = Math.min(mSlotCount, mCloumCount * endRow);
            setVisibleRange(start, end);
        }
    }

    @Override
    public int getSlotIndexByPosition(float x, float y) {
        int absoluteX = Math.round(x) + (SlotView.WIDE_SCROLLING ? mScrollPosition : 0);
        int absoluteY = Math.round(y) + (SlotView.WIDE_SCROLLING ? 0 : mScrollPosition);
        if (absoluteX &lt; 0 || absoluteY &lt; 0) {
            return SlotView.INDEX_NONE;
        }
        int columnIdx = absoluteX / (mSlotWidth + mSlotGap);
        int rowIdx = absoluteY / (mSlotHeight + mSlotGap);
        if (!SlotView.WIDE_SCROLLING &amp;&amp; columnIdx &gt;= mCloumCount) {</sourceCode>
    <number>1874931625</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>21 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86762</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>70</start>
        <end>90</end>
      </range>
    </lineRanges>
    <primaryLineNumber>70</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/effect/model/entity/type/EnhanceSkin.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.effect.model.entity.type</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-18295452</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/effect/model/entity/type</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>21 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86763</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>60</start>
            <end>80</end>
          </range>
        </lineRanges>
        <primaryLineNumber>60</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/effect/model/entity/type/RotateStraighten.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.effect.model.entity.type</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-18295452</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/effect/model/entity/type</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
          <dry>
            <message>21 lines of duplicate code.</message>
            <priority>LOW</priority>
            <key>86764</key>
            <lineRanges>
              <range plugin="analysis-core@1.65">
                <start>74</start>
                <end>94</end>
              </range>
            </lineRanges>
            <primaryLineNumber>74</primaryLineNumber>
            <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/effect/model/entity/type/Sharpen.java</fileName>
            <moduleName></moduleName>
            <packageName>us.pinguo.android.effect.group.sdk.effect.model.entity.type</packageName>
            <category></category>
            <type>Duplicate Code</type>
            <contextHashCode>-2005748422</contextHashCode>
            <origin>dry</origin>
            <pathName>src/us/pinguo/android/effect/group/sdk/effect/model/entity/type</pathName>
            <primaryColumnStart>0</primaryColumnStart>
            <primaryColumnEnd>0</primaryColumnEnd>
            <links>
              <dry reference="../../../.."/>
              <dry reference="../../../../../.."/>
              <dry>
                <message>21 lines of duplicate code.</message>
                <priority>LOW</priority>
                <key>86761</key>
                <lineRanges>
                  <range plugin="analysis-core@1.65">
                    <start>77</start>
                    <end>97</end>
                  </range>
                </lineRanges>
                <primaryLineNumber>77</primaryLineNumber>
                <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/effect/model/entity/type/EnhanceHdr.java</fileName>
                <moduleName></moduleName>
                <packageName>us.pinguo.android.effect.group.sdk.effect.model.entity.type</packageName>
                <category></category>
                <type>Duplicate Code</type>
                <contextHashCode>-18295452</contextHashCode>
                <origin>dry</origin>
                <pathName>src/us/pinguo/android/effect/group/sdk/effect/model/entity/type</pathName>
                <primaryColumnStart>0</primaryColumnStart>
                <primaryColumnEnd>0</primaryColumnEnd>
                <links>
                  <dry reference="../../../../../.."/>
                  <dry reference="../../../.."/>
                  <dry reference="../../../../../../../.."/>
                </links>
                <sourceCode>jsonObject.put(&quot;key&quot;, type);
            jsonObject.put(&quot;packName&quot;, &quot;&quot;);
            jsonObject.put(&quot;name&quot;, &quot;&quot;);
            if (null != param) {
                ParamFloatItem item = (ParamFloatItem) param.getParamItemList().get(0);
                if (item.value == item.defaultValue) {
                    return null;
                }
                jsonObject.put(&quot;value&quot;, Math.round(item.value / item.step));
                jsonObject.put(&quot;minValue&quot;, Math.round(item.min));
                jsonObject.put(&quot;type&quot;, 1);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        List&lt;JSONObject&gt; list = new ArrayList&lt;JSONObject&gt;();
        list.add(jsonObject);
        return list;
    }
}</sourceCode>
                <number>1874931607</number>
                <isDerived>false</isDerived>
              </dry>
            </links>
            <sourceCode>jsonObject.put(&quot;key&quot;, type);
            jsonObject.put(&quot;packName&quot;, &quot;&quot;);
            jsonObject.put(&quot;name&quot;, &quot;&quot;);
            if (null != param) {
                ParamFloatItem item = (ParamFloatItem) param.getParamItemList().get(0);
                if (item.value == item.defaultValue) {
                    return null;
                }
                jsonObject.put(&quot;value&quot;, Math.round(item.value / item.step));
                jsonObject.put(&quot;minValue&quot;, Math.round(item.min));
                jsonObject.put(&quot;type&quot;, 1);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        List&lt;JSONObject&gt; list = new ArrayList&lt;JSONObject&gt;();
        list.add(jsonObject);
        return list;
    }
}</sourceCode>
            <number>1874931607</number>
            <isDerived>false</isDerived>
          </dry>
          <dry reference="../dry[2]/links/dry[3]"/>
        </links>
        <sourceCode>jsonObject.put(&quot;key&quot;, type);
            jsonObject.put(&quot;packName&quot;, &quot;&quot;);
            jsonObject.put(&quot;name&quot;, &quot;&quot;);
            if (null != param) {
                ParamFloatItem item = (ParamFloatItem) param.getParamItemList().get(0);
                if (item.value == item.defaultValue) {
                    return null;
                }
                jsonObject.put(&quot;value&quot;, Math.round(item.value / item.step));
                jsonObject.put(&quot;minValue&quot;, Math.round(item.min));
                jsonObject.put(&quot;type&quot;, 1);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        List&lt;JSONObject&gt; list = new ArrayList&lt;JSONObject&gt;();
        list.add(jsonObject);
        return list;
    }
}</sourceCode>
        <number>1874931607</number>
        <isDerived>false</isDerived>
      </dry>
      <dry reference="../dry/links/dry[2]"/>
      <dry reference="../dry/links/dry[2]/links/dry[3]"/>
    </links>
    <sourceCode>jsonObject.put(&quot;key&quot;, type);
            jsonObject.put(&quot;packName&quot;, &quot;&quot;);
            jsonObject.put(&quot;name&quot;, &quot;&quot;);
            if (null != param) {
                ParamFloatItem item = (ParamFloatItem) param.getParamItemList().get(0);
                if (item.value == item.defaultValue) {
                    return null;
                }
                jsonObject.put(&quot;value&quot;, Math.round(item.value / item.step));
                jsonObject.put(&quot;minValue&quot;, Math.round(item.min));
                jsonObject.put(&quot;type&quot;, 1);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        List&lt;JSONObject&gt; list = new ArrayList&lt;JSONObject&gt;();
        list.add(jsonObject);
        return list;
    }
}</sourceCode>
    <number>1874931607</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>20 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86779</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>799</start>
        <end>818</end>
      </range>
    </lineRanges>
    <primaryLineNumber>799</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareActivity.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.mix</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-1232623919</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/mix</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>20 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86780</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>794</start>
            <end>813</end>
          </range>
        </lineRanges>
        <primaryLineNumber>794</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareFilterActivity.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.mix</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>908456544</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/mix</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>.setDescription(getResources().getString(R.string.composite_sdk_share_process_content))
                    .setLink(url).setPicture(&quot;https://dn-c360.qbox.me/355ea86d36eb149b0327a14db0b95fcb?imageView/1/w/132&quot;).build();
            shareDialog.present();
        } else {
            String packageGooglePlay = &quot;com.android.vending&quot;;
            boolean installed = SystemUtils.checkApkExist(this, packageGooglePlay);

            if (installed) {
                Intent intent = getPackageManager().getLaunchIntentForPackage(packageGooglePlay);
                intent.setData(Uri.parse(&quot;http://play.google.com/store/apps/details?id=&quot; + &quot;com.facebook.katana&quot;));
                intent.setAction(Intent.ACTION_VIEW);
                startActivity(intent);
            } else {
                String toastContent = getResources().getString(R.string.composite_sdk_install_prefix) + &quot;facebook&quot;;
                ToastUtils.makeText(this, toastContent, Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void shareProcessToWechat(String url, int scene) {</sourceCode>
        <number>1874931615</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>.setDescription(getResources().getString(R.string.composite_sdk_share_process_content))
                    .setLink(url).setPicture(&quot;https://dn-c360.qbox.me/355ea86d36eb149b0327a14db0b95fcb?imageView/1/w/132&quot;).build();
            shareDialog.present();
        } else {
            String packageGooglePlay = &quot;com.android.vending&quot;;
            boolean installed = SystemUtils.checkApkExist(this, packageGooglePlay);

            if (installed) {
                Intent intent = getPackageManager().getLaunchIntentForPackage(packageGooglePlay);
                intent.setData(Uri.parse(&quot;http://play.google.com/store/apps/details?id=&quot; + &quot;com.facebook.katana&quot;));
                intent.setAction(Intent.ACTION_VIEW);
                startActivity(intent);
            } else {
                String toastContent = getResources().getString(R.string.composite_sdk_install_prefix) + &quot;facebook&quot;;
                ToastUtils.makeText(this, toastContent, Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void shareProcessToWechat(String url, int scene) {</sourceCode>
    <number>1874931615</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>40 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86753</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>168</start>
        <end>207</end>
      </range>
    </lineRanges>
    <primaryLineNumber>168</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/utils/AESEncrypt.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.utils</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>1296343778</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/utils</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>40 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86754</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>109</start>
            <end>148</end>
          </range>
        </lineRanges>
        <primaryLineNumber>109</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/utils/EncryptUtils.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.utils</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1605146587</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/utils</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>decrypedValue = new String(Base64.decode(decrypedValue, Base64.NO_WRAP));

            return decrypedValue;

        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (BadPaddingException e) {
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
        } catch (IllegalBlockSizeException e) {
            e.printStackTrace();
        } catch (InvalidAlgorithmParameterException e) {
            e.printStackTrace();
        }
        return &quot;&quot;;
    }

    /**
     * Generates a SecretKeySpec for given password
     *
     * @param password
     * @return SecretKeySpec
     * @throws java.io.UnsupportedEncodingException
     */
    private static SecretKeySpec getKey(String password) throws UnsupportedEncodingException {

        // You can change it to 128 if you wish
        int keyLength = 256;
        byte[] keyBytes = new byte[keyLength / 8];
        // explicitly fill with zeros
        Arrays.fill(keyBytes, (byte) 0x0);

        // if password is shorter then key length, it will be zero-padded
        // to key length
        byte[] passwordBytes = password.getBytes(UTF8);</sourceCode>
        <number>1874931603</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>decrypedValue = new String(Base64.decode(decrypedValue, Base64.NO_WRAP));

            return decrypedValue;

        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (BadPaddingException e) {
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
        } catch (IllegalBlockSizeException e) {
            e.printStackTrace();
        } catch (InvalidAlgorithmParameterException e) {
            e.printStackTrace();
        }
        return &quot;&quot;;
    }

    /**
     * Generates a SecretKeySpec for given password
     *
     * @param password
     * @return SecretKeySpec
     * @throws java.io.UnsupportedEncodingException
     */
    private static SecretKeySpec getKey(String password) throws UnsupportedEncodingException {

        // You can change it to 128 if you wish
        int keyLength = 256;
        byte[] keyBytes = new byte[keyLength / 8];
        // explicitly fill with zeros
        Arrays.fill(keyBytes, (byte) 0x0);

        // if password is shorter then key length, it will be zero-padded
        // to key length
        byte[] passwordBytes = password.getBytes(UTF8);</sourceCode>
    <number>1874931603</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>29 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86777</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>205</start>
        <end>233</end>
      </range>
    </lineRanges>
    <primaryLineNumber>205</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixMainActivity.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.mix</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>1889959154</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/mix</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>29 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86778</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>276</start>
            <end>304</end>
          </range>
        </lineRanges>
        <primaryLineNumber>276</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixMainActivity.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.mix</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>335387855</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/mix</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>PGCompositeSDKApi.startGallery(MixMainActivity.this);
                                }
                            });
                        }
                    });

        } else {
            if (!PGStarInsApi.isInitStar(getApplicationContext())) {
                if (null != mProgressView) {
                    mProgressView.setVisibility(View.VISIBLE);
                }

                PGStarInsApi.initData(getApplicationContext(), new PGCompositeSDKApi.InitDataCallback() {
                    @Override
                    public void onInitStart() {

                    }

                    @Override
                    public void onInitFinish() {
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                EffectModel.getInstance().invalidEffectDict(true);
                                PGStarInsApi.insStar(getApplicationContext());
                                if (null != mProgressView) {
                                    mProgressView.setVisibility(View.GONE);
                                }
                                PGCompositeSDKApi.startGallery(MixMainActivity.this);</sourceCode>
        <number>1874931614</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>PGCompositeSDKApi.startGallery(MixMainActivity.this);
                                }
                            });
                        }
                    });

        } else {
            if (!PGStarInsApi.isInitStar(getApplicationContext())) {
                if (null != mProgressView) {
                    mProgressView.setVisibility(View.VISIBLE);
                }

                PGStarInsApi.initData(getApplicationContext(), new PGCompositeSDKApi.InitDataCallback() {
                    @Override
                    public void onInitStart() {

                    }

                    @Override
                    public void onInitFinish() {
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                EffectModel.getInstance().invalidEffectDict(true);
                                PGStarInsApi.insStar(getApplicationContext());
                                if (null != mProgressView) {
                                    mProgressView.setVisibility(View.GONE);
                                }
                                PGCompositeSDKApi.startGallery(MixMainActivity.this);</sourceCode>
    <number>1874931614</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[5]/links/dry"/>
  <dry reference="../dry[26]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>34 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86718</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>57</start>
        <end>90</end>
      </range>
    </lineRanges>
    <primaryLineNumber>57</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/effect/model/entity/type/EnhanceSkin.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.effect.model.entity.type</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-1003076672</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/effect/model/entity/type</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>34 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86717</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>64</start>
            <end>97</end>
          </range>
        </lineRanges>
        <primaryLineNumber>64</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/effect/model/entity/type/EnhanceHdr.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.effect.model.entity.type</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1644387752</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/effect/model/entity/type</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
          <dry>
            <message>34 lines of duplicate code.</message>
            <priority>NORMAL</priority>
            <key>86719</key>
            <lineRanges>
              <range plugin="analysis-core@1.65">
                <start>47</start>
                <end>80</end>
              </range>
            </lineRanges>
            <primaryLineNumber>47</primaryLineNumber>
            <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/effect/model/entity/type/RotateStraighten.java</fileName>
            <moduleName></moduleName>
            <packageName>us.pinguo.android.effect.group.sdk.effect.model.entity.type</packageName>
            <category></category>
            <type>Duplicate Code</type>
            <contextHashCode>67511586</contextHashCode>
            <origin>dry</origin>
            <pathName>src/us/pinguo/android/effect/group/sdk/effect/model/entity/type</pathName>
            <primaryColumnStart>0</primaryColumnStart>
            <primaryColumnEnd>0</primaryColumnEnd>
            <links>
              <dry reference="../../../../../.."/>
              <dry reference="../../../.."/>
            </links>
            <sourceCode>return new EnhanceHdr();
    }

    @Override
    public String toString() {
        Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
        return gson.toJson(this);
    }

    @Override
    public List&lt;JSONObject&gt; getEffectInfo(Context context) {
        JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put(&quot;key&quot;, type);
            jsonObject.put(&quot;packName&quot;, &quot;&quot;);
            jsonObject.put(&quot;name&quot;, &quot;&quot;);
            if (null != param) {
                ParamFloatItem item = (ParamFloatItem) param.getParamItemList().get(0);
                if (item.value == item.defaultValue) {
                    return null;
                }
                jsonObject.put(&quot;value&quot;, Math.round(item.value / item.step));
                jsonObject.put(&quot;minValue&quot;, Math.round(item.min));
                jsonObject.put(&quot;type&quot;, 1);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        List&lt;JSONObject&gt; list = new ArrayList&lt;JSONObject&gt;();
        list.add(jsonObject);
        return list;
    }
}</sourceCode>
            <number>1874931586</number>
            <isDerived>false</isDerived>
          </dry>
        </links>
        <sourceCode>return new EnhanceHdr();
    }

    @Override
    public String toString() {
        Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
        return gson.toJson(this);
    }

    @Override
    public List&lt;JSONObject&gt; getEffectInfo(Context context) {
        JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put(&quot;key&quot;, type);
            jsonObject.put(&quot;packName&quot;, &quot;&quot;);
            jsonObject.put(&quot;name&quot;, &quot;&quot;);
            if (null != param) {
                ParamFloatItem item = (ParamFloatItem) param.getParamItemList().get(0);
                if (item.value == item.defaultValue) {
                    return null;
                }
                jsonObject.put(&quot;value&quot;, Math.round(item.value / item.step));
                jsonObject.put(&quot;minValue&quot;, Math.round(item.min));
                jsonObject.put(&quot;type&quot;, 1);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        List&lt;JSONObject&gt; list = new ArrayList&lt;JSONObject&gt;();
        list.add(jsonObject);
        return list;
    }
}</sourceCode>
        <number>1874931586</number>
        <isDerived>false</isDerived>
      </dry>
      <dry reference="../dry/links/dry[2]"/>
    </links>
    <sourceCode>return new EnhanceHdr();
    }

    @Override
    public String toString() {
        Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
        return gson.toJson(this);
    }

    @Override
    public List&lt;JSONObject&gt; getEffectInfo(Context context) {
        JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put(&quot;key&quot;, type);
            jsonObject.put(&quot;packName&quot;, &quot;&quot;);
            jsonObject.put(&quot;name&quot;, &quot;&quot;);
            if (null != param) {
                ParamFloatItem item = (ParamFloatItem) param.getParamItemList().get(0);
                if (item.value == item.defaultValue) {
                    return null;
                }
                jsonObject.put(&quot;value&quot;, Math.round(item.value / item.step));
                jsonObject.put(&quot;minValue&quot;, Math.round(item.min));
                jsonObject.put(&quot;type&quot;, 1);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        List&lt;JSONObject&gt; list = new ArrayList&lt;JSONObject&gt;();
        list.add(jsonObject);
        return list;
    }
}</sourceCode>
    <number>1874931586</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>40 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86713</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>344</start>
        <end>383</end>
      </range>
    </lineRanges>
    <primaryLineNumber>344</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/group/menu/AdvanceHSLMenu.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.group.menu</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-238756629</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/group/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>40 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86714</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>345</start>
            <end>384</end>
          </range>
        </lineRanges>
        <primaryLineNumber>345</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/group/menu/DiscolorationMenu.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.group.menu</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1812015748</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/group/menu</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>}

    private void updateColorItem(ParamVecItem item, float value, int index, EffectGroupRendererMethod.RendererMethodActionListener rendererMethodActionListener) {

        float[] values = item.getValues();
        values[index] = value;

        item.value = buildParamString(values);

        setParamsModel(item.effectKey, item.key, item.value);
        makePhoto(rendererMethodActionListener);
    }

    private void updateColorItem(ParamVecItem item, float value, int index) {
        updateColorItem(item, value, index, null);
    }

    private String buildParamString(float[] values) {
        StringBuilder paramBuilder = new StringBuilder();
        for (float value:values) {
            paramBuilder.append(Math.round(value));
            paramBuilder.append(&quot;,&quot;);
        }
        paramBuilder.deleteCharAt(paramBuilder.length() - 1);
        return  paramBuilder.toString();
    }

    protected final static int MAKE_PHOTO_FINISH = 100;

    @Override
    protected void handlerDispatchMessage(Message msg) {
        if (msg.what == MAKE_PHOTO_FINISH) {
            mScreenLayout.setVisibility(View.GONE);
            mProgressBar.setVisibility(View.GONE);

        } else {
            super.handlerDispatchMessage(msg);

        }
    }</sourceCode>
        <number>1874931584</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>}

    private void updateColorItem(ParamVecItem item, float value, int index, EffectGroupRendererMethod.RendererMethodActionListener rendererMethodActionListener) {

        float[] values = item.getValues();
        values[index] = value;

        item.value = buildParamString(values);

        setParamsModel(item.effectKey, item.key, item.value);
        makePhoto(rendererMethodActionListener);
    }

    private void updateColorItem(ParamVecItem item, float value, int index) {
        updateColorItem(item, value, index, null);
    }

    private String buildParamString(float[] values) {
        StringBuilder paramBuilder = new StringBuilder();
        for (float value:values) {
            paramBuilder.append(Math.round(value));
            paramBuilder.append(&quot;,&quot;);
        }
        paramBuilder.deleteCharAt(paramBuilder.length() - 1);
        return  paramBuilder.toString();
    }

    protected final static int MAKE_PHOTO_FINISH = 100;

    @Override
    protected void handlerDispatchMessage(Message msg) {
        if (msg.what == MAKE_PHOTO_FINISH) {
            mScreenLayout.setVisibility(View.GONE);
            mProgressBar.setVisibility(View.GONE);

        } else {
            super.handlerDispatchMessage(msg);

        }
    }</sourceCode>
    <number>1874931584</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>33 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86710</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>493</start>
        <end>525</end>
      </range>
    </lineRanges>
    <primaryLineNumber>493</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/utils/BitmapUtils.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.utils</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>1367969975</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/utils</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>33 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86709</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>459</start>
            <end>491</end>
          </range>
        </lineRanges>
        <primaryLineNumber>459</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/utils/BitmapUtils.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.utils</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>1836195387</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/utils</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>int width = bitmap.getWidth();
        int height = bitmap.getHeight();

        int[] pixels = new int[width * height];
        byte[] rgb888pixels = new byte[width * height * 3];
        int offset = 0;

        bitmap.getPixels(pixels, 0, bitmap.getWidth(), 0, 0, bitmap.getWidth(), bitmap.getHeight());

        int lineNum = 0;
        for (int i = 0; i &lt; height; i++) {
            for (int j = 0; j &lt; width; j++) {
                int clr = pixels[i * width + j];
                int red = (clr &amp; 0x00ff0000) &gt;&gt; 16;
                int green = (clr &amp; 0x0000ff00) &gt;&gt; 8;
                int blue  =  clr &amp; 0x000000ff;

                int rgb888index = lineNum * width * 3 + offset;
                rgb888pixels[rgb888index] = (byte) blue;
                rgb888pixels[rgb888index + 1] = (byte) green;
                rgb888pixels[rgb888index + 2] = (byte) red;

                offset += 3;
            }

            lineNum++;
            offset = 0;
        }

        return rgb888pixels;
    }

    public static byte[] decodeByRGB888(Bitmap bitmap) {</sourceCode>
        <number>1874931582</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>int width = bitmap.getWidth();
        int height = bitmap.getHeight();

        int[] pixels = new int[width * height];
        byte[] rgb888pixels = new byte[width * height * 3];
        int offset = 0;

        bitmap.getPixels(pixels, 0, bitmap.getWidth(), 0, 0, bitmap.getWidth(), bitmap.getHeight());

        int lineNum = 0;
        for (int i = 0; i &lt; height; i++) {
            for (int j = 0; j &lt; width; j++) {
                int clr = pixels[i * width + j];
                int red = (clr &amp; 0x00ff0000) &gt;&gt; 16;
                int green = (clr &amp; 0x0000ff00) &gt;&gt; 8;
                int blue  =  clr &amp; 0x000000ff;

                int rgb888index = lineNum * width * 3 + offset;
                rgb888pixels[rgb888index] = (byte) blue;
                rgb888pixels[rgb888index + 1] = (byte) green;
                rgb888pixels[rgb888index + 2] = (byte) red;

                offset += 3;
            }

            lineNum++;
            offset = 0;
        }

        return rgb888pixels;
    }

    public static byte[] decodeByRGB888(Bitmap bitmap) {</sourceCode>
    <number>1874931582</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[31]/links/dry"/>
  <dry reference="../dry[14]/links/dry"/>
  <dry reference="../dry[36]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>41 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86706</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>164</start>
        <end>204</end>
      </range>
    </lineRanges>
    <primaryLineNumber>164</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/effect/model/entity/type/AdvanceHSL.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.effect.model.entity.type</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-1036487018</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/effect/model/entity/type</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>41 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86705</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>97</start>
            <end>137</end>
          </range>
        </lineRanges>
        <primaryLineNumber>97</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/effect/model/entity/type/AdvanceBase.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.effect.model.entity.type</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>1055713516</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/effect/model/entity/type</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>return new AdvanceBase();
    }

    @Override
    public String toString() {
        Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
        return gson.toJson(this);
    }

    @Override
    public List&lt;JSONObject&gt; getEffectInfo(Context context) {

        List&lt;JSONObject&gt; list = new ArrayList&lt;JSONObject&gt;();
        if (null != param) {
            List&lt;ParamItem&gt; paramItemList = param.getParamItemList();
            for (ParamItem item:paramItemList) {
                if (item instanceof ParamFloatItem) {
                    if (((ParamFloatItem) item).value
                            == ((ParamFloatItem) item).defaultValue) {
                        continue;
                    }
                    JSONObject jsonObject = new JSONObject();
                    try {
                        jsonObject.put(&quot;key&quot;, item.key);
                        jsonObject.put(&quot;packName&quot;, &quot;&quot;);
                        jsonObject.put(&quot;name&quot;, &quot;&quot;);
                        jsonObject.put(&quot;value&quot;, Math.round(((ParamFloatItem) item).value / ((ParamFloatItem) item).step));
                        jsonObject.put(&quot;minValue&quot;, Math.round(((ParamFloatItem) item).min));
                        jsonObject.put(&quot;type&quot;, 1);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                    list.add(jsonObject);
                }
            }
        }

        return list;
    }
}</sourceCode>
        <number>1874931580</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>return new AdvanceBase();
    }

    @Override
    public String toString() {
        Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
        return gson.toJson(this);
    }

    @Override
    public List&lt;JSONObject&gt; getEffectInfo(Context context) {

        List&lt;JSONObject&gt; list = new ArrayList&lt;JSONObject&gt;();
        if (null != param) {
            List&lt;ParamItem&gt; paramItemList = param.getParamItemList();
            for (ParamItem item:paramItemList) {
                if (item instanceof ParamFloatItem) {
                    if (((ParamFloatItem) item).value
                            == ((ParamFloatItem) item).defaultValue) {
                        continue;
                    }
                    JSONObject jsonObject = new JSONObject();
                    try {
                        jsonObject.put(&quot;key&quot;, item.key);
                        jsonObject.put(&quot;packName&quot;, &quot;&quot;);
                        jsonObject.put(&quot;name&quot;, &quot;&quot;);
                        jsonObject.put(&quot;value&quot;, Math.round(((ParamFloatItem) item).value / ((ParamFloatItem) item).step));
                        jsonObject.put(&quot;minValue&quot;, Math.round(((ParamFloatItem) item).min));
                        jsonObject.put(&quot;type&quot;, 1);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                    list.add(jsonObject);
                }
            }
        }

        return list;
    }
}</sourceCode>
    <number>1874931580</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>61 lines of duplicate code.</message>
    <priority>HIGH</priority>
    <key>86700</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>81</start>
        <end>141</end>
      </range>
    </lineRanges>
    <primaryLineNumber>81</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/group/menu/SharpenMenu.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.group.menu</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>233225581</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/group/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>61 lines of duplicate code.</message>
        <priority>HIGH</priority>
        <key>86699</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>79</start>
            <end>139</end>
          </range>
        </lineRanges>
        <primaryLineNumber>79</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/group/menu/AdvanceVignetteMenu.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.group.menu</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-301777980</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/group/menu</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry>
            <message>61 lines of duplicate code.</message>
            <priority>HIGH</priority>
            <key>86698</key>
            <lineRanges>
              <range plugin="analysis-core@1.65">
                <start>80</start>
                <end>140</end>
              </range>
            </lineRanges>
            <primaryLineNumber>80</primaryLineNumber>
            <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/group/menu/AdvanceHSLHighlightShadowMenu.java</fileName>
            <moduleName></moduleName>
            <packageName>us.pinguo.android.effect.group.sdk.group.menu</packageName>
            <category></category>
            <type>Duplicate Code</type>
            <contextHashCode>1529669432</contextHashCode>
            <origin>dry</origin>
            <pathName>src/us/pinguo/android/effect/group/sdk/group/menu</pathName>
            <primaryColumnStart>0</primaryColumnStart>
            <primaryColumnEnd>0</primaryColumnEnd>
            <links>
              <dry reference="../../../.."/>
              <dry reference="../../../../../.."/>
            </links>
            <sourceCode>setMakePhotoModel(mAdvanceHSL);

        mLastValue = mParamItem.value;
        mEditSeekBar = (SeekBar) mAjustSeekbarLayout.findViewById(
                ResourceHelper.getId(mContext, &quot;adjust_seek_bar&quot;));
        mEditSeekBar.setOnSeekChangeListener(null);

        mEditSeekBar.setSeekLength(Math.round(mParamItem.min), Math.round(mParamItem.max), Math.round(mParamItem.noEffectValue), mParamItem.step);
        mEditSeekBar.setValue(mParamItem.value);
        mEditSeekBar.setOnSeekChangeListener(new SeekBar.OnSeekChangeListener() {
            @Override
            public void onSeekChanged(float currentValue, float step) {
                if (!mEffectModelArray[getEffectModelArrayIndex()].isScrollStopMake()) {
                    setParamsModel(mParamItem.effectKey, mParamItem.key, String.valueOf(currentValue));
                    mParamItem.value = currentValue;
                    makePhoto();

                }

                setAutoHideTextViewValue(currentValue / step);
            }

            @Override
            public void onSeekStopped(float currentValue, float step) {

                if (mEffectModelArray[getEffectModelArrayIndex()].isScrollStopMake()) {

                    setParamsModel(mParamItem.effectKey, mParamItem.key, String.valueOf(currentValue));
                    mParamItem.value = currentValue;
                    mAutoHideTextView.hideForNow();
                    mProgressBar.setVisibility(View.VISIBLE);
                    mScreenLayout.setVisibility(View.VISIBLE);
                    makePhoto(rendererMethodActionListener);
                }
            }
        });
    }

    protected final static int MAKE_PHOTO_FINISH = 100;

    @Override
    protected void handlerDispatchMessage(Message msg) {
        if (msg.what == MAKE_PHOTO_FINISH) {
            mScreenLayout.setVisibility(View.GONE);
            mProgressBar.setVisibility(View.GONE);

        } else {
            super.handlerDispatchMessage(msg);

        }
    }

    @Override
    public void quitScrollView() {

        mParamItem.value = mLastValue;
        setParamsModel(mParamItem.effectKey, mParamItem.key, String.valueOf(mLastValue));
        makePhoto();
    }

    public void setParamItem(ParamFloatItem paramFloatItem) {</sourceCode>
            <number>1874931577</number>
            <isDerived>false</isDerived>
          </dry>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>setMakePhotoModel(mAdvanceHSL);

        mLastValue = mParamItem.value;
        mEditSeekBar = (SeekBar) mAjustSeekbarLayout.findViewById(
                ResourceHelper.getId(mContext, &quot;adjust_seek_bar&quot;));
        mEditSeekBar.setOnSeekChangeListener(null);

        mEditSeekBar.setSeekLength(Math.round(mParamItem.min), Math.round(mParamItem.max), Math.round(mParamItem.noEffectValue), mParamItem.step);
        mEditSeekBar.setValue(mParamItem.value);
        mEditSeekBar.setOnSeekChangeListener(new SeekBar.OnSeekChangeListener() {
            @Override
            public void onSeekChanged(float currentValue, float step) {
                if (!mEffectModelArray[getEffectModelArrayIndex()].isScrollStopMake()) {
                    setParamsModel(mParamItem.effectKey, mParamItem.key, String.valueOf(currentValue));
                    mParamItem.value = currentValue;
                    makePhoto();

                }

                setAutoHideTextViewValue(currentValue / step);
            }

            @Override
            public void onSeekStopped(float currentValue, float step) {

                if (mEffectModelArray[getEffectModelArrayIndex()].isScrollStopMake()) {

                    setParamsModel(mParamItem.effectKey, mParamItem.key, String.valueOf(currentValue));
                    mParamItem.value = currentValue;
                    mAutoHideTextView.hideForNow();
                    mProgressBar.setVisibility(View.VISIBLE);
                    mScreenLayout.setVisibility(View.VISIBLE);
                    makePhoto(rendererMethodActionListener);
                }
            }
        });
    }

    protected final static int MAKE_PHOTO_FINISH = 100;

    @Override
    protected void handlerDispatchMessage(Message msg) {
        if (msg.what == MAKE_PHOTO_FINISH) {
            mScreenLayout.setVisibility(View.GONE);
            mProgressBar.setVisibility(View.GONE);

        } else {
            super.handlerDispatchMessage(msg);

        }
    }

    @Override
    public void quitScrollView() {

        mParamItem.value = mLastValue;
        setParamsModel(mParamItem.effectKey, mParamItem.key, String.valueOf(mLastValue));
        makePhoto();
    }

    public void setParamItem(ParamFloatItem paramFloatItem) {</sourceCode>
        <number>1874931577</number>
        <isDerived>false</isDerived>
      </dry>
      <dry reference="../dry/links/dry"/>
    </links>
    <sourceCode>setMakePhotoModel(mAdvanceHSL);

        mLastValue = mParamItem.value;
        mEditSeekBar = (SeekBar) mAjustSeekbarLayout.findViewById(
                ResourceHelper.getId(mContext, &quot;adjust_seek_bar&quot;));
        mEditSeekBar.setOnSeekChangeListener(null);

        mEditSeekBar.setSeekLength(Math.round(mParamItem.min), Math.round(mParamItem.max), Math.round(mParamItem.noEffectValue), mParamItem.step);
        mEditSeekBar.setValue(mParamItem.value);
        mEditSeekBar.setOnSeekChangeListener(new SeekBar.OnSeekChangeListener() {
            @Override
            public void onSeekChanged(float currentValue, float step) {
                if (!mEffectModelArray[getEffectModelArrayIndex()].isScrollStopMake()) {
                    setParamsModel(mParamItem.effectKey, mParamItem.key, String.valueOf(currentValue));
                    mParamItem.value = currentValue;
                    makePhoto();

                }

                setAutoHideTextViewValue(currentValue / step);
            }

            @Override
            public void onSeekStopped(float currentValue, float step) {

                if (mEffectModelArray[getEffectModelArrayIndex()].isScrollStopMake()) {

                    setParamsModel(mParamItem.effectKey, mParamItem.key, String.valueOf(currentValue));
                    mParamItem.value = currentValue;
                    mAutoHideTextView.hideForNow();
                    mProgressBar.setVisibility(View.VISIBLE);
                    mScreenLayout.setVisibility(View.VISIBLE);
                    makePhoto(rendererMethodActionListener);
                }
            }
        });
    }

    protected final static int MAKE_PHOTO_FINISH = 100;

    @Override
    protected void handlerDispatchMessage(Message msg) {
        if (msg.what == MAKE_PHOTO_FINISH) {
            mScreenLayout.setVisibility(View.GONE);
            mProgressBar.setVisibility(View.GONE);

        } else {
            super.handlerDispatchMessage(msg);

        }
    }

    @Override
    public void quitScrollView() {

        mParamItem.value = mLastValue;
        setParamsModel(mParamItem.effectKey, mParamItem.key, String.valueOf(mLastValue));
        makePhoto();
    }

    public void setParamItem(ParamFloatItem paramFloatItem) {</sourceCode>
    <number>1874931577</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[35]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>18 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86751</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>270</start>
        <end>287</end>
      </range>
    </lineRanges>
    <primaryLineNumber>270</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/camera/ui/FocusIndicatorRotateLayout.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.camera.ui</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>1392631799</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/camera/ui</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>18 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86752</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>314</start>
            <end>331</end>
          </range>
        </lineRanges>
        <primaryLineNumber>314</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/camera/ui/FocusIndicatorRotateLayout.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.camera.ui</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1716830195</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/camera/ui</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>int sc = canvas.saveLayer(left, top, right, bottom, null, sCanvasFlag);
                canvas.drawRoundRect(new RectF(left, top, right, bottom), mRoundRadius, mRoundRadius, mPaint);
                // 使用xfermode是时候，绘制两个盖在中见圆角矩形上的矩形框需要设置paint为FILL_AND_STROKE绘制，不然会导致
                // 不能完全覆盖下面显示的像素
                mPaint.setStyle(Paint.Style.FILL_AND_STROKE); // 绘制实心且有图形的轮廓
                // 设置xfermode为DST_OUT,意思就是不显示图形相交的部分
                mPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));
                canvas.drawRect(left + mOneThird_RoundRec, top, right - mOneThird_RoundRec, bottom, mPaint);
                canvas.drawRect(left, top + mOneThird_RoundRec, right, bottom - mOneThird_RoundRec, mPaint);
                mPaint.setXfermode(null);
                // 在offscreen上绘制完成后,提交绘制结果到上一个canvas显示，当前save的canvas退出stack
                canvas.restoreToCount(sc);
                // 重新设置style为空心
                mPaint.setStyle(Paint.Style.STROKE);

                mPaint.setStrokeWidth(mStrokeWidth);
                // 画左边部分的圆弧
                canvas.drawArc(new RectF(mFocusViewMarginToParent, mFocusViewMarginToParent, (float) width - mFocusViewMarginToParent,</sourceCode>
        <number>1874931602</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>int sc = canvas.saveLayer(left, top, right, bottom, null, sCanvasFlag);
                canvas.drawRoundRect(new RectF(left, top, right, bottom), mRoundRadius, mRoundRadius, mPaint);
                // 使用xfermode是时候，绘制两个盖在中见圆角矩形上的矩形框需要设置paint为FILL_AND_STROKE绘制，不然会导致
                // 不能完全覆盖下面显示的像素
                mPaint.setStyle(Paint.Style.FILL_AND_STROKE); // 绘制实心且有图形的轮廓
                // 设置xfermode为DST_OUT,意思就是不显示图形相交的部分
                mPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));
                canvas.drawRect(left + mOneThird_RoundRec, top, right - mOneThird_RoundRec, bottom, mPaint);
                canvas.drawRect(left, top + mOneThird_RoundRec, right, bottom - mOneThird_RoundRec, mPaint);
                mPaint.setXfermode(null);
                // 在offscreen上绘制完成后,提交绘制结果到上一个canvas显示，当前save的canvas退出stack
                canvas.restoreToCount(sc);
                // 重新设置style为空心
                mPaint.setStyle(Paint.Style.STROKE);

                mPaint.setStrokeWidth(mStrokeWidth);
                // 画左边部分的圆弧
                canvas.drawArc(new RectF(mFocusViewMarginToParent, mFocusViewMarginToParent, (float) width - mFocusViewMarginToParent,</sourceCode>
    <number>1874931602</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>19 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86810</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>170</start>
        <end>188</end>
      </range>
    </lineRanges>
    <primaryLineNumber>170</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/sdk/BeautyController.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.sdk</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-886517750</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/sdk</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>19 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86811</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>450</start>
            <end>468</end>
          </range>
        </lineRanges>
        <primaryLineNumber>450</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/sdk/GroupController.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.sdk</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>1535868685</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/sdk</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>showComposites();

            } else if (msg.what == RELOAD_EFFECT_PHOTO) {
                GLSurfaceViewCompositeRendererMethod glSurfaceViewCompositeRendererMethod = new GLSurfaceViewCompositeRendererMethod();
                glSurfaceViewCompositeRendererMethod.setBitmap(mCompositeForPathRendererMethod.getBitmap());
                glSurfaceViewCompositeRendererMethod.setShowBitmapHeight(mCompositeForPathRendererMethod.getShowBitmapHeight());
                glSurfaceViewCompositeRendererMethod.setShowBitmapWidth(mCompositeForPathRendererMethod.getShowBitmapWidth());
                MakePhotoModel[] newMakePhotoModelArray = MakePhotoModel.getNewMakePhotoModelArrayWithFilter(mMakePhotoModelArray, new HashSet&lt;Integer&gt;());
                if (newMakePhotoModelArray == null) {
                    glSurfaceViewCompositeRendererMethod.setEffectModeArray(mMakePhotoModelArray);

                } else {
                    glSurfaceViewCompositeRendererMethod.setEffectModeArray(newMakePhotoModelArray);

                }

                makePhoto(glSurfaceViewCompositeRendererMethod);

            } else if (msg.what == MSG_LOAD_BITMAP) {</sourceCode>
        <number>1874931630</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>showComposites();

            } else if (msg.what == RELOAD_EFFECT_PHOTO) {
                GLSurfaceViewCompositeRendererMethod glSurfaceViewCompositeRendererMethod = new GLSurfaceViewCompositeRendererMethod();
                glSurfaceViewCompositeRendererMethod.setBitmap(mCompositeForPathRendererMethod.getBitmap());
                glSurfaceViewCompositeRendererMethod.setShowBitmapHeight(mCompositeForPathRendererMethod.getShowBitmapHeight());
                glSurfaceViewCompositeRendererMethod.setShowBitmapWidth(mCompositeForPathRendererMethod.getShowBitmapWidth());
                MakePhotoModel[] newMakePhotoModelArray = MakePhotoModel.getNewMakePhotoModelArrayWithFilter(mMakePhotoModelArray, new HashSet&lt;Integer&gt;());
                if (newMakePhotoModelArray == null) {
                    glSurfaceViewCompositeRendererMethod.setEffectModeArray(mMakePhotoModelArray);

                } else {
                    glSurfaceViewCompositeRendererMethod.setEffectModeArray(newMakePhotoModelArray);

                }

                makePhoto(glSurfaceViewCompositeRendererMethod);

            } else if (msg.what == MSG_LOAD_BITMAP) {</sourceCode>
    <number>1874931630</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>25 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86760</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>327</start>
        <end>351</end>
      </range>
    </lineRanges>
    <primaryLineNumber>327</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareFilterActivity.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.mix</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-495768052</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/mix</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>25 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86759</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>493</start>
            <end>517</end>
          </range>
        </lineRanges>
        <primaryLineNumber>493</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareActivity.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.mix</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1940510317</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/mix</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>finish();
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == Session.DEFAULT_AUTHORIZE_ACTIVITY_CODE) {
            Session.getActiveSession().onActivityResult(this, requestCode, resultCode, data);
        }

        if (requestCode == 1001 &amp;&amp; null != data) {
            Bundle bundle = data.getExtras();
            if (null != bundle) {
                Bundle results = bundle.getBundle(NativeProtocol.EXTRA_PROTOCOL_METHOD_RESULTS);
                if (null != results) {
                    String userAction = FacebookDialog.getNativeDialogCompletionGesture(results);
                    if (userAction.equals(&quot;cancel&quot;)) {
                        return;
                    }
                }
            }

            if (NativeProtocol.isErrorResult(data)) {
                StatisticManager.onEvent(this,</sourceCode>
        <number>1874931606</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>finish();
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == Session.DEFAULT_AUTHORIZE_ACTIVITY_CODE) {
            Session.getActiveSession().onActivityResult(this, requestCode, resultCode, data);
        }

        if (requestCode == 1001 &amp;&amp; null != data) {
            Bundle bundle = data.getExtras();
            if (null != bundle) {
                Bundle results = bundle.getBundle(NativeProtocol.EXTRA_PROTOCOL_METHOD_RESULTS);
                if (null != results) {
                    String userAction = FacebookDialog.getNativeDialogCompletionGesture(results);
                    if (userAction.equals(&quot;cancel&quot;)) {
                        return;
                    }
                }
            }

            if (NativeProtocol.isErrorResult(data)) {
                StatisticManager.onEvent(this,</sourceCode>
    <number>1874931606</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>15 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86828</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>827</start>
        <end>841</end>
      </range>
    </lineRanges>
    <primaryLineNumber>827</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareActivity.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.mix</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-1008320220</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/mix</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>15 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86829</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>823</start>
            <end>837</end>
          </range>
        </lineRanges>
        <primaryLineNumber>823</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareFilterActivity.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.mix</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>1850656666</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/mix</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>msg.description = getResources().getString(R.string.composite_sdk_share_process_content);
        if (SendMessageToWX.Req.WXSceneTimeline == scene) {
            int splitIndex = msg.description.indexOf(&quot;,&quot;);
            msg.title = msg.description.substring(0, splitIndex);
            msg.description = getResources().getString(R.string.composite_sdk_share_wechat_friend_content);
        }

        msg.thumbData = BitmapUtils.bitmap2Bytes(thumbNail);
        SendMessageToWX.Req req = new SendMessageToWX.Req();
        req.transaction = buildTransaction(&quot;webpage&quot;);
        req.message = msg;
        req.scene = scene;

        mWechatAPI.sendReq(req);
    }</sourceCode>
        <number>1874931639</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>msg.description = getResources().getString(R.string.composite_sdk_share_process_content);
        if (SendMessageToWX.Req.WXSceneTimeline == scene) {
            int splitIndex = msg.description.indexOf(&quot;,&quot;);
            msg.title = msg.description.substring(0, splitIndex);
            msg.description = getResources().getString(R.string.composite_sdk_share_wechat_friend_content);
        }

        msg.thumbData = BitmapUtils.bitmap2Bytes(thumbNail);
        SendMessageToWX.Req req = new SendMessageToWX.Req();
        req.transaction = buildTransaction(&quot;webpage&quot;);
        req.message = msg;
        req.scene = scene;

        mWechatAPI.sendReq(req);
    }</sourceCode>
    <number>1874931639</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>19 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86783</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>630</start>
        <end>648</end>
      </range>
    </lineRanges>
    <primaryLineNumber>630</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/group/menu/TiltShiftMenu.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.group.menu</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>1569518118</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/group/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>19 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86784</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>1418</start>
            <end>1436</end>
          </range>
        </lineRanges>
        <primaryLineNumber>1418</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/sdk/BeautyController.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.sdk</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-315943283</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/sdk</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>int circleRateIndex) {
        ParamVecItem pictureParamItem = (ParamVecItem) effect.getParamItem(paramKey, pictureEffectKey);
        ParamVecItem blurParamItem = (ParamVecItem) effect.getParamItem(paramKey, blurEffectKey);

        float[] pictureParamValues = pictureParamItem.getValues();
        float[] blurParamValues = blurParamItem.getValues();
        for (int i = 0; i &lt; pictureParamValues.length; i++) {
            if (i == (circleRateIndex + 1)) {
                continue;
            }
            blurParamValues[i] = pictureParamValues[i];
        }

        if (Integer.MAX_VALUE != circleRateIndex) {
            pictureParamValues[circleRateIndex + 1] = 0.05f;
        }

        blurParamItem.setValues(blurParamValues);
        pictureParamItem.setValues(pictureParamValues);</sourceCode>
        <number>1874931617</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>int circleRateIndex) {
        ParamVecItem pictureParamItem = (ParamVecItem) effect.getParamItem(paramKey, pictureEffectKey);
        ParamVecItem blurParamItem = (ParamVecItem) effect.getParamItem(paramKey, blurEffectKey);

        float[] pictureParamValues = pictureParamItem.getValues();
        float[] blurParamValues = blurParamItem.getValues();
        for (int i = 0; i &lt; pictureParamValues.length; i++) {
            if (i == (circleRateIndex + 1)) {
                continue;
            }
            blurParamValues[i] = pictureParamValues[i];
        }

        if (Integer.MAX_VALUE != circleRateIndex) {
            pictureParamValues[circleRateIndex + 1] = 0.05f;
        }

        blurParamItem.setValues(blurParamValues);
        pictureParamItem.setValues(pictureParamValues);</sourceCode>
    <number>1874931617</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[56]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>138 lines of duplicate code.</message>
    <priority>HIGH</priority>
    <key>86690</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>243</start>
        <end>380</end>
      </range>
    </lineRanges>
    <primaryLineNumber>243</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/utils/ImageManager.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.utils</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>478439341</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/utils</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>138 lines of duplicate code.</message>
        <priority>HIGH</priority>
        <key>86691</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>231</start>
            <end>368</end>
          </range>
        </lineRanges>
        <primaryLineNumber>231</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/utils/cropImage/ImageManager.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.utils.cropImage</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>856770715</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/utils/cropImage</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>}

        // Read back the compressed file size.
        long size = new File(directory, filename).length();

        ContentValues values = new ContentValues(11);
        values.put(Images.Media.TITLE, title);

        // That filename is what will be handed to Gmail when a user shares a
        // photo. Gmail gets the name of the picture attachment from the
        // &quot;DISPLAY_NAME&quot; field.
        values.put(Images.Media.DISPLAY_NAME, filename);
        values.put(Images.Media.DATE_TAKEN, dateTaken);
        values.put(Images.Media.DATE_MODIFIED, dateTaken);
        values.put(Images.Media.DATE_ADDED, dateAdded);
        values.put(Images.Media.MIME_TYPE, &quot;image/jpeg&quot;);
        values.put(Images.Media.ORIENTATION, degree[0]);
        values.put(Images.Media.DATA, filePath);
        values.put(Images.Media.SIZE, size);

        if (latitude != null &amp;&amp; longitude != null) {
            values.put(Images.Media.LATITUDE, latitude.floatValue());
            values.put(Images.Media.LONGITUDE, longitude.floatValue());
        }

        return cr.insert(STORAGE_URI, values);
    }

    public static int getExifOrientation(String filepath) {
        int degree = 0;
        ExifInterface exif = null;
        try {
            exif = new ExifInterface(filepath);
        } catch (IOException ex) {
            Log.e(TAG, &quot;cannot read exif&quot;, ex);
        }
        if (exif != null) {
            int orientation = exif.getAttributeInt(
                    ExifInterface.TAG_ORIENTATION, -1);
            if (orientation != -1) {
                // We only recognize a subset of orientation tag values.
                switch (orientation) {
                    case ExifInterface.ORIENTATION_ROTATE_90:
                        degree = 90;
                        break;
                    case ExifInterface.ORIENTATION_ROTATE_180:
                        degree = 180;
                        break;
                    case ExifInterface.ORIENTATION_ROTATE_270:
                        degree = 270;
                        break;
                    default:
                        GLogger.w(TAG, &quot;Invalid orientation:&quot; + orientation);
                        break;
                }

            }
        }
        return degree;
    }

    static boolean isSingleImageMode(String uriString) {
        return !uriString.startsWith(Images.Media.EXTERNAL_CONTENT_URI.toString())
                &amp;&amp; !uriString.startsWith(Images.Media.INTERNAL_CONTENT_URI.toString());
    }

    private static boolean checkFsWritable() {
        // Create a temporary file to see whether a volume is really writeable.
        // It&apos;s important not to put it in the root directory which may have a
        // limit on the number of files.
        String directoryName = Environment.getExternalStorageDirectory().toString() + &quot;/DCIM&quot;;
        File directory = new File(directoryName);
        if (!directory.isDirectory()) {
            if (!directory.mkdirs()) {
                return false;
            }
        }
        return directory.canWrite();
    }

    public static boolean quickHasStorage() {
        return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());
    }

    public static boolean hasStorage() {
        return hasStorage(true);
    }

    public static boolean hasStorage(boolean requireWriteAccess) {
        String state = Environment.getExternalStorageState();
        if (Environment.MEDIA_MOUNTED.equals(state)) {
            if (requireWriteAccess) {
                boolean writable = checkFsWritable();
                return writable;
            } else {
                return true;
            }
        } else if (!requireWriteAccess &amp;&amp; Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {
            return true;
        }
        return false;
    }

    private static Cursor query(final ContentResolver resolver, final Uri uri, final String[] projection,
                                final String selection, final String[] selectionArgs, final String sortOrder) {
        try {
            if (resolver == null) {
                return null;
            }
            return resolver.query(uri, projection, selection, selectionArgs, sortOrder);
        } catch (UnsupportedOperationException ex) {
            return null;
        }

    }

    public static boolean isMediaScannerScanning(final ContentResolver cr) {
        boolean result = false;
        final Cursor cursor = query(cr, MediaStore.getMediaScannerUri(), new String[]{MediaStore.MEDIA_SCANNER_VOLUME}, null,
                null, null);
        if (cursor != null) {
            if (cursor.getCount() == 1) {
                cursor.moveToFirst();
                result = &quot;external&quot;.equals(cursor.getString(0));
            }
            cursor.close();
        }
        return result;
    }

    public static String getLastImageThumbPath() {
        return Environment.getExternalStorageDirectory().toString() + &quot;/DCIM/.thumbnails/image_last_thumb&quot;;
    }

    public static String getLastVideoThumbPath() {
        return Environment.getExternalStorageDirectory().toString() + &quot;/DCIM/.thumbnails/video_last_thumb&quot;;
    }
}</sourceCode>
        <number>1874931573</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>}

        // Read back the compressed file size.
        long size = new File(directory, filename).length();

        ContentValues values = new ContentValues(11);
        values.put(Images.Media.TITLE, title);

        // That filename is what will be handed to Gmail when a user shares a
        // photo. Gmail gets the name of the picture attachment from the
        // &quot;DISPLAY_NAME&quot; field.
        values.put(Images.Media.DISPLAY_NAME, filename);
        values.put(Images.Media.DATE_TAKEN, dateTaken);
        values.put(Images.Media.DATE_MODIFIED, dateTaken);
        values.put(Images.Media.DATE_ADDED, dateAdded);
        values.put(Images.Media.MIME_TYPE, &quot;image/jpeg&quot;);
        values.put(Images.Media.ORIENTATION, degree[0]);
        values.put(Images.Media.DATA, filePath);
        values.put(Images.Media.SIZE, size);

        if (latitude != null &amp;&amp; longitude != null) {
            values.put(Images.Media.LATITUDE, latitude.floatValue());
            values.put(Images.Media.LONGITUDE, longitude.floatValue());
        }

        return cr.insert(STORAGE_URI, values);
    }

    public static int getExifOrientation(String filepath) {
        int degree = 0;
        ExifInterface exif = null;
        try {
            exif = new ExifInterface(filepath);
        } catch (IOException ex) {
            Log.e(TAG, &quot;cannot read exif&quot;, ex);
        }
        if (exif != null) {
            int orientation = exif.getAttributeInt(
                    ExifInterface.TAG_ORIENTATION, -1);
            if (orientation != -1) {
                // We only recognize a subset of orientation tag values.
                switch (orientation) {
                    case ExifInterface.ORIENTATION_ROTATE_90:
                        degree = 90;
                        break;
                    case ExifInterface.ORIENTATION_ROTATE_180:
                        degree = 180;
                        break;
                    case ExifInterface.ORIENTATION_ROTATE_270:
                        degree = 270;
                        break;
                    default:
                        GLogger.w(TAG, &quot;Invalid orientation:&quot; + orientation);
                        break;
                }

            }
        }
        return degree;
    }

    static boolean isSingleImageMode(String uriString) {
        return !uriString.startsWith(Images.Media.EXTERNAL_CONTENT_URI.toString())
                &amp;&amp; !uriString.startsWith(Images.Media.INTERNAL_CONTENT_URI.toString());
    }

    private static boolean checkFsWritable() {
        // Create a temporary file to see whether a volume is really writeable.
        // It&apos;s important not to put it in the root directory which may have a
        // limit on the number of files.
        String directoryName = Environment.getExternalStorageDirectory().toString() + &quot;/DCIM&quot;;
        File directory = new File(directoryName);
        if (!directory.isDirectory()) {
            if (!directory.mkdirs()) {
                return false;
            }
        }
        return directory.canWrite();
    }

    public static boolean quickHasStorage() {
        return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());
    }

    public static boolean hasStorage() {
        return hasStorage(true);
    }

    public static boolean hasStorage(boolean requireWriteAccess) {
        String state = Environment.getExternalStorageState();
        if (Environment.MEDIA_MOUNTED.equals(state)) {
            if (requireWriteAccess) {
                boolean writable = checkFsWritable();
                return writable;
            } else {
                return true;
            }
        } else if (!requireWriteAccess &amp;&amp; Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {
            return true;
        }
        return false;
    }

    private static Cursor query(final ContentResolver resolver, final Uri uri, final String[] projection,
                                final String selection, final String[] selectionArgs, final String sortOrder) {
        try {
            if (resolver == null) {
                return null;
            }
            return resolver.query(uri, projection, selection, selectionArgs, sortOrder);
        } catch (UnsupportedOperationException ex) {
            return null;
        }

    }

    public static boolean isMediaScannerScanning(final ContentResolver cr) {
        boolean result = false;
        final Cursor cursor = query(cr, MediaStore.getMediaScannerUri(), new String[]{MediaStore.MEDIA_SCANNER_VOLUME}, null,
                null, null);
        if (cursor != null) {
            if (cursor.getCount() == 1) {
                cursor.moveToFirst();
                result = &quot;external&quot;.equals(cursor.getString(0));
            }
            cursor.close();
        }
        return result;
    }

    public static String getLastImageThumbPath() {
        return Environment.getExternalStorageDirectory().toString() + &quot;/DCIM/.thumbnails/image_last_thumb&quot;;
    }

    public static String getLastVideoThumbPath() {
        return Environment.getExternalStorageDirectory().toString() + &quot;/DCIM/.thumbnails/video_last_thumb&quot;;
    }
}</sourceCode>
    <number>1874931573</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[13]/links/dry"/>
  <dry reference="../dry[29]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>24 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86793</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>98</start>
        <end>121</end>
      </range>
    </lineRanges>
    <primaryLineNumber>98</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/group/menu/HDRMenu.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.group.menu</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>505063352</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/group/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>24 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86792</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>45</start>
            <end>68</end>
          </range>
        </lineRanges>
        <primaryLineNumber>45</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/group/menu/FilterMenu.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.group.menu</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-749123434</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/group/menu</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>private SeekBar.OnSeekChangeListener mOpactitySeekChangeListener = new SeekBar.OnSeekChangeListener(){


        @Override
        public void onSeekChanged(float currentValue, float step) {
            if (!mEffectModelArray[getEffectModelArrayIndex()].isScrollStopMake()) {
                setParamItem(currentValue);
                makePhoto();
            }
            setAutoHideTextViewValue(currentValue / step);
        }

        @Override
        public void onSeekStopped(float currentValue, float step) {
            if (mEffectModelArray[getEffectModelArrayIndex()].isScrollStopMake()) {
                setParamItem(currentValue);
                mAutoHideTextView.hideForNow();
                mProgressBar.setVisibility(View.VISIBLE);
                mScreenLayout.setVisibility(View.VISIBLE);

                makePhoto(rendererMethodActionListener);
            }
        }
    };</sourceCode>
        <number>1874931621</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>private SeekBar.OnSeekChangeListener mOpactitySeekChangeListener = new SeekBar.OnSeekChangeListener(){


        @Override
        public void onSeekChanged(float currentValue, float step) {
            if (!mEffectModelArray[getEffectModelArrayIndex()].isScrollStopMake()) {
                setParamItem(currentValue);
                makePhoto();
            }
            setAutoHideTextViewValue(currentValue / step);
        }

        @Override
        public void onSeekStopped(float currentValue, float step) {
            if (mEffectModelArray[getEffectModelArrayIndex()].isScrollStopMake()) {
                setParamItem(currentValue);
                mAutoHideTextView.hideForNow();
                mProgressBar.setVisibility(View.VISIBLE);
                mScreenLayout.setVisibility(View.VISIBLE);

                makePhoto(rendererMethodActionListener);
            }
        }
    };</sourceCode>
    <number>1874931621</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>35 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86727</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>980</start>
        <end>1014</end>
      </range>
    </lineRanges>
    <primaryLineNumber>980</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareFilterActivity.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.mix</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-1281403451</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/mix</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>35 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86726</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>434</start>
            <end>468</end>
          </range>
        </lineRanges>
        <primaryLineNumber>434</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/filter/square/fragment/FilterDetails.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.filter.square.fragment</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-943909383</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/filter/square/fragment</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>ResourceHelper.getString(getActivity(), &quot;composite_sdk_param_&quot; + object.getString(&quot;key&quot;))));

                String packName = object.getString(&quot;packName&quot;);
                infoBean.setPackName(packName);
                infoBean.setName(object.getString(&quot;name&quot;));

                try {
                    int value = Integer.parseInt(object.getString(&quot;value&quot;));
                    if (value &gt; 0) {
                        infoBean.setValue(&quot;+&quot; + value);
                    } else {
                        infoBean.setValue(object.getString(&quot;value&quot;));
                    }
                } catch (NumberFormatException e) {
                    infoBean.setValue(object.getString(&quot;value&quot;));
                }

                infoBean.setMinValue(Float.parseFloat(object.getString(&quot;minValue&quot;)));
                int type = object.getInt(&quot;type&quot;);
                infoBean.setType(type);
                if (0 == type) {
                    list.add(0, infoBean);
                } else {
                    list.add(infoBean);
                }
            }

            return list;
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return null;
    }

    private class AddFilterInfoThread extends Thread {</sourceCode>
        <number>1874931590</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>ResourceHelper.getString(getActivity(), &quot;composite_sdk_param_&quot; + object.getString(&quot;key&quot;))));

                String packName = object.getString(&quot;packName&quot;);
                infoBean.setPackName(packName);
                infoBean.setName(object.getString(&quot;name&quot;));

                try {
                    int value = Integer.parseInt(object.getString(&quot;value&quot;));
                    if (value &gt; 0) {
                        infoBean.setValue(&quot;+&quot; + value);
                    } else {
                        infoBean.setValue(object.getString(&quot;value&quot;));
                    }
                } catch (NumberFormatException e) {
                    infoBean.setValue(object.getString(&quot;value&quot;));
                }

                infoBean.setMinValue(Float.parseFloat(object.getString(&quot;minValue&quot;)));
                int type = object.getInt(&quot;type&quot;);
                infoBean.setType(type);
                if (0 == type) {
                    list.add(0, infoBean);
                } else {
                    list.add(infoBean);
                }
            }

            return list;
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return null;
    }

    private class AddFilterInfoThread extends Thread {</sourceCode>
    <number>1874931590</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>22 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86820</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>484</start>
        <end>505</end>
      </range>
    </lineRanges>
    <primaryLineNumber>484</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/group/menu/DetailMenu.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.group.menu</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-526463048</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/group/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>22 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86821</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>149</start>
            <end>170</end>
          </range>
        </lineRanges>
        <primaryLineNumber>149</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/group/menu/ShadowMenu.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.group.menu</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1582607629</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/group/menu</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>}

                @Override
                public void onAnimationRepeat(Animation animation) {

                }
            });
            mSeekbarLayout.startAnimation(slideOutToBottomAnimation);
            mSeekbarLayout.setVisibility(View.GONE);
        }

        if (null != mScrollValueName) {
            Animation slideOutToTopAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0,
                    Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_SELF, -1.0f);
            slideOutToTopAnimation.setDuration(400);
            mScrollValueName.startAnimation(slideOutToTopAnimation);
            mScrollValueName.setVisibility(View.GONE);
        }

        if (null != mContainer) {
            mContainer.setComparePhoto(mOrgBitmap);
        }</sourceCode>
        <number>1874931635</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>}

                @Override
                public void onAnimationRepeat(Animation animation) {

                }
            });
            mSeekbarLayout.startAnimation(slideOutToBottomAnimation);
            mSeekbarLayout.setVisibility(View.GONE);
        }

        if (null != mScrollValueName) {
            Animation slideOutToTopAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0,
                    Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_SELF, -1.0f);
            slideOutToTopAnimation.setDuration(400);
            mScrollValueName.startAnimation(slideOutToTopAnimation);
            mScrollValueName.setVisibility(View.GONE);
        }

        if (null != mContainer) {
            mContainer.setComparePhoto(mOrgBitmap);
        }</sourceCode>
    <number>1874931635</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[57]/links/dry/links/dry"/>
  <dry plugin="dry@2.40">
    <message>36 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86704</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>147</start>
        <end>182</end>
      </range>
    </lineRanges>
    <primaryLineNumber>147</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/utils/EncryptUtils.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.utils</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>1896482912</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/utils</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>36 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86703</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>207</start>
            <end>242</end>
          </range>
        </lineRanges>
        <primaryLineNumber>207</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/utils/AESEncrypt.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.utils</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-723075599</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/utils</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>byte[] passwordBytes = password.getBytes(UTF8);
        int length = passwordBytes.length &lt; keyBytes.length ? passwordBytes.length : keyBytes.length;
        System.arraycopy(passwordBytes, 0, keyBytes, 0, length);
        SecretKeySpec key = new SecretKeySpec(keyBytes, &quot;AES&quot;);
        return key;
    }

    public static String parseByte2HexStr(byte buf[]) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i &lt; buf.length; i++) {
            String hex = Integer.toHexString(buf[i] &amp; 0xFF);
            if (hex.length() == 1) {
                hex = &apos;0&apos; + hex;
            }
            sb.append(hex.toUpperCase());
        }

        return sb.toString();
    }

    public static byte[] parseHexStr2Byte(String hexStr) {
        if (hexStr.length() &lt; 1) {
            return null;
        }

        byte[] result = new byte[hexStr.length()/2];
        for (int i = 0;i&lt; hexStr.length()/2; i++) {
            int high = Integer.parseInt(hexStr.substring(i*2, i*2+1), 16);
            int low = Integer.parseInt(hexStr.substring(i*2+1, i*2+2), 16);
            result[i] = (byte) (high * 16 + low);
        }

        return result;
    }

    public static native String getPassword();</sourceCode>
        <number>1874931579</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>byte[] passwordBytes = password.getBytes(UTF8);
        int length = passwordBytes.length &lt; keyBytes.length ? passwordBytes.length : keyBytes.length;
        System.arraycopy(passwordBytes, 0, keyBytes, 0, length);
        SecretKeySpec key = new SecretKeySpec(keyBytes, &quot;AES&quot;);
        return key;
    }

    public static String parseByte2HexStr(byte buf[]) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i &lt; buf.length; i++) {
            String hex = Integer.toHexString(buf[i] &amp; 0xFF);
            if (hex.length() == 1) {
                hex = &apos;0&apos; + hex;
            }
            sb.append(hex.toUpperCase());
        }

        return sb.toString();
    }

    public static byte[] parseHexStr2Byte(String hexStr) {
        if (hexStr.length() &lt; 1) {
            return null;
        }

        byte[] result = new byte[hexStr.length()/2];
        for (int i = 0;i&lt; hexStr.length()/2; i++) {
            int high = Integer.parseInt(hexStr.substring(i*2, i*2+1), 16);
            int low = Integer.parseInt(hexStr.substring(i*2+1, i*2+2), 16);
            result[i] = (byte) (high * 16 + low);
        }

        return result;
    }

    public static native String getPassword();</sourceCode>
    <number>1874931579</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[32]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>12 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86794</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>540</start>
        <end>551</end>
      </range>
    </lineRanges>
    <primaryLineNumber>540</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/group/BaseMenu.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.group</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-1312174382</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/group</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>12 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86795</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>89</start>
            <end>100</end>
          </range>
        </lineRanges>
        <primaryLineNumber>89</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/group/menu/ShadowMenu.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.group.menu</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1034032039</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/group/menu</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>Animation slideInFromTopAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0,
                Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_SELF, -1.0f, Animation.RELATIVE_TO_SELF, 0);
        slideInFromTopAnimation.setDuration(400);
        mScrollValueName.startAnimation(slideInFromTopAnimation);
        mScrollValueName.setVisibility(View.VISIBLE);
        mScrollValueName.setText(getScrollValueNameString());

        Animation slideInFromBottomAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0,
                Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_SELF, 1.0f, Animation.RELATIVE_TO_SELF, 0);
        slideInFromBottomAnimation.setDuration(400);
        mSeekbarLayout.startAnimation(slideInFromBottomAnimation);
        mSeekbarLayout.setVisibility(View.VISIBLE);</sourceCode>
        <number>1874931622</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>Animation slideInFromTopAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0,
                Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_SELF, -1.0f, Animation.RELATIVE_TO_SELF, 0);
        slideInFromTopAnimation.setDuration(400);
        mScrollValueName.startAnimation(slideInFromTopAnimation);
        mScrollValueName.setVisibility(View.VISIBLE);
        mScrollValueName.setText(getScrollValueNameString());

        Animation slideInFromBottomAnimation = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0,
                Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_SELF, 1.0f, Animation.RELATIVE_TO_SELF, 0);
        slideInFromBottomAnimation.setDuration(400);
        mSeekbarLayout.startAnimation(slideInFromBottomAnimation);
        mSeekbarLayout.setVisibility(View.VISIBLE);</sourceCode>
    <number>1874931622</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>70 lines of duplicate code.</message>
    <priority>HIGH</priority>
    <key>86695</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>79</start>
        <end>148</end>
      </range>
    </lineRanges>
    <primaryLineNumber>79</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/group/menu/AdvanceVignetteMenu.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.group.menu</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-301777980</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/group/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>70 lines of duplicate code.</message>
        <priority>HIGH</priority>
        <key>86694</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>80</start>
            <end>149</end>
          </range>
        </lineRanges>
        <primaryLineNumber>80</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/group/menu/AdvanceHSLHighlightShadowMenu.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.group.menu</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>1529669432</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/group/menu</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>setMakePhotoModel(mAdvanceHSL);

        mLastValue = mParamItem.value;
        mEditSeekBar = (SeekBar) mAjustSeekbarLayout.findViewById(
                ResourceHelper.getId(mContext, &quot;adjust_seek_bar&quot;));
        mEditSeekBar.setOnSeekChangeListener(null);

        mEditSeekBar.setSeekLength(Math.round(mParamItem.min), Math.round(mParamItem.max), Math.round(mParamItem.noEffectValue), mParamItem.step);
        mEditSeekBar.setValue(mParamItem.value);
        mEditSeekBar.setOnSeekChangeListener(new SeekBar.OnSeekChangeListener() {
            @Override
            public void onSeekChanged(float currentValue, float step) {
                if (!mEffectModelArray[getEffectModelArrayIndex()].isScrollStopMake()) {
                    setParamsModel(mParamItem.effectKey, mParamItem.key, String.valueOf(currentValue));
                    mParamItem.value = currentValue;
                    makePhoto();

                }

                setAutoHideTextViewValue(currentValue / step);
            }

            @Override
            public void onSeekStopped(float currentValue, float step) {

                if (mEffectModelArray[getEffectModelArrayIndex()].isScrollStopMake()) {

                    setParamsModel(mParamItem.effectKey, mParamItem.key, String.valueOf(currentValue));
                    mParamItem.value = currentValue;
                    mAutoHideTextView.hideForNow();
                    mProgressBar.setVisibility(View.VISIBLE);
                    mScreenLayout.setVisibility(View.VISIBLE);
                    makePhoto(rendererMethodActionListener);
                }
            }
        });
    }

    protected final static int MAKE_PHOTO_FINISH = 100;

    @Override
    protected void handlerDispatchMessage(Message msg) {
        if (msg.what == MAKE_PHOTO_FINISH) {
            mScreenLayout.setVisibility(View.GONE);
            mProgressBar.setVisibility(View.GONE);

        } else {
            super.handlerDispatchMessage(msg);

        }
    }

    @Override
    public void quitScrollView() {

        mParamItem.value = mLastValue;
        setParamsModel(mParamItem.effectKey, mParamItem.key, String.valueOf(mLastValue));
        makePhoto();
    }

    public void setParamItem(ParamFloatItem paramFloatItem) {
        this.mParamItem = paramFloatItem;

    }


    public void setAdjustSeekBarLayout(View adjustSeekBarLayout) {
        this.mAjustSeekbarLayout = adjustSeekBarLayout;
    }
}</sourceCode>
        <number>1874931575</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>setMakePhotoModel(mAdvanceHSL);

        mLastValue = mParamItem.value;
        mEditSeekBar = (SeekBar) mAjustSeekbarLayout.findViewById(
                ResourceHelper.getId(mContext, &quot;adjust_seek_bar&quot;));
        mEditSeekBar.setOnSeekChangeListener(null);

        mEditSeekBar.setSeekLength(Math.round(mParamItem.min), Math.round(mParamItem.max), Math.round(mParamItem.noEffectValue), mParamItem.step);
        mEditSeekBar.setValue(mParamItem.value);
        mEditSeekBar.setOnSeekChangeListener(new SeekBar.OnSeekChangeListener() {
            @Override
            public void onSeekChanged(float currentValue, float step) {
                if (!mEffectModelArray[getEffectModelArrayIndex()].isScrollStopMake()) {
                    setParamsModel(mParamItem.effectKey, mParamItem.key, String.valueOf(currentValue));
                    mParamItem.value = currentValue;
                    makePhoto();

                }

                setAutoHideTextViewValue(currentValue / step);
            }

            @Override
            public void onSeekStopped(float currentValue, float step) {

                if (mEffectModelArray[getEffectModelArrayIndex()].isScrollStopMake()) {

                    setParamsModel(mParamItem.effectKey, mParamItem.key, String.valueOf(currentValue));
                    mParamItem.value = currentValue;
                    mAutoHideTextView.hideForNow();
                    mProgressBar.setVisibility(View.VISIBLE);
                    mScreenLayout.setVisibility(View.VISIBLE);
                    makePhoto(rendererMethodActionListener);
                }
            }
        });
    }

    protected final static int MAKE_PHOTO_FINISH = 100;

    @Override
    protected void handlerDispatchMessage(Message msg) {
        if (msg.what == MAKE_PHOTO_FINISH) {
            mScreenLayout.setVisibility(View.GONE);
            mProgressBar.setVisibility(View.GONE);

        } else {
            super.handlerDispatchMessage(msg);

        }
    }

    @Override
    public void quitScrollView() {

        mParamItem.value = mLastValue;
        setParamsModel(mParamItem.effectKey, mParamItem.key, String.valueOf(mLastValue));
        makePhoto();
    }

    public void setParamItem(ParamFloatItem paramFloatItem) {
        this.mParamItem = paramFloatItem;

    }


    public void setAdjustSeekBarLayout(View adjustSeekBarLayout) {
        this.mAjustSeekbarLayout = adjustSeekBarLayout;
    }
}</sourceCode>
    <number>1874931575</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[16]/links/dry/links/dry[2]"/>
  <dry reference="../dry[41]/links/dry"/>
  <dry reference="../dry[52]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>50 lines of duplicate code.</message>
    <priority>HIGH</priority>
    <key>86707</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>196</start>
        <end>245</end>
      </range>
    </lineRanges>
    <primaryLineNumber>196</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareActivity.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.mix</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>2120212974</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/mix</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>50 lines of duplicate code.</message>
        <priority>HIGH</priority>
        <key>86708</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>261</start>
            <end>310</end>
          </range>
        </lineRanges>
        <primaryLineNumber>261</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareFilterActivity.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.mix</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>2001149678</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/mix</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>GLogger.i(TAG, &quot;Get scaled org picture:&quot; + mOrgPath);
            }

            if (null != paths[0]) {
                DisplayMetrics dm = new DisplayMetrics();
                getWindowManager().getDefaultDisplay().getMetrics(dm);

                mPreviewImage = (ImageLoaderView) findViewById(R.id.preview_img);
                mPreviewImage.setOnTouchListener(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View view, MotionEvent motionEvent) {
                        if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
                            mIsShowingOrginal = true;
                            mPreviewImage.setVisibility(View.INVISIBLE);
                        }

                        if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
                            mIsShowingOrginal = false;
                            mPreviewImage.setVisibility(View.VISIBLE);
                        }
                        return true;
                    }
                });

                mPreviewImage.setImageLoadingListener(new ImageLoadingListener() {

                    @Override
                    public void onLoadingStarted(String s, View view) {

                    }

                    @Override
                    public void onLoadingFailed(String s, View view, FailReason failReason) {

                    }

                    @Override
                    public void onLoadingComplete(String s, View view, Bitmap bitmap) {
                        AlphaAnimation animation = new AlphaAnimation(0, 1.0f);
                        animation.setDuration(1000);
                        view.startAnimation(animation);
                    }

                    @Override
                    public void onLoadingCancelled(String s, View view) {

                    }
                });

                mPreviewImage.setImageUrl(&quot;file://&quot; + paths[0]);</sourceCode>
        <number>1874931581</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>GLogger.i(TAG, &quot;Get scaled org picture:&quot; + mOrgPath);
            }

            if (null != paths[0]) {
                DisplayMetrics dm = new DisplayMetrics();
                getWindowManager().getDefaultDisplay().getMetrics(dm);

                mPreviewImage = (ImageLoaderView) findViewById(R.id.preview_img);
                mPreviewImage.setOnTouchListener(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View view, MotionEvent motionEvent) {
                        if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
                            mIsShowingOrginal = true;
                            mPreviewImage.setVisibility(View.INVISIBLE);
                        }

                        if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
                            mIsShowingOrginal = false;
                            mPreviewImage.setVisibility(View.VISIBLE);
                        }
                        return true;
                    }
                });

                mPreviewImage.setImageLoadingListener(new ImageLoadingListener() {

                    @Override
                    public void onLoadingStarted(String s, View view) {

                    }

                    @Override
                    public void onLoadingFailed(String s, View view, FailReason failReason) {

                    }

                    @Override
                    public void onLoadingComplete(String s, View view, Bitmap bitmap) {
                        AlphaAnimation animation = new AlphaAnimation(0, 1.0f);
                        animation.setDuration(1000);
                        view.startAnimation(animation);
                    }

                    @Override
                    public void onLoadingCancelled(String s, View view) {

                    }
                });

                mPreviewImage.setImageUrl(&quot;file://&quot; + paths[0]);</sourceCode>
    <number>1874931581</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>176 lines of duplicate code.</message>
    <priority>HIGH</priority>
    <key>86688</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>60</start>
        <end>235</end>
      </range>
    </lineRanges>
    <primaryLineNumber>60</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/utils/ImageManager.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.utils</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-38341173</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/utils</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>176 lines of duplicate code.</message>
        <priority>HIGH</priority>
        <key>86689</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>59</start>
            <end>234</end>
          </range>
        </lineRanges>
        <primaryLineNumber>59</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/utils/cropImage/ImageManager.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.utils.cropImage</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-381840603</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/utils/cropImage</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>public static final Bitmap DEFAULT_THUMBNAIL = Bitmap.createBitmap(32, 32, Bitmap.Config.RGB_565);
    public static final Bitmap NO_IMAGE_BITMAP = Bitmap.createBitmap(1, 1, Bitmap.Config.RGB_565);

    public static final int SORT_ASCENDING = 1;
    public static final int SORT_DESCENDING = 2;

    public static final int INCLUDE_IMAGES = (1 &lt;&lt; 0);
    public static final int INCLUDE_DRM_IMAGES = (1 &lt;&lt; 1);
    public static final int INCLUDE_VIDEOS = (1 &lt;&lt; 2);

    public static final String CAMERA_IMAGE_BUCKET_NAME = Environment.getExternalStorageDirectory().toString() + &quot;/DCIM/Camera&quot;;
    public static final String CAMERA_IMAGE_BUCKET_ID = getBucketId(CAMERA_IMAGE_BUCKET_NAME);

    /**
     * Matches code in MediaProvider.computeBucketValues. Should be a common
     * function.
     */
    public static String getBucketId(String path) {
        return String.valueOf(path.toLowerCase(Locale.ENGLISH).hashCode());
    }

    public static int roundOrientation(int orientationInput) {
        int orientation = orientationInput;
        if (orientation == -1) {
            orientation = 0;
        }

        orientation = orientation % 360;
        int retVal;
        if (orientation &lt; (0 * 90) + 45) {
            retVal = 0;
        } else if (orientation &lt; (1 * 90) + 45) {
            retVal = 90;
        } else if (orientation &lt; (2 * 90) + 45) {
            retVal = 180;
        } else if (orientation &lt; (3 * 90) + 45) {
            retVal = 270;
        } else {
            retVal = 0;
        }

        return retVal;
    }

    /**
     * @return true if the mimetype is an image mimetype.
     */
    public static boolean isImageMimeType(String mimeType) {
        return mimeType.startsWith(&quot;image/&quot;);
    }

    /**
     * @return true if the mimetype is a video mimetype.
     */
    public static boolean isVideoMimeType(String mimeType) {
        return mimeType.startsWith(&quot;video/&quot;);
    }

    public static void setImageSize(ContentResolver cr, Uri uri, long size) {
        ContentValues values = new ContentValues();
        values.put(Images.Media.SIZE, size);
        cr.update(uri, values, null, null);
    }

    /**
     * Used save image info into media database.
     *
     * @param cr          The application ContentResolover
     *                    {@link #Activity.getContentResolver()}
     * @param title       This title will show in Gallery-Picture-Details.
     * @param dateTaken   Photo take time.
     * @param type        Image Type (&quot;image/jpeg&quot;)
     * @param orientation Orientation values(0, 90, 180, 270)
     * @param directory
     * @param filename    That filename is what will be handed to Gmail when a user
     *                    shares a photo. Gmail gets the name of the picture attachment
     *                    from the &quot;DISPLAY_NAME&quot; field
     * @param location
     * @return if file no exist, return null.
     */
    public static Uri addImage(ContentResolver cr, String title, long dateTaken, String type, int orientation,
                               File file, Location location) {
        String filePath = file.getPath();
        String filename = file.getName();
        // Read file size.
        long size = file.length();

        ContentValues values = new ContentValues(9);
        values.put(Images.Media.TITLE, title);
        values.put(Images.Media.DISPLAY_NAME, filename);
        values.put(Images.Media.DATE_TAKEN, dateTaken);
        values.put(Images.Media.MIME_TYPE, type);
        values.put(Images.Media.ORIENTATION, orientation);
        values.put(Images.Media.DATA, filePath);
        values.put(Images.Media.SIZE, size);

        if (location != null) {
            values.put(Images.Media.LATITUDE, location.getLatitude());
            values.put(Images.Media.LONGITUDE, location.getLongitude());
        }

        if (false) {
            Log.i(TAG, &quot;Save image info :&quot;);
            Log.i(TAG, &quot;Title(&quot; + title + &quot;)&quot;);
            Log.i(TAG, &quot;Display name(&quot; + filename + &quot;)&quot;);
            Log.i(TAG, &quot;Date taken(&quot; + dateTaken + &quot;)&quot;);
            Log.i(TAG, &quot;Mime Type(&quot; + type + &quot;)&quot;);
            Log.i(TAG, &quot;Orientation(&quot; + orientation + &quot;)&quot;);
            Log.i(TAG, &quot;Data(&quot; + filePath + &quot;)&quot;);
            Log.i(TAG, &quot;Size(&quot; + size + &quot;)&quot;);
            if (location != null) {
                Log.i(TAG, &quot;Latitude(&quot; + location.getLatitude() + &quot;)&quot;);
                Log.i(TAG, &quot;Longitude(&quot; + location.getLongitude() + &quot;)&quot;);
            }
        }
        Uri uri = null;
        try {
            /*
            insert在部分手机上出现
            java.lang.IllegalArgumentException: Unknown URL content://media/external/images/media
            异常的原因是系统ContentProvider无法获取到database
            https://code.google.com/p/android/issues/detail?id=21792
            https://code.google.com/p/android/issues/detail?id=2861
            现无方法作Walk around
            */
            uri = cr.insert(STORAGE_URI, values);
            return uri;
        } catch (Exception e) {
            // gionee77_cu_ics2/gionee77_cu_ics2:4.0.4/IMM76D
            // 在调用insert方法时，会出现native不能创建文件的exception，这里仅捕捉异样
            // 并返回null

            // insert失败后，照片其他逻辑不受影响，仅在系统相册中无法看到该照片
            GLogger.w(TAG, e);
            GLogger.w(TAG, &quot;Insert to sysdb failed, just skip it.&quot;);
            return null;
        }
    }

    /**
     * Stores a bitmap or a jpeg byte array to a file (using the specified
     * directory and filename). Also add an entry to the media store for
     * this picture. The title, dateTaken, location are attributes for the
     * picture. The degree is a one element array which returns the orientation
     * of the picture.
     */
    public static Uri addImage(ContentResolver cr, String title, long dateAdded,
                               long dateTaken, Double latitude, Double longitude, String directory,
                               String filename, Bitmap source, byte[] jpegData, int[] degree) {
        // We should store image data earlier than insert it to ContentProvider,
        // otherwise we may not be able to generate thumbnail in time.
        OutputStream outputStream = null;
        String filePath = directory + &quot;/&quot; + filename;
        try {
            File dir = new File(directory);
            if (!dir.exists()) {
                if (!dir.mkdirs()) {
                    GLogger.w(TAG, &quot;Create dir failed!&quot;);
                }
            }
            File file = new File(directory, filename);
            outputStream = new FileOutputStream(file);
            if (source != null) {
                source.compress(CompressFormat.JPEG, 75, outputStream);
                degree[0] = 0;
            } else {
                outputStream.write(jpegData);
                degree[0] = getExifOrientation(filePath);
            }
        } catch (FileNotFoundException ex) {
            Log.w(TAG, ex);
            return null;
        } catch (IOException ex) {
            Log.w(TAG, ex);
            return null;
        } finally {</sourceCode>
        <number>1874931572</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>public static final Bitmap DEFAULT_THUMBNAIL = Bitmap.createBitmap(32, 32, Bitmap.Config.RGB_565);
    public static final Bitmap NO_IMAGE_BITMAP = Bitmap.createBitmap(1, 1, Bitmap.Config.RGB_565);

    public static final int SORT_ASCENDING = 1;
    public static final int SORT_DESCENDING = 2;

    public static final int INCLUDE_IMAGES = (1 &lt;&lt; 0);
    public static final int INCLUDE_DRM_IMAGES = (1 &lt;&lt; 1);
    public static final int INCLUDE_VIDEOS = (1 &lt;&lt; 2);

    public static final String CAMERA_IMAGE_BUCKET_NAME = Environment.getExternalStorageDirectory().toString() + &quot;/DCIM/Camera&quot;;
    public static final String CAMERA_IMAGE_BUCKET_ID = getBucketId(CAMERA_IMAGE_BUCKET_NAME);

    /**
     * Matches code in MediaProvider.computeBucketValues. Should be a common
     * function.
     */
    public static String getBucketId(String path) {
        return String.valueOf(path.toLowerCase(Locale.ENGLISH).hashCode());
    }

    public static int roundOrientation(int orientationInput) {
        int orientation = orientationInput;
        if (orientation == -1) {
            orientation = 0;
        }

        orientation = orientation % 360;
        int retVal;
        if (orientation &lt; (0 * 90) + 45) {
            retVal = 0;
        } else if (orientation &lt; (1 * 90) + 45) {
            retVal = 90;
        } else if (orientation &lt; (2 * 90) + 45) {
            retVal = 180;
        } else if (orientation &lt; (3 * 90) + 45) {
            retVal = 270;
        } else {
            retVal = 0;
        }

        return retVal;
    }

    /**
     * @return true if the mimetype is an image mimetype.
     */
    public static boolean isImageMimeType(String mimeType) {
        return mimeType.startsWith(&quot;image/&quot;);
    }

    /**
     * @return true if the mimetype is a video mimetype.
     */
    public static boolean isVideoMimeType(String mimeType) {
        return mimeType.startsWith(&quot;video/&quot;);
    }

    public static void setImageSize(ContentResolver cr, Uri uri, long size) {
        ContentValues values = new ContentValues();
        values.put(Images.Media.SIZE, size);
        cr.update(uri, values, null, null);
    }

    /**
     * Used save image info into media database.
     *
     * @param cr          The application ContentResolover
     *                    {@link #Activity.getContentResolver()}
     * @param title       This title will show in Gallery-Picture-Details.
     * @param dateTaken   Photo take time.
     * @param type        Image Type (&quot;image/jpeg&quot;)
     * @param orientation Orientation values(0, 90, 180, 270)
     * @param directory
     * @param filename    That filename is what will be handed to Gmail when a user
     *                    shares a photo. Gmail gets the name of the picture attachment
     *                    from the &quot;DISPLAY_NAME&quot; field
     * @param location
     * @return if file no exist, return null.
     */
    public static Uri addImage(ContentResolver cr, String title, long dateTaken, String type, int orientation,
                               File file, Location location) {
        String filePath = file.getPath();
        String filename = file.getName();
        // Read file size.
        long size = file.length();

        ContentValues values = new ContentValues(9);
        values.put(Images.Media.TITLE, title);
        values.put(Images.Media.DISPLAY_NAME, filename);
        values.put(Images.Media.DATE_TAKEN, dateTaken);
        values.put(Images.Media.MIME_TYPE, type);
        values.put(Images.Media.ORIENTATION, orientation);
        values.put(Images.Media.DATA, filePath);
        values.put(Images.Media.SIZE, size);

        if (location != null) {
            values.put(Images.Media.LATITUDE, location.getLatitude());
            values.put(Images.Media.LONGITUDE, location.getLongitude());
        }

        if (false) {
            Log.i(TAG, &quot;Save image info :&quot;);
            Log.i(TAG, &quot;Title(&quot; + title + &quot;)&quot;);
            Log.i(TAG, &quot;Display name(&quot; + filename + &quot;)&quot;);
            Log.i(TAG, &quot;Date taken(&quot; + dateTaken + &quot;)&quot;);
            Log.i(TAG, &quot;Mime Type(&quot; + type + &quot;)&quot;);
            Log.i(TAG, &quot;Orientation(&quot; + orientation + &quot;)&quot;);
            Log.i(TAG, &quot;Data(&quot; + filePath + &quot;)&quot;);
            Log.i(TAG, &quot;Size(&quot; + size + &quot;)&quot;);
            if (location != null) {
                Log.i(TAG, &quot;Latitude(&quot; + location.getLatitude() + &quot;)&quot;);
                Log.i(TAG, &quot;Longitude(&quot; + location.getLongitude() + &quot;)&quot;);
            }
        }
        Uri uri = null;
        try {
            /*
            insert在部分手机上出现
            java.lang.IllegalArgumentException: Unknown URL content://media/external/images/media
            异常的原因是系统ContentProvider无法获取到database
            https://code.google.com/p/android/issues/detail?id=21792
            https://code.google.com/p/android/issues/detail?id=2861
            现无方法作Walk around
            */
            uri = cr.insert(STORAGE_URI, values);
            return uri;
        } catch (Exception e) {
            // gionee77_cu_ics2/gionee77_cu_ics2:4.0.4/IMM76D
            // 在调用insert方法时，会出现native不能创建文件的exception，这里仅捕捉异样
            // 并返回null

            // insert失败后，照片其他逻辑不受影响，仅在系统相册中无法看到该照片
            GLogger.w(TAG, e);
            GLogger.w(TAG, &quot;Insert to sysdb failed, just skip it.&quot;);
            return null;
        }
    }

    /**
     * Stores a bitmap or a jpeg byte array to a file (using the specified
     * directory and filename). Also add an entry to the media store for
     * this picture. The title, dateTaken, location are attributes for the
     * picture. The degree is a one element array which returns the orientation
     * of the picture.
     */
    public static Uri addImage(ContentResolver cr, String title, long dateAdded,
                               long dateTaken, Double latitude, Double longitude, String directory,
                               String filename, Bitmap source, byte[] jpegData, int[] degree) {
        // We should store image data earlier than insert it to ContentProvider,
        // otherwise we may not be able to generate thumbnail in time.
        OutputStream outputStream = null;
        String filePath = directory + &quot;/&quot; + filename;
        try {
            File dir = new File(directory);
            if (!dir.exists()) {
                if (!dir.mkdirs()) {
                    GLogger.w(TAG, &quot;Create dir failed!&quot;);
                }
            }
            File file = new File(directory, filename);
            outputStream = new FileOutputStream(file);
            if (source != null) {
                source.compress(CompressFormat.JPEG, 75, outputStream);
                degree[0] = 0;
            } else {
                outputStream.write(jpegData);
                degree[0] = getExifOrientation(filePath);
            }
        } catch (FileNotFoundException ex) {
            Log.w(TAG, ex);
            return null;
        } catch (IOException ex) {
            Log.w(TAG, ex);
            return null;
        } finally {</sourceCode>
    <number>1874931572</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>24 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86766</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>141</start>
        <end>164</end>
      </range>
    </lineRanges>
    <primaryLineNumber>141</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/effect/model/entity/Effect.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.effect.model.entity</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>1674763419</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/effect/model/entity</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>24 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86765</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>329</start>
            <end>352</end>
          </range>
        </lineRanges>
        <primaryLineNumber>329</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/effect/model/entity/CompositeEffect.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.effect.model.entity</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1565303935</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/effect/model/entity</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>public CompositeEffect getLocaleObject(Locale locale) {

        int idx = getIndex(locale);
        String locStr = getLocaleString(locale);

        String[] nameArr = name.split(LOCAL_SEPERATOR);
        String name = this.name;
        if (null != nameArr &amp;&amp; nameArr.length &gt; 0) {
            if (idx &lt; nameArr.length) {
                name = nameArr[idx];
            } else {
                name = nameArr[0];
            }
        }

        String[] desArr = description.split(LOCAL_SEPERATOR);
        String description = this.description;
        if (null != desArr &amp;&amp; desArr.length &gt; 0) {
            if (idx &lt; desArr.length) {
                description = desArr[idx];
            } else {
                description = desArr[0];
            }
        }</sourceCode>
        <number>1874931608</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>public CompositeEffect getLocaleObject(Locale locale) {

        int idx = getIndex(locale);
        String locStr = getLocaleString(locale);

        String[] nameArr = name.split(LOCAL_SEPERATOR);
        String name = this.name;
        if (null != nameArr &amp;&amp; nameArr.length &gt; 0) {
            if (idx &lt; nameArr.length) {
                name = nameArr[idx];
            } else {
                name = nameArr[0];
            }
        }

        String[] desArr = description.split(LOCAL_SEPERATOR);
        String description = this.description;
        if (null != desArr &amp;&amp; desArr.length &gt; 0) {
            if (idx &lt; desArr.length) {
                description = desArr[idx];
            } else {
                description = desArr[0];
            }
        }</sourceCode>
    <number>1874931608</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[8]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>32 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86788</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>364</start>
        <end>395</end>
      </range>
    </lineRanges>
    <primaryLineNumber>364</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/sdk/BeautyController.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.sdk</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-518081037</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/sdk</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>32 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86789</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>1472</start>
            <end>1503</end>
          </range>
        </lineRanges>
        <primaryLineNumber>1472</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/sdk/BeautyController.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.sdk</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>1036643079</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/sdk</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>mCompositeForPathRendererMethod.setRendererMethodActionListener(
                    new EffectGroupRendererMethod.RendererMethodActionListener() {
                        @Override
                        public void success(Bitmap bitmap) {
                            mActivity.runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    hideProgress();
                                }
                            });
                        }

                        @Override
                        public void fail() {
                            mActivity.runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    hideProgress();
                                }
                            });
                        }

                        @Override
                        public void successForGLSurfaceView() {
                            mActivity.runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    hideProgress();
                                }
                            });
                        }
                    });</sourceCode>
        <number>1874931619</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>mCompositeForPathRendererMethod.setRendererMethodActionListener(
                    new EffectGroupRendererMethod.RendererMethodActionListener() {
                        @Override
                        public void success(Bitmap bitmap) {
                            mActivity.runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    hideProgress();
                                }
                            });
                        }

                        @Override
                        public void fail() {
                            mActivity.runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    hideProgress();
                                }
                            });
                        }

                        @Override
                        public void successForGLSurfaceView() {
                            mActivity.runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    hideProgress();
                                }
                            });
                        }
                    });</sourceCode>
    <number>1874931619</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>30 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86733</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>298</start>
        <end>327</end>
      </range>
    </lineRanges>
    <primaryLineNumber>298</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/androidsdk/model/MakePhotoModel.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.androidsdk.model</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-955185461</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/androidsdk/model</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>30 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86732</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>266</start>
            <end>295</end>
          </range>
        </lineRanges>
        <primaryLineNumber>266</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/androidsdk/model/MakePhotoModel.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.androidsdk.model</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-414807493</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/androidsdk/model</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>if (compositeEffect != null) { //刚开始组合滤镜没有数据，所以需要这个判断
            for (int i = 0; i &lt; compositeEffect.effectList.size(); i++) {
                if (filterSet != null) {
                    if (filterSet.contains(compositeEffect.effectList.get(i).type)) {
                        continue;
                    }
                }

                MakePhotoModel makePhotoModel;
                Effect compositeEffectItem = compositeEffect.effectList.get(i);
                if (compositeEffectItem.type.equals(Effect.Type.TiltShift.name())) {
                    TiltShiftMakePhotoModel tiltShiftMakePhotoModel = new TiltShiftMakePhotoModel();
                    tiltShiftMakePhotoModel.setMakeType(TiltShiftMakePhotoModel.MAKE_TYPE_PIC);
                    makePhotoModel = tiltShiftMakePhotoModel;

                } else {
                    makePhotoModel = new MakePhotoModel();
                }

                Effect effect = EffectDataManager.getInstance().getEffect(compositeEffectItem.key);
                effect.paramStr = compositeEffectItem.paramStr;
                makePhotoModel.setEffectParams(effect);

                makePhotoModelArray[Effect.Type.valueOf(compositeEffectItem.type).ordinal()] = makePhotoModel;
            }
        }
        return makePhotoModelArray;
    }

    public static MakePhotoModel[] getMakePhotoModelArrayForWithFilter(CompositeEffect compositeEffect, Set&lt;String&gt; filterSet) {</sourceCode>
        <number>1874931593</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>if (compositeEffect != null) { //刚开始组合滤镜没有数据，所以需要这个判断
            for (int i = 0; i &lt; compositeEffect.effectList.size(); i++) {
                if (filterSet != null) {
                    if (filterSet.contains(compositeEffect.effectList.get(i).type)) {
                        continue;
                    }
                }

                MakePhotoModel makePhotoModel;
                Effect compositeEffectItem = compositeEffect.effectList.get(i);
                if (compositeEffectItem.type.equals(Effect.Type.TiltShift.name())) {
                    TiltShiftMakePhotoModel tiltShiftMakePhotoModel = new TiltShiftMakePhotoModel();
                    tiltShiftMakePhotoModel.setMakeType(TiltShiftMakePhotoModel.MAKE_TYPE_PIC);
                    makePhotoModel = tiltShiftMakePhotoModel;

                } else {
                    makePhotoModel = new MakePhotoModel();
                }

                Effect effect = EffectDataManager.getInstance().getEffect(compositeEffectItem.key);
                effect.paramStr = compositeEffectItem.paramStr;
                makePhotoModel.setEffectParams(effect);

                makePhotoModelArray[Effect.Type.valueOf(compositeEffectItem.type).ordinal()] = makePhotoModel;
            }
        }
        return makePhotoModelArray;
    }

    public static MakePhotoModel[] getMakePhotoModelArrayForWithFilter(CompositeEffect compositeEffect, Set&lt;String&gt; filterSet) {</sourceCode>
    <number>1874931593</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>42 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86748</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>112</start>
        <end>153</end>
      </range>
    </lineRanges>
    <primaryLineNumber>112</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/data/EffectSaveManager.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.data</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-1073127062</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/data</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>42 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86747</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>54</start>
            <end>95</end>
          </range>
        </lineRanges>
        <primaryLineNumber>54</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/data/EffectSaveManager.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.data</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1277886545</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/data</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>}

        if (glSurfaceBitmap != null) {
//            Matrix matrix = new Matrix();
//            float matrixScale = (float) ICON_SIZE / (Math.max(glSurfaceBitmap.getWidth(), glSurfaceBitmap.getHeight()));
//
//            matrix.postScale(matrixScale, matrixScale);
//
//            Bitmap bitmap = Bitmap.createBitmap(glSurfaceBitmap, 0, 0, glSurfaceBitmap.getWidth(), glSurfaceBitmap.getHeight(), matrix, false);

            Bitmap bitmap = BitmapUtils.scaleBitmap(glSurfaceBitmap, ICON_SIZE, 0);
            ce.setIconBitmap(bitmap);
        }

        mEffectModel.save(ce, new IEffectModel.Callback() {


            @Override
            public void onPreExecute(Object... param) {

            }

            @Override
            public void onExecute(Object... param) {

            }

            @Override
            public void onPostExecute(Object... result) {
                String toIconPath = result[0].toString();
                ImageLoader.getInstance().getMemoryCache().clear();

                boolean deleteResult = ImageLoader.getInstance().getDiscCache().get(&quot;file://&quot; + toIconPath).delete();
                GLogger.i(TAG, &quot;iconPath:&quot; + toIconPath + &quot;,result:&quot; + deleteResult);
//                System.out.println(&quot;iconPath:&quot;+toIconPath+&quot;,result:&quot;+deleteResult);
            }
        });

        return ce;
    }

    public static CompositeEffect saveEffect(String name, String mCompositeEffectKey, String des, CompositeEffect ce, Bitmap glSurfaceBitmap, Context context) {</sourceCode>
        <number>1874931600</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>}

        if (glSurfaceBitmap != null) {
//            Matrix matrix = new Matrix();
//            float matrixScale = (float) ICON_SIZE / (Math.max(glSurfaceBitmap.getWidth(), glSurfaceBitmap.getHeight()));
//
//            matrix.postScale(matrixScale, matrixScale);
//
//            Bitmap bitmap = Bitmap.createBitmap(glSurfaceBitmap, 0, 0, glSurfaceBitmap.getWidth(), glSurfaceBitmap.getHeight(), matrix, false);

            Bitmap bitmap = BitmapUtils.scaleBitmap(glSurfaceBitmap, ICON_SIZE, 0);
            ce.setIconBitmap(bitmap);
        }

        mEffectModel.save(ce, new IEffectModel.Callback() {


            @Override
            public void onPreExecute(Object... param) {

            }

            @Override
            public void onExecute(Object... param) {

            }

            @Override
            public void onPostExecute(Object... result) {
                String toIconPath = result[0].toString();
                ImageLoader.getInstance().getMemoryCache().clear();

                boolean deleteResult = ImageLoader.getInstance().getDiscCache().get(&quot;file://&quot; + toIconPath).delete();
                GLogger.i(TAG, &quot;iconPath:&quot; + toIconPath + &quot;,result:&quot; + deleteResult);
//                System.out.println(&quot;iconPath:&quot;+toIconPath+&quot;,result:&quot;+deleteResult);
            }
        });

        return ce;
    }

    public static CompositeEffect saveEffect(String name, String mCompositeEffectKey, String des, CompositeEffect ce, Bitmap glSurfaceBitmap, Context context) {</sourceCode>
    <number>1874931600</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[43]/links/dry"/>
  <dry reference="../dry[69]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>23 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86805</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>42</start>
        <end>64</end>
      </range>
    </lineRanges>
    <primaryLineNumber>42</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/api/share/GetWechatUserInfo.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.mix.api.share</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>64841447</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/mix/api/share</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>23 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86804</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>49</start>
            <end>71</end>
          </range>
        </lineRanges>
        <primaryLineNumber>49</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/api/share/GetFacebookUserInfo.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.mix.api.share</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>763559256</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/mix/api/share</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>userInfoBean.setNickname(name);

            return userInfoBean;
        } catch (JSONException e) {
            e.printStackTrace();
        }

        return null;
    }

    protected Map&lt;String, String&gt; buildParam(Bundle bundle) {

        Map&lt;String, String&gt; params = super.buildParam(bundle);
        params.put(&quot;platform&quot;, &quot;android&quot;);
        if (params.size() &gt; 0) {
            String sig = EncryptUtils.getSig(params, ApiConstants.SECRET);
            params.put(&quot;sig&quot;, sig);
            GLogger.i(&quot;&quot;, &quot;11111 put param:&quot; + &quot;sig&quot; + &quot;/&quot; + sig);
        }

        return params;
    }
}</sourceCode>
        <number>1874931627</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>userInfoBean.setNickname(name);

            return userInfoBean;
        } catch (JSONException e) {
            e.printStackTrace();
        }

        return null;
    }

    protected Map&lt;String, String&gt; buildParam(Bundle bundle) {

        Map&lt;String, String&gt; params = super.buildParam(bundle);
        params.put(&quot;platform&quot;, &quot;android&quot;);
        if (params.size() &gt; 0) {
            String sig = EncryptUtils.getSig(params, ApiConstants.SECRET);
            params.put(&quot;sig&quot;, sig);
            GLogger.i(&quot;&quot;, &quot;11111 put param:&quot; + &quot;sig&quot; + &quot;/&quot; + sig);
        }

        return params;
    }
}</sourceCode>
    <number>1874931627</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[50]/links/dry/links/dry[2]"/>
  <dry reference="../dry[72]/links/dry"/>
  <dry reference="../dry[61]/links/dry"/>
  <dry reference="../dry[62]/links/dry"/>
  <dry reference="../dry[45]/links/dry"/>
  <dry reference="../dry[51]/links/dry"/>
  <dry reference="../dry[20]/links/dry"/>
  <dry reference="../dry[79]/links/dry"/>
  <dry reference="../dry[44]/links/dry/links/dry[2]/links/dry[3]"/>
  <dry plugin="dry@2.40">
    <message>13 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86816</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>47</start>
        <end>59</end>
      </range>
    </lineRanges>
    <primaryLineNumber>47</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/intent/IntentBeautyController.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.intent</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>-745194950</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/intent</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>13 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86817</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>999</start>
            <end>1011</end>
          </range>
        </lineRanges>
        <primaryLineNumber>999</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/sdk/BeautyController.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.sdk</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1516783467</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/sdk</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>Intent intent = new Intent(activity, GroupActivity.class);

        intent.putExtra(ConstantUtil.COMPOSITE_JSON, compositeEffect.toString());
        intent.putExtra(ConstantUtil.COMPOSITE_KEY, compositeEffect.key);
        if (!compositeEffect.key.endsWith(&quot;None&quot;)
                &amp;&amp; compositeEffect.isDefault != 3) {
            intent.putExtra(ConstantUtil.COMPOSITE_NAME, compositeEffect.name);
        } else {
            intent.putExtra(ConstantUtil.COMPOSITE_NAME, &quot;&quot;);
        }

        intent.putExtra(ConstantUtil.PHOTO_PATH, photoPath);
        intent.putExtra(ConstantUtil.EFFECT_PHOTO_PATH, effectPhotoPath);</sourceCode>
        <number>1874931633</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>Intent intent = new Intent(activity, GroupActivity.class);

        intent.putExtra(ConstantUtil.COMPOSITE_JSON, compositeEffect.toString());
        intent.putExtra(ConstantUtil.COMPOSITE_KEY, compositeEffect.key);
        if (!compositeEffect.key.endsWith(&quot;None&quot;)
                &amp;&amp; compositeEffect.isDefault != 3) {
            intent.putExtra(ConstantUtil.COMPOSITE_NAME, compositeEffect.name);
        } else {
            intent.putExtra(ConstantUtil.COMPOSITE_NAME, &quot;&quot;);
        }

        intent.putExtra(ConstantUtil.PHOTO_PATH, photoPath);
        intent.putExtra(ConstantUtil.EFFECT_PHOTO_PATH, effectPhotoPath);</sourceCode>
    <number>1874931633</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[57]/links/dry"/>
  <dry reference="../dry[33]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>21 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86799</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>732</start>
        <end>752</end>
      </range>
    </lineRanges>
    <primaryLineNumber>732</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareFilterActivity.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.mix</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>1147777163</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/mix</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>21 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86798</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>742</start>
            <end>762</end>
          </range>
        </lineRanges>
        <primaryLineNumber>742</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareActivity.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.mix</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>1943126935</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/mix</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>String url = startAddProcessInfo(etagList);
            if (null != url) {
                return url + &quot;;&quot; + siteNameId;
            }

            return String.valueOf(siteNameId);

        }

        @Override
        protected void onPostExecute(String result) {
            super.onPostExecute(result);

            if (result.contains(&quot;;&quot;)) {
                String[] resultArray = result.split(&quot;;&quot;);
                String url = resultArray[0];
                int siteNameId = Integer.parseInt(resultArray[1]);

                if (siteNameId == R.string.composite_sdk_share_site_facebook) {
                    shareFilterToFacebook(url);
                } else if (siteNameId == R.string.composite_sdk_share_site_wechat) {</sourceCode>
        <number>1874931624</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>String url = startAddProcessInfo(etagList);
            if (null != url) {
                return url + &quot;;&quot; + siteNameId;
            }

            return String.valueOf(siteNameId);

        }

        @Override
        protected void onPostExecute(String result) {
            super.onPostExecute(result);

            if (result.contains(&quot;;&quot;)) {
                String[] resultArray = result.split(&quot;;&quot;);
                String url = resultArray[0];
                int siteNameId = Integer.parseInt(resultArray[1]);

                if (siteNameId == R.string.composite_sdk_share_site_facebook) {
                    shareFilterToFacebook(url);
                } else if (siteNameId == R.string.composite_sdk_share_site_wechat) {</sourceCode>
    <number>1874931624</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>32 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86736</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>476</start>
        <end>507</end>
      </range>
    </lineRanges>
    <primaryLineNumber>476</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/login/activity/PGNewLoginActivity.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.login.activity</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>1714864892</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/login/activity</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>32 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86737</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>521</start>
            <end>552</end>
          </range>
        </lineRanges>
        <primaryLineNumber>521</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/login/activity/PGNewLoginActivity.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.login.activity</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-788122244</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/login/activity</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>mEmailLoginFuture.get(new AsyncResult&lt;Void&gt;() {
            @Override
            public void onSuccess(Void aVoid) {
                dismissDialog();
                loginSuccess();
            }

            @Override
            public void onError(Exception e) {
                dismissDialog();
                String errorMessage = null;
                int status = 0;
                if (e instanceof Fault) {
                    Fault fault = (Fault) e;
                    status = fault.getStatus();
                    errorMessage = StatusErrorCodeMessage.getServerStatusErrorMessage(PGNewLoginActivity.this, fault.getStatus());
                }
                if (TextUtils.isEmpty(errorMessage)) {
                    errorMessage = getString(R.string.pg_login_fail);
                    showMessage(errorMessage);
                } else {
                    if (status == 10511) {
                        showErrorPromptTextView(errorMessage, PGLoginConstants.ERROR_EMAIL);
                    } else if (status == 10510) {
                        showErrorPromptTextView(errorMessage, PGLoginConstants.ERROR_PASSWORD);
                    } else {
                        showErrorPromptTextView(errorMessage, PGLoginConstants.ERROR_SYSTEM);
                    }
                }
            }
        });
    }</sourceCode>
        <number>1874931595</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>mEmailLoginFuture.get(new AsyncResult&lt;Void&gt;() {
            @Override
            public void onSuccess(Void aVoid) {
                dismissDialog();
                loginSuccess();
            }

            @Override
            public void onError(Exception e) {
                dismissDialog();
                String errorMessage = null;
                int status = 0;
                if (e instanceof Fault) {
                    Fault fault = (Fault) e;
                    status = fault.getStatus();
                    errorMessage = StatusErrorCodeMessage.getServerStatusErrorMessage(PGNewLoginActivity.this, fault.getStatus());
                }
                if (TextUtils.isEmpty(errorMessage)) {
                    errorMessage = getString(R.string.pg_login_fail);
                    showMessage(errorMessage);
                } else {
                    if (status == 10511) {
                        showErrorPromptTextView(errorMessage, PGLoginConstants.ERROR_EMAIL);
                    } else if (status == 10510) {
                        showErrorPromptTextView(errorMessage, PGLoginConstants.ERROR_PASSWORD);
                    } else {
                        showErrorPromptTextView(errorMessage, PGLoginConstants.ERROR_SYSTEM);
                    }
                }
            }
        });
    }</sourceCode>
    <number>1874931595</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>146 lines of duplicate code.</message>
    <priority>HIGH</priority>
    <key>86692</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>289</start>
        <end>434</end>
      </range>
    </lineRanges>
    <primaryLineNumber>289</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/filter/square/fragment/FilterDetails.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.filter.square.fragment</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>1965643508</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/filter/square/fragment</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>146 lines of duplicate code.</message>
        <priority>HIGH</priority>
        <key>86693</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>836</start>
            <end>981</end>
          </range>
        </lineRanges>
        <primaryLineNumber>836</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/MixShareFilterActivity.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.mix</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>481089856</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/mix</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>myHandler.sendMessage(message);
    }

    private static class ParamListAdapter extends BaseAdapter {

        private List&lt;ParamInfoBean&gt; mParamInfoList;

        public ParamListAdapter(List&lt;ParamInfoBean&gt; list) {
            mParamInfoList = list;
        }

        @Override
        public int getCount() {
            return mParamInfoList.size();
        }

        @Override
        public Object getItem(int position) {
            return mParamInfoList.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public int getItemViewType(int position) {
            ParamInfoBean infoBean = (ParamInfoBean) getItem(position);
            return infoBean.getType();
        }

        @Override
        public View getView(int position, View convertView, ViewGroup viewGroup) {

            LayoutInflater layoutInflater = LayoutInflater.from(viewGroup.getContext());
            ParamInfoBean infoBean = (ParamInfoBean) getItem(position);
            if (0 == getItemViewType(position)) {
                convertView = layoutInflater.inflate(
                        R.layout.composite_sdk_param_item_layout, null);
                TextView titleTv = (TextView) convertView.findViewById(R.id.title_tv);
                titleTv.setText(infoBean.getKey() + &quot;:&quot;);

                TextView packNameTv = (TextView) convertView.findViewById(R.id.pack_name_tv);
                packNameTv.setText(infoBean.getPackName() + &quot; &quot;);
                if (infoBean.getPackName().isEmpty()) {
                    packNameTv.setVisibility(View.GONE);
                }

                TextView effectNameTv = (TextView) convertView.findViewById(R.id.effect_name_tv);
                effectNameTv.setText(infoBean.getName() + &quot; &quot;);
                if (infoBean.getName().isEmpty()) {
                    effectNameTv.setVisibility(View.GONE);
                }

                TextView valueTv = (TextView) convertView.findViewById(R.id.value_tv);
                valueTv.setText(infoBean.getValue());
            } else {
                convertView = layoutInflater.inflate(
                        R.layout.composite_sdk_param_item_seek_layout, null);
                TextView titleTv = (TextView) convertView.findViewById(R.id.title_tv);
                titleTv.setText(infoBean.getKey());

                TextView valueTv = (TextView) convertView.findViewById(R.id.value_tv);
                valueTv.setText(String.valueOf(infoBean.getValue()));

                GradientSeekBar seekBar = (GradientSeekBar) convertView.findViewById(R.id.value_seek_bar);
                seekBar.setValue(Math.round(Float.parseFloat(infoBean.getValue())) + 100, 200, 100);
            }

            return convertView;
        }
    }

    private static class ParamInfoBean extends BaseBean {
        private String key;
        private String packName;
        private String name;
        private int type;
        private String value;
        private float minValue;

        @Override
        protected boolean isValid(Object obj) {
            return true;
        }

        public String getKey() {
            return key;
        }

        public void setKey(String key) {
            this.key = key;
        }

        public String getPackName() {
            return packName;
        }

        public void setPackName(String packName) {
            this.packName = packName;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }

        public float getMinValue() {
            return minValue;
        }

        public void setMinValue(float minValue) {
            this.minValue = minValue;
        }

        public int getType() {
            return type;
        }

        public void setType(int type) {
            this.type = type;
        }
    }

    private List&lt;ParamInfoBean&gt; parseEffectInfo(String info) {
        try {

            JSONArray jsonArray = new JSONArray(info);
            List&lt;ParamInfoBean&gt; list = new ArrayList&lt;ParamInfoBean&gt;();
            for (int i = 0; i &lt; jsonArray.length(); i++) {
                JSONObject object = jsonArray.optJSONObject(i);
                ParamInfoBean infoBean = new ParamInfoBean();
                infoBean.setKey(getResources().getString(
                        ResourceHelper.getString(getActivity(), &quot;composite_sdk_param_&quot; + object.getString(&quot;key&quot;))));</sourceCode>
        <number>1874931574</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>myHandler.sendMessage(message);
    }

    private static class ParamListAdapter extends BaseAdapter {

        private List&lt;ParamInfoBean&gt; mParamInfoList;

        public ParamListAdapter(List&lt;ParamInfoBean&gt; list) {
            mParamInfoList = list;
        }

        @Override
        public int getCount() {
            return mParamInfoList.size();
        }

        @Override
        public Object getItem(int position) {
            return mParamInfoList.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public int getItemViewType(int position) {
            ParamInfoBean infoBean = (ParamInfoBean) getItem(position);
            return infoBean.getType();
        }

        @Override
        public View getView(int position, View convertView, ViewGroup viewGroup) {

            LayoutInflater layoutInflater = LayoutInflater.from(viewGroup.getContext());
            ParamInfoBean infoBean = (ParamInfoBean) getItem(position);
            if (0 == getItemViewType(position)) {
                convertView = layoutInflater.inflate(
                        R.layout.composite_sdk_param_item_layout, null);
                TextView titleTv = (TextView) convertView.findViewById(R.id.title_tv);
                titleTv.setText(infoBean.getKey() + &quot;:&quot;);

                TextView packNameTv = (TextView) convertView.findViewById(R.id.pack_name_tv);
                packNameTv.setText(infoBean.getPackName() + &quot; &quot;);
                if (infoBean.getPackName().isEmpty()) {
                    packNameTv.setVisibility(View.GONE);
                }

                TextView effectNameTv = (TextView) convertView.findViewById(R.id.effect_name_tv);
                effectNameTv.setText(infoBean.getName() + &quot; &quot;);
                if (infoBean.getName().isEmpty()) {
                    effectNameTv.setVisibility(View.GONE);
                }

                TextView valueTv = (TextView) convertView.findViewById(R.id.value_tv);
                valueTv.setText(infoBean.getValue());
            } else {
                convertView = layoutInflater.inflate(
                        R.layout.composite_sdk_param_item_seek_layout, null);
                TextView titleTv = (TextView) convertView.findViewById(R.id.title_tv);
                titleTv.setText(infoBean.getKey());

                TextView valueTv = (TextView) convertView.findViewById(R.id.value_tv);
                valueTv.setText(String.valueOf(infoBean.getValue()));

                GradientSeekBar seekBar = (GradientSeekBar) convertView.findViewById(R.id.value_seek_bar);
                seekBar.setValue(Math.round(Float.parseFloat(infoBean.getValue())) + 100, 200, 100);
            }

            return convertView;
        }
    }

    private static class ParamInfoBean extends BaseBean {
        private String key;
        private String packName;
        private String name;
        private int type;
        private String value;
        private float minValue;

        @Override
        protected boolean isValid(Object obj) {
            return true;
        }

        public String getKey() {
            return key;
        }

        public void setKey(String key) {
            this.key = key;
        }

        public String getPackName() {
            return packName;
        }

        public void setPackName(String packName) {
            this.packName = packName;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }

        public float getMinValue() {
            return minValue;
        }

        public void setMinValue(float minValue) {
            this.minValue = minValue;
        }

        public int getType() {
            return type;
        }

        public void setType(int type) {
            this.type = type;
        }
    }

    private List&lt;ParamInfoBean&gt; parseEffectInfo(String info) {
        try {

            JSONArray jsonArray = new JSONArray(info);
            List&lt;ParamInfoBean&gt; list = new ArrayList&lt;ParamInfoBean&gt;();
            for (int i = 0; i &lt; jsonArray.length(); i++) {
                JSONObject object = jsonArray.optJSONObject(i);
                ParamInfoBean infoBean = new ParamInfoBean();
                infoBean.setKey(getResources().getString(
                        ResourceHelper.getString(getActivity(), &quot;composite_sdk_param_&quot; + object.getString(&quot;key&quot;))));</sourceCode>
    <number>1874931574</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>37 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86771</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>112</start>
        <end>148</end>
      </range>
    </lineRanges>
    <primaryLineNumber>112</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/lib/DeviceInfo.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.lib</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>432916859</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/lib</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>37 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86772</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>150</start>
            <end>186</end>
          </range>
        </lineRanges>
        <primaryLineNumber>150</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/mix/RatingController.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.mix</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-407663815</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/mix</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>public static long getSnrFromIMEI(Context context) {
        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        String snrNumber = null;
        if (tm != null) {//没有Telephone 的设备 TelePhonyManager 会为null
            //手机IMEI码结构说明 
            //手机IMEI码由15-17位数字组成。 
            //第一部分 TAC，Type Allocation Code，类型分配码，由8位数字组成（早期是6位），是区分手机品牌和型号的编码，该代码由GSMA及其授权机构分配。其中TAC码前两位又是分配机构标识（Reporting Body Identifier），是授权IMEI码分配机构的代码，如01为美国CTIA，35为英国BABT，86为中国TAF。 
            //第二部分 FAC，Final Assembly Code，最终装配地代码，由2位数字构成，仅在早期TAC码为6位的手机中存在，所以TAC和FAC码合计一共8位数字。FAC码用于生产商内部区分生产地代码。 
            //第三部分 SNR，Serial Number，序列号，由第9位开始的6位数字组成，区分每部手机的生产序列号。 
            //第四部分 CD，Check Digit，验证码，由前14位数字通过Luhn算法计算得出。 
            //第五部分 SVN，Software Version Number，软件版本号，区分同型号手机出厂时使用的不同软件版本，仅在部分品牌的部分机型中存在。 
            //一般来说，由IMEI码中的TAC部分就可以得出手机的型号，但也有个别品牌不同型号的手机共用一个TAC码。同时，由
            //于一个TAC最多只能对应6位数字序列号，即100万台手机，所以诺基亚N95、苹果iPhone等热门机型有多个TAC号段。 本站查询IMEI码仅需要输入前15位，软件版本号不需要输入。
            snrNumber = tm.getDeviceId();
        } else {
            snrNumber = null;
        }

        long deviceNumber = -1;
        if (snrNumber != null) {
            try {
                //截取SNR部分，此字段分别较为平均
                if (snrNumber.length() &gt;= 14) {
                    snrNumber = snrNumber.substring(9, 14);
                }
                deviceNumber = Long.parseLong(snrNumber);
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }
        }

        if (deviceNumber == -1) {
            deviceNumber = new Random().nextLong();
        }
        return deviceNumber;
    }
}</sourceCode>
        <number>1874931611</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>public static long getSnrFromIMEI(Context context) {
        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        String snrNumber = null;
        if (tm != null) {//没有Telephone 的设备 TelePhonyManager 会为null
            //手机IMEI码结构说明 
            //手机IMEI码由15-17位数字组成。 
            //第一部分 TAC，Type Allocation Code，类型分配码，由8位数字组成（早期是6位），是区分手机品牌和型号的编码，该代码由GSMA及其授权机构分配。其中TAC码前两位又是分配机构标识（Reporting Body Identifier），是授权IMEI码分配机构的代码，如01为美国CTIA，35为英国BABT，86为中国TAF。 
            //第二部分 FAC，Final Assembly Code，最终装配地代码，由2位数字构成，仅在早期TAC码为6位的手机中存在，所以TAC和FAC码合计一共8位数字。FAC码用于生产商内部区分生产地代码。 
            //第三部分 SNR，Serial Number，序列号，由第9位开始的6位数字组成，区分每部手机的生产序列号。 
            //第四部分 CD，Check Digit，验证码，由前14位数字通过Luhn算法计算得出。 
            //第五部分 SVN，Software Version Number，软件版本号，区分同型号手机出厂时使用的不同软件版本，仅在部分品牌的部分机型中存在。 
            //一般来说，由IMEI码中的TAC部分就可以得出手机的型号，但也有个别品牌不同型号的手机共用一个TAC码。同时，由
            //于一个TAC最多只能对应6位数字序列号，即100万台手机，所以诺基亚N95、苹果iPhone等热门机型有多个TAC号段。 本站查询IMEI码仅需要输入前15位，软件版本号不需要输入。
            snrNumber = tm.getDeviceId();
        } else {
            snrNumber = null;
        }

        long deviceNumber = -1;
        if (snrNumber != null) {
            try {
                //截取SNR部分，此字段分别较为平均
                if (snrNumber.length() &gt;= 14) {
                    snrNumber = snrNumber.substring(9, 14);
                }
                deviceNumber = Long.parseLong(snrNumber);
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }
        }

        if (deviceNumber == -1) {
            deviceNumber = new Random().nextLong();
        }
        return deviceNumber;
    }
}</sourceCode>
    <number>1874931611</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[81]/links/dry"/>
  <dry reference="../dry[59]/links/dry"/>
  <dry reference="../dry[23]/links/dry"/>
  <dry reference="../dry[98]/links/dry"/>
  <dry reference="../dry[80]/links/dry"/>
  <dry reference="../dry[34]/links/dry"/>
  <dry reference="../dry[44]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>21 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86730</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>62</start>
        <end>82</end>
      </range>
    </lineRanges>
    <primaryLineNumber>62</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/option/feedback/Camera360FeedbackAdapter.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.option.feedback</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>984735228</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/option/feedback</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>21 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86731</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>120</start>
            <end>140</end>
          </range>
        </lineRanges>
        <primaryLineNumber>120</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/option/feedback/Camera360FeedbackAdapter.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.option.feedback</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>1571915412</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/option/feedback</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>if (datas != null) {
            IntArray intArray = new IntArray();
            int size = datas.size();
            long firstTime = -1;
            long lastTime = -1;
            for (int i = 0; i &lt; size; i++) {
                long time;
                if (datas.get(i).type == CMessage.TYPE_FEEDBACK
                        || datas.get(i).type == CMessage.TYPE_FEEDBACK_SEND) {
                    time = datas.get(i).feedbackData.getTime();
                } else {
                    time = datas.get(i).messageData.timestamp;
                }
                if (Math.abs(time - firstTime) &gt; 30 * 60 * 1000 &amp;&amp; Math.abs(time - lastTime) &gt; 5 * 60 * 1000) {
                    intArray.add(i);
                    firstTime = time;
                }
                lastTime = time;
            }
            dateArraryPosition = intArray.toArray(new int[intArray.size()]);
        }</sourceCode>
        <number>1874931592</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>if (datas != null) {
            IntArray intArray = new IntArray();
            int size = datas.size();
            long firstTime = -1;
            long lastTime = -1;
            for (int i = 0; i &lt; size; i++) {
                long time;
                if (datas.get(i).type == CMessage.TYPE_FEEDBACK
                        || datas.get(i).type == CMessage.TYPE_FEEDBACK_SEND) {
                    time = datas.get(i).feedbackData.getTime();
                } else {
                    time = datas.get(i).messageData.timestamp;
                }
                if (Math.abs(time - firstTime) &gt; 30 * 60 * 1000 &amp;&amp; Math.abs(time - lastTime) &gt; 5 * 60 * 1000) {
                    intArray.add(i);
                    firstTime = time;
                }
                lastTime = time;
            }
            dateArraryPosition = intArray.toArray(new int[intArray.size()]);
        }</sourceCode>
    <number>1874931592</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[68]/links/dry"/>
  <dry reference="../dry[84]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>17 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86790</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>36</start>
        <end>52</end>
      </range>
    </lineRanges>
    <primaryLineNumber>36</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/login/user/ApiPhoneLogin.java</fileName>
    <moduleName></moduleName>
    <packageName>com.pinguo.edit.sdk.login.user</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>1498600027</contextHashCode>
    <origin>dry</origin>
    <pathName>src/com/pinguo/edit/sdk/login/user</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>17 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86791</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>44</start>
            <end>60</end>
          </range>
        </lineRanges>
        <primaryLineNumber>44</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/com/pinguo/edit/sdk/login/user/ApiPhoneRegister.java</fileName>
        <moduleName></moduleName>
        <packageName>com.pinguo.edit.sdk.login.user</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-437681398</contextHashCode>
        <origin>dry</origin>
        <pathName>src/com/pinguo/edit/sdk/login/user</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>execute(new HttpStringRequest(Request.Method.POST, url) {
            @Override
            protected Map&lt;String, String&gt; getParams() throws AuthFailureError {
                Map&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();
                LoginConfig.prepareCommonParams(mContext, params);
                //邮箱跟密码参数
                params.put(&quot;mobile&quot;, mPhoneNumber);
                params.put(&quot;password&quot;, md5_password);
                //获取签名
                String sig = com.pinguo.Camera360Lib.utils.NetworkUtils.getSigByParamMap(params);
                params.put(&quot;sig&quot;, sig);
                return params;
            }

            @Override
            protected void onResponse(String s) {
                try {</sourceCode>
        <number>1874931620</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>execute(new HttpStringRequest(Request.Method.POST, url) {
            @Override
            protected Map&lt;String, String&gt; getParams() throws AuthFailureError {
                Map&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();
                LoginConfig.prepareCommonParams(mContext, params);
                //邮箱跟密码参数
                params.put(&quot;mobile&quot;, mPhoneNumber);
                params.put(&quot;password&quot;, md5_password);
                //获取签名
                String sig = com.pinguo.Camera360Lib.utils.NetworkUtils.getSigByParamMap(params);
                params.put(&quot;sig&quot;, sig);
                return params;
            }

            @Override
            protected void onResponse(String s) {
                try {</sourceCode>
    <number>1874931620</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[112]/links/dry"/>
  <dry reference="../dry[38]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>23 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86756</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>49</start>
        <end>71</end>
      </range>
    </lineRanges>
    <primaryLineNumber>49</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/view/VerticalLayout.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.view</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>963296744</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/view</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>23 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86755</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>44</start>
            <end>66</end>
          </range>
        </lineRanges>
        <primaryLineNumber>44</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/view/HorizontalLayout.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.view</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-2024186374</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/view</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>public HorizontalLayout(Context context, AttributeSet attrs) {
        super(context, attrs);

        LayoutInflater.from(context).inflate(ResourceHelper.getLayout(context, &quot;composite_sdk_horizontal_layout&quot;), this, true);
        layout = (LinearLayout)findViewById(
                ResourceHelper.getId(context, &quot;layout&quot;));
        scrollView = (EditPtrHorizontalScrollView) findViewById(
                ResourceHelper.getId(context, &quot;scroll_view&quot;));
        mScroller = new Scroller(getContext(), new DecelerateInterpolator());
    }

    public void addChildView(View view,
                             OnClickListener onClickListener,
                             boolean enableAnimation,
                             boolean isResizeByCount){

        ViewGroup.LayoutParams params = view.getLayoutParams();
        if (null == params) {
            params = new ViewGroup.LayoutParams(0, 0);
        }

        if (isResizeByCount) {
            params.width = (int) (getMeasuredWidth() / count);</sourceCode>
        <number>1874931604</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>public HorizontalLayout(Context context, AttributeSet attrs) {
        super(context, attrs);

        LayoutInflater.from(context).inflate(ResourceHelper.getLayout(context, &quot;composite_sdk_horizontal_layout&quot;), this, true);
        layout = (LinearLayout)findViewById(
                ResourceHelper.getId(context, &quot;layout&quot;));
        scrollView = (EditPtrHorizontalScrollView) findViewById(
                ResourceHelper.getId(context, &quot;scroll_view&quot;));
        mScroller = new Scroller(getContext(), new DecelerateInterpolator());
    }

    public void addChildView(View view,
                             OnClickListener onClickListener,
                             boolean enableAnimation,
                             boolean isResizeByCount){

        ViewGroup.LayoutParams params = view.getLayoutParams();
        if (null == params) {
            params = new ViewGroup.LayoutParams(0, 0);
        }

        if (isResizeByCount) {
            params.width = (int) (getMeasuredWidth() / count);</sourceCode>
    <number>1874931604</number>
    <isDerived>false</isDerived>
  </dry>
  <dry plugin="dry@2.40">
    <message>35 lines of duplicate code.</message>
    <priority>NORMAL</priority>
    <key>86725</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>412</start>
        <end>446</end>
      </range>
    </lineRanges>
    <primaryLineNumber>412</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/androidsdk/model/MakePhotoModel.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.androidsdk.model</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>679091105</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/androidsdk/model</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>35 lines of duplicate code.</message>
        <priority>NORMAL</priority>
        <key>86724</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>364</start>
            <end>398</end>
          </range>
        </lineRanges>
        <primaryLineNumber>364</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/androidsdk/model/MakePhotoModel.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.android.effect.group.sdk.androidsdk.model</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-2025562957</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/android/effect/group/sdk/androidsdk/model</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>tiltShiftMakePhotoModel.setMakeType(TiltShiftMakePhotoModel.MAKE_TYPE_PIC);
                    makePhotoModel = tiltShiftMakePhotoModel;

                } else {
                    makePhotoModel = new MakePhotoModel();
                }
                filterMakePhotoModelArray[i] = makePhotoModel;

                filterMakePhotoModelArray[i].setEffect(makePhotoModelArray[i].getEffect());

                Iterator&lt;ParamsModel&gt; paramsModelIterator = makePhotoModelArray[i].getParamsMap().values().iterator();
                while (paramsModelIterator.hasNext()) {
                    ParamsModel paramsModel = paramsModelIterator.next();
                    filterMakePhotoModelArray[i].setParams(paramsModel.effectKey, paramsModel.key, paramsModel.value);
                }

                Map&lt;String, String&gt; noEffectParamMap = makePhotoModelArray[i].getNoEffectParamMap();
                Iterator&lt;String&gt; noEffectIterator = noEffectParamMap.keySet().iterator();
                while (noEffectIterator.hasNext()) {
                    String key = noEffectIterator.next();
                    filterMakePhotoModelArray[i].setNoEffectParams(key, noEffectParamMap.get(key));
                }

                isStartToEndNull = false;
            }
        }

        if (isStartToEndNull) {
            return null;
        } else {
            return filterMakePhotoModelArray;
        }
    }

    public static MakePhotoModel[] getNewMakePhotoModelArrayWithFilter(MakePhotoModel[] makePhotoModelArray, HashSet&lt;Integer&gt; filterSet) {</sourceCode>
        <number>1874931589</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>tiltShiftMakePhotoModel.setMakeType(TiltShiftMakePhotoModel.MAKE_TYPE_PIC);
                    makePhotoModel = tiltShiftMakePhotoModel;

                } else {
                    makePhotoModel = new MakePhotoModel();
                }
                filterMakePhotoModelArray[i] = makePhotoModel;

                filterMakePhotoModelArray[i].setEffect(makePhotoModelArray[i].getEffect());

                Iterator&lt;ParamsModel&gt; paramsModelIterator = makePhotoModelArray[i].getParamsMap().values().iterator();
                while (paramsModelIterator.hasNext()) {
                    ParamsModel paramsModel = paramsModelIterator.next();
                    filterMakePhotoModelArray[i].setParams(paramsModel.effectKey, paramsModel.key, paramsModel.value);
                }

                Map&lt;String, String&gt; noEffectParamMap = makePhotoModelArray[i].getNoEffectParamMap();
                Iterator&lt;String&gt; noEffectIterator = noEffectParamMap.keySet().iterator();
                while (noEffectIterator.hasNext()) {
                    String key = noEffectIterator.next();
                    filterMakePhotoModelArray[i].setNoEffectParams(key, noEffectParamMap.get(key));
                }

                isStartToEndNull = false;
            }
        }

        if (isStartToEndNull) {
            return null;
        } else {
            return filterMakePhotoModelArray;
        }
    }

    public static MakePhotoModel[] getNewMakePhotoModelArrayWithFilter(MakePhotoModel[] makePhotoModelArray, HashSet&lt;Integer&gt; filterSet) {</sourceCode>
    <number>1874931589</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[46]/links/dry"/>
  <dry reference="../dry[115]/links/dry"/>
  <dry reference="../dry[118]/links/dry"/>
  <dry reference="../dry[7]/links/dry"/>
  <dry reference="../dry[22]/links/dry/links/dry[2]"/>
  <dry reference="../dry[103]/links/dry"/>
  <dry reference="../dry[9]/links/dry"/>
  <dry plugin="dry@2.40">
    <message>11 lines of duplicate code.</message>
    <priority>LOW</priority>
    <key>86796</key>
    <lineRanges>
      <range plugin="analysis-core@1.65">
        <start>462</start>
        <end>472</end>
      </range>
    </lineRanges>
    <primaryLineNumber>462</primaryLineNumber>
    <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/android/effect/group/sdk/group/menu/TiltShiftMenu.java</fileName>
    <moduleName></moduleName>
    <packageName>us.pinguo.android.effect.group.sdk.group.menu</packageName>
    <category></category>
    <type>Duplicate Code</type>
    <contextHashCode>437016491</contextHashCode>
    <origin>dry</origin>
    <pathName>src/us/pinguo/android/effect/group/sdk/group/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <links>
      <dry>
        <message>11 lines of duplicate code.</message>
        <priority>LOW</priority>
        <key>86797</key>
        <lineRanges>
          <range plugin="analysis-core@1.65">
            <start>1654</start>
            <end>1664</end>
          </range>
        </lineRanges>
        <primaryLineNumber>1654</primaryLineNumber>
        <fileName>/home/ci-android/.jenkins/jobs/Android-Common-Effect-SDK-CI/workspace/src/us/pinguo/sdk/BeautyController.java</fileName>
        <moduleName></moduleName>
        <packageName>us.pinguo.sdk</packageName>
        <category></category>
        <type>Duplicate Code</type>
        <contextHashCode>-1267565410</contextHashCode>
        <origin>dry</origin>
        <pathName>src/us/pinguo/sdk</pathName>
        <primaryColumnStart>0</primaryColumnStart>
        <primaryColumnEnd>0</primaryColumnEnd>
        <links>
          <dry reference="../../../.."/>
        </links>
        <sourceCode>TiltShiftLine.EFFECT_KEY_BLUR, TiltShiftLine.PARAM_KEY_LINE_PARAM2, 1);

            model.setParams(paramVecItems1[0].effectKey, paramVecItems1[0].key, paramVecItems1[0].value);
            model.setParams(paramVecItems2[0].effectKey, paramVecItems2[0].key, paramVecItems2[0].value);
            model.setParams(paramVecItems1[1].effectKey, paramVecItems1[1].key, paramVecItems1[1].value);
            model.setParams(paramVecItems2[1].effectKey, paramVecItems2[1].key, paramVecItems2[1].value);
        } else {
            return;
        }

        effectModeArray[getEffectModelArrayIndex()] = model;</sourceCode>
        <number>1874931623</number>
        <isDerived>false</isDerived>
      </dry>
    </links>
    <sourceCode>TiltShiftLine.EFFECT_KEY_BLUR, TiltShiftLine.PARAM_KEY_LINE_PARAM2, 1);

            model.setParams(paramVecItems1[0].effectKey, paramVecItems1[0].key, paramVecItems1[0].value);
            model.setParams(paramVecItems2[0].effectKey, paramVecItems2[0].key, paramVecItems2[0].value);
            model.setParams(paramVecItems1[1].effectKey, paramVecItems1[1].key, paramVecItems1[1].value);
            model.setParams(paramVecItems2[1].effectKey, paramVecItems2[1].key, paramVecItems2[1].value);
        } else {
            return;
        }

        effectModeArray[getEffectModelArrayIndex()] = model;</sourceCode>
    <number>1874931623</number>
    <isDerived>false</isDerived>
  </dry>
  <dry reference="../dry[127]/links/dry"/>
  <dry reference="../dry[60]/links/dry"/>
  <dry reference="../dry[102]/links/dry"/>
  <dry reference="../dry[83]/links/dry"/>
  <dry reference="../dry[101]/links/dry"/>
  <dry reference="../dry[37]/links/dry"/>
  <dry reference="../dry[85]/links/dry"/>
  <dry reference="../dry[65]/links/dry"/>
  <dry reference="../dry[24]/links/dry"/>
  <dry reference="../dry/links/dry"/>
  <dry reference="../dry[104]/links/dry"/>
  <dry reference="../dry[17]/links/dry"/>
  <dry reference="../dry[63]/links/dry"/>
  <dry reference="../dry[75]/links/dry"/>
  <dry reference="../dry[21]/links/dry"/>
  <dry reference="../dry[119]/links/dry"/>
  <dry reference="../dry[70]/links/dry"/>
  <dry reference="../dry[88]/links/dry"/>
  <dry reference="../dry[47]/links/dry"/>
  <dry reference="../dry[44]/links/dry/links/dry[2]"/>
  <dry reference="../dry[50]/links/dry"/>
  <dry reference="../dry[74]/links/dry"/>
</annotation-array>