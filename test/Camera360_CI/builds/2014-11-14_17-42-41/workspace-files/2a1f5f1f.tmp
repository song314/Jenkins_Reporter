package com.pinguo.edit.sdk.gallery;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Rect;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Toast;

import com.pinguo.edit.sdk.edit.PhotoCropActivity;
import com.pinguo.edit.sdk.gallery.data.DataManager;
import com.pinguo.edit.sdk.gallery.data.MediaItem;
import com.pinguo.edit.sdk.gallery.data.MediaSet;
import com.pinguo.edit.sdk.gallery.data.Path;
import com.pinguo.edit.sdk.gallery.ui.AlbumSlotRenderer;
import com.pinguo.edit.sdk.gallery.ui.FadeTexture;
import com.pinguo.edit.sdk.gallery.ui.GLCanvas;
import com.pinguo.edit.sdk.gallery.ui.GLRoot;
import com.pinguo.edit.sdk.gallery.ui.GLView;
import com.pinguo.edit.sdk.gallery.ui.PhotoFallbackEffect;
import com.pinguo.edit.sdk.gallery.ui.RelativePosition;
import com.pinguo.edit.sdk.gallery.ui.SlotView;
import com.pinguo.edit.sdk.gallery.ui.SynchronizedHandler;
import com.pinguo.edit.sdk.gallery.util.AlbumUtils;
import com.pinguo.edit.sdk.gallery.util.Future;
import com.pinguo.edit.sdk.gallery.util.GMLogger;
import com.pinguo.edit.sdk.gallery.util.Utils;
import com.pinguo.edit.sdk.utils.ConstantUtil;
import com.pinguo.edit.sdk.utils.ResourceHelper;

public class AlbumPage extends ActivityState implements MediaSet.SyncListener, OnClickListener {

    private static final String TAG = "AlbumPage";
    public static final String KEY_MEDIA_PATH = "media-path";
    public static final String KEY_PARENT_MEDIA_PATH = "parent-media-path";
    private static final int MSG_PICK_PHOTO = 1;
    private static final int BIT_LOADING_RELOAD = 1;
    private static final int BIT_LOADING_SYNC = 2;
    public static final String KEY_SET_CENTER = "set-center";
    public static final String KEY_RESUME_ANIMATION = "resume_animation";
    private static final int REQUEST_PHOTO = 2;
    private static final float USER_DISTANCE_METER = 0.3f;
    private MediaSet mMediaSet;
    private AlbumDataLoader mAlbumDataAdapter;
    private boolean mIsActive = false;
    private Handler mHandler;
    private int mLoadingBits = 0;
    private boolean mInitialSynced = false;
    private Future<Integer> mSyncTask = null;
    //
    private Path mMediaPath = null;
    private String mMediaSetName = "";
    //
    private SlotView mSlotView;
    private SlotView.Spec mSlotViewSpec;
    private AlbumSlotRenderer mAlbumSlotRenderer;
    private RelativePosition mOpenCenter = new RelativePosition();
    private float mUserDistance; // in pixel
    private final GLView mRootPane = new GLView() {

        private final float mMatrix[] = new float[16];

        @Override
        protected void renderBackground(GLCanvas view) {
            view.clearBuffer();
        }

        @Override
        protected void onLayout(boolean changed, int left, int top, int right,
                                int bottom) {
            int slotViewTop = 0;
            int slotViewBottom = bottom - top;
            int slotViewRight = right - left;
            mOpenCenter.setReferencePosition(0, slotViewTop);
            mSlotView.layout(0 + mSlotViewSpec.paddingLeft, slotViewTop
                    + mSlotViewSpec.paddingTop
                    + mSlotViewSpec.header_bar_height, slotViewRight
                    - mSlotViewSpec.paddingRight, slotViewBottom
                    - mSlotViewSpec.paddingBottom);
            AlbumUtils.setViewPointMatrix(mMatrix, (right - left) / 2,
                    (bottom - top) / 2, -mUserDistance);
        }

        @Override
        protected void render(GLCanvas canvas) {
            canvas.save(GLCanvas.SAVE_FLAG_MATRIX);
            canvas.multiplyMatrix(mMatrix, 0);
            super.render(canvas);
            if (mResumeEffect != null) {
                boolean more = mResumeEffect.draw(canvas);
                if (!more) {
                    mResumeEffect = null;
                    mAlbumSlotRenderer.setSlotFilter(null);
                }
                // We want to render one more time even when no more effect
                // required. So that the animated thumbnails could be draw
                // with declarations in super.render().
                invalidate();
            }
            canvas.restore();
        }
    };

    private class MyLoadingListener implements LoadingListener {

        @Override
        public void onLoadingStarted() {
            mActivity.setTitleText(
                    mMediaSetName + "(" + mMediaSet.getMediaItemCount()
                            + ")");
            setLoadingBit(BIT_LOADING_RELOAD);
        }

        @Override
        public void onLoadingFinished() {
            mActivity.setTitleText(
                    mMediaSetName + "(" + mMediaSet.getMediaItemCount()
                            + ")");
            clearLoadingBit(BIT_LOADING_RELOAD);
        }
    }

    private PhotoFallbackEffect mResumeEffect;
    private PhotoFallbackEffect.PositionProvider mPositionProvider = new PhotoFallbackEffect.PositionProvider() {

        @Override
        public Rect getPosition(int index) {
            Rect rect = mSlotView.getSlotRect(index);
            Rect bounds = mSlotView.bounds();
            rect.offset(bounds.left - mSlotView.getScrollX(), bounds.top
                    - mSlotView.getScrollY());
            return rect;
        }

        @Override
        public int getItemIndex(String path) {
            int start = mSlotView.getVisibleSlotStart();
            int end = mSlotView.getVisibleSlotEnd();
            for (int i = start; i < end; ++i) {
                MediaItem item = mAlbumDataAdapter.get(i);
                if (item != null && item.getPath().getPathId() == path)
                    return i;
            }
            return -1;
        }
    };

    @Override
    protected void onBackPressed() {
        onUpPressed();
    }

    private void onUpPressed() {
        if (mActivity.getStateManager().getStateCount() >= 1) {
            super.onBackPressed();
        }
    }

    private void onDown(int index) {
        mAlbumSlotRenderer.setPressedIndex(index);
    }

    private void onUp(boolean followedByLongPress) {
        if (followedByLongPress) {
            // Avoid showing press-up animations for long-press.
            mAlbumSlotRenderer.setPressedIndex(-1);
        } else {
            mAlbumSlotRenderer.setPressedUp();
        }
    }

    private void onSingleTapUp(int slotIndex) {
        if (!mIsActive)
            return;
        mAlbumSlotRenderer.setPressedIndex(slotIndex);
        mAlbumSlotRenderer.setPressedUp();
        mHandler.sendMessageDelayed(
                mHandler.obtainMessage(MSG_PICK_PHOTO, slotIndex, 0),
                FadeTexture.DURATION);
    }

    // 日期标签对应的checkbox控件响应
    private void onSingleTagTapUp(int tagIndex) {
        if (!mIsActive)
            return;
//        MediaSet.SortTag tag = mSlotView.getSortTags().get(tagIndex);
//        boolean checked = !tag.checked;
//        tag.checked = checked;
//        mSlotView.invalidate();
    }

    public void onLongTap(int slotIndex) {
        MediaItem item = mAlbumDataAdapter.get(slotIndex);
        if (item == null)
            return;
        // do nothing of long tap
        mSlotView.invalidate();
    }

    private void pickPhoto(int slotIndex) {
        if (!mIsActive)
            return;
        MediaItem item = mAlbumDataAdapter.get(slotIndex);
        if (item == null)
            return;

        startCrop(mActivity.getAndroidContext(), item.getPath().getPathId());
    }

    protected void startCrop(Context context, String path) {
        //TODO 调起编辑页面
        Intent intent = new Intent(context, PhotoCropActivity.class);
        intent.putExtra(ConstantUtil.PHOTO_PATH, path);
        context.startActivity(intent);
    }

    protected void onConfigurationChanged(Configuration config) {
        return;
    }

    private void initializeViews() {
        UIConfig.AlbumPage config = UIConfig.AlbumPage.get((Context) mActivity);
        mSlotViewSpec = UIConfig.AlbumPage.get((Context) mActivity).slotViewSpec;
        mSlotView = new SlotView(mActivity, mSlotViewSpec,
                SlotView.SLOT_TYPE_CONTRACT_SLOT);
        mAlbumSlotRenderer = new AlbumSlotRenderer(mActivity, mSlotView, config.sortTagSpec);
        mSlotView.setSlotRenderer(mAlbumSlotRenderer);
        mRootPane.addComponent(mSlotView);
        mSlotView.setListener(new SlotView.SimpleListener() {

            @Override
            public void onDown(int index) {
                AlbumPage.this.onDown(index);
            }

            @Override
            public void onUp(boolean followedByLongPress) {
                AlbumPage.this.onUp(followedByLongPress);
            }

            @Override
            public void onSingleTapUp(int slotIndex) {
                AlbumPage.this.onSingleTapUp(slotIndex);
            }

            @Override
            public void onSingleTagTapUp(int tagIndex) {
                AlbumPage.this.onSingleTagTapUp(tagIndex);
            }

            @Override
            public void onLongTap(int slotIndex) {
                AlbumPage.this.onLongTap(slotIndex);
            }
        });
    }

    protected void initializeData(Bundle data) {
        mMediaPath = new Path(data.getInt(DataManager.MEDIA_TYPE),
                data.getString(DataManager.MEDIA_PATH_ID));
        mMediaSetName = data.getString(DataManager.MEDIA_NAME);
        mMediaSet = mActivity.getDataManager().getMediaSet(mMediaPath);
        mAlbumDataAdapter = new AlbumDataLoader(mActivity, mMediaSet);
        mAlbumDataAdapter.setLoadingListener(new MyLoadingListener());
        mAlbumSlotRenderer.setModel(mAlbumDataAdapter);
    }

    @Override
    protected void onCreate(Bundle data, Bundle restoreState) {
        mUserDistance = AlbumUtils.meterToPixel(USER_DISTANCE_METER);
        initializeViews();
        initializeData(data);
        if (restoreState == null && data != null) {
            int[] center = data.getIntArray(KEY_SET_CENTER);
            if (center != null) {
                mOpenCenter.setAbsolutePosition(center[0], center[1]);
                mSlotView.startScatteringAnimation(mOpenCenter);
            }
        }
        //
        mHandler = new SynchronizedHandler(mActivity.getGLRoot()) {

            @Override
            public void handleMessage(Message message) {
                switch (message.what) {
                    case MSG_PICK_PHOTO: {
                        pickPhoto(message.arg1);
                        break;
                    }
                    default:
                        throw new AssertionError(message.what);
                }
            }
        };
    }

    public void invalidate() {
        mRootPane.invalidate();
    }

    private void setLoadingBit(int loadTaskBit) {
        mLoadingBits |= loadTaskBit;
    }

    private void clearLoadingBit(int loadTaskBit) {
        mLoadingBits &= ~loadTaskBit;
        if (mLoadingBits == 0 && mIsActive) {
            if (mAlbumDataAdapter.size() == 0) {
                Toast.makeText((Context) mActivity,
                        ResourceHelper.getIdByName(mActivity.getAndroidContext(),
                                "string", "composite_sdk_empty_album"),
                        Toast.LENGTH_LONG).show();
                mActivity.getStateManager().finishState(AlbumPage.this);
            }
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        mIsActive = true;
        mResumeEffect = mActivity.getTransitionStore()
                .get(KEY_RESUME_ANIMATION);
        if (mResumeEffect != null) {
            mAlbumSlotRenderer.setSlotFilter(mResumeEffect);
            mResumeEffect.setPositionProvider(mPositionProvider);
            mResumeEffect.start();
        }
        //
        setContentPane(mRootPane);
        setLoadingBit(BIT_LOADING_RELOAD);
        mAlbumDataAdapter.resume();
        mAlbumSlotRenderer.resume();
        if (!mInitialSynced) {
            setLoadingBit(BIT_LOADING_SYNC);
            mSyncTask = mMediaSet.requestSync(this);
        }
    }

    @Override
    protected void onPause() {
        super.onPause();
        mIsActive = false;
        mAlbumSlotRenderer.setSlotFilter(null);
        mAlbumDataAdapter.pause();
        mAlbumSlotRenderer.pause();
        //
        if (mSyncTask != null) {
            mSyncTask.cancel();
            mSyncTask = null;
            clearLoadingBit(BIT_LOADING_SYNC);
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (mAlbumDataAdapter != null) {
            mAlbumDataAdapter.setLoadingListener(null);
        }
    }

    @Override
    public void onSyncDone(MediaSet mediaSet, final int resultCode) {
        GMLogger.d(TAG, "onSyncDone: " + Utils.maskDebugInfo(mediaSet.getName())
                + " result=" + resultCode);
        ((Activity) mActivity).runOnUiThread(new Runnable() {

            @Override
            public void run() {
                GLRoot root = mActivity.getGLRoot();
                root.lockRenderThread();
                try {
                    if (resultCode == MediaSet.SYNC_RESULT_SUCCESS) {
                        mInitialSynced = true;
                    }
                    clearLoadingBit(BIT_LOADING_SYNC);
                    if (resultCode == MediaSet.SYNC_RESULT_ERROR && mIsActive
                            && (mAlbumDataAdapter.size() == 0)) {
                        // show error toast only if the album is empty
                        Toast.makeText((Context) mActivity,
                                ResourceHelper.getIdByName(mActivity.getAndroidContext(),
                                        "string", "composite_sdk_sync_album_error"), Toast.LENGTH_LONG)
                                .show();
                    }
                } finally {
                    root.unlockRenderThread();
                }
            }
        });
    }

    @Override
    public void onClick(View v) {
        mActivity.getGLRoot().lockRenderThread();
        onUpPressed();
        mActivity.getGLRoot().unlockRenderThread();
    }
}
