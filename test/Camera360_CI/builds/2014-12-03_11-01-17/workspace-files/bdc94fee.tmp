package us.pinguo.android.effect.group.sdk.view;

import android.content.Context;
import android.content.SharedPreferences;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;
import android.widget.LinearLayout;

import com.pinguo.edit.sdk.utils.ResourceHelper;
import com.pinguo.edit.sdk.utils.ToolUtils;

import us.pinguo.android.effect.group.sdk.PGCompositeSDKApi;

/**
 * Created by pinguo on 14-6-28.
 */
public class EffectMenuHorizontalLayout extends LinearLayout implements View.OnClickListener {

    private LinearLayout layout;
    private View selectedView;
    private OnClickListener textClickListener;


    public EffectMenuHorizontalLayout(Context context) {
        super(context);
        init(context);

    }

    public EffectMenuHorizontalLayout(Context context, AttributeSet attrs) {
        super(context, attrs);
        init(context);

    }

    private void init(Context context) {
        LayoutInflater.from(context).inflate(ResourceHelper.getLayout(context, "composite_sdk_effects_horizontal_layout"), this, true);
        layout = (LinearLayout) findViewById(
                ResourceHelper.getId(context, "layout"));

        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        DisplayMetrics dm = new DisplayMetrics();
        wm.getDefaultDisplay().getMetrics(dm);
        if (dm.widthPixels < 480) {
            layout.findViewWithTag("tiltshift").setVisibility(View.GONE);
        }

        SharedPreferences preferences = context.getSharedPreferences(
                PGCompositeSDKApi.PG_EDIT_SDK_DATA_INIT, Context.MODE_PRIVATE);
        boolean shaderCheckResult = preferences.getBoolean(
                PGCompositeSDKApi.PG_EDIT_SDK_SHADER_CHECK_RESULT, true);
        if (!shaderCheckResult) {
            layout.findViewWithTag("discoloration").setVisibility(View.GONE);
            layout.findViewWithTag("colors").setVisibility(View.GONE);
        }

        int visCount = 0;
        int viewWidths = 0;
        for (int i = 0;
             i < layout.getChildCount();
             i++) {
            View childView = layout.getChildAt(i);
            if (childView.getVisibility() == View.VISIBLE) {
                viewWidths += ToolUtils.getViewWidth(childView);
                visCount++;
            }

            layout.getChildAt(i).setOnClickListener(this);
        }


        float marginLeft = getResources().getDimension(ResourceHelper.getDimen(getContext(), "composite_sdk_effectmenus_margin_left"));
        int allWidths = Math.round(viewWidths + (visCount + 1) * marginLeft); //＋1是因为要加一个marginRight
        if (dm.widthPixels > allWidths) {
            int margin = Math.round((float) (dm.widthPixels - viewWidths) / (visCount + 1));
            for (int i = 0;
                 i < layout.getChildCount();
                 i++) {
                View childView = layout.getChildAt(i);
                childView.setPadding(margin, childView.getPaddingTop(), childView.getPaddingRight(), childView.getPaddingBottom());

            }

        } else {
            boolean isSetRightMargin = false;
            for (int i = layout.getChildCount() - 1;
                 i >= 0;
                 i--) {
                View childView = layout.getChildAt(i);
                if (childView.getVisibility() == View.VISIBLE) {
                    int rightMargin = childView.getPaddingRight();
                    if (!isSetRightMargin) {
                        isSetRightMargin = true;
                        rightMargin = Math.round(marginLeft);
                    }

                    childView.setPadding(Math.round(marginLeft), childView.getPaddingTop(), rightMargin, childView.getPaddingBottom());
                }
            }

        }
    }

    public void setTextClickListener(OnClickListener clickListener) {
        this.textClickListener = clickListener;
    }

    @Override
    public void onClick(View v) {
        if (selectedView != null) {
            selectedView.setSelected(false);
        }

        v.setSelected(true);
        selectedView = v;

        if (textClickListener != null) {
            textClickListener.onClick(v);
        }
    }

    public void clickFirst(int index) {
        onClick(layout.getChildAt(index));
    }


    public void setSelectedView(View selectedView) {
        this.selectedView = selectedView;
    }
}
