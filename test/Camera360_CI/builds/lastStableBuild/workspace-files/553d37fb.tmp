package com.pinguo.edit.sdk.login.lib.util;

import android.app.Activity;
import android.app.ActivityManager;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Environment;
import android.os.StatFs;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.view.OrientationEventListener;
import android.view.Surface;

import com.pinguo.edit.sdk.MainApplication;

import java.io.File;
import java.io.FileFilter;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Created by huowaa on 13-7-13.
 */
public class SystemUtils {

    // Orientation hysteresis amount used in rounding, in degrees
    public static final int ORIENTATION_HYSTERESIS = 20;

    public static String getIMSI(Context context) {
        TelephonyManager telMgr = (TelephonyManager) context
                .getSystemService(Context.TELEPHONY_SERVICE);
        // 部分设备没有电话模块，TelephonyManager为空
        if (null == telMgr) {
            return "";
        }

        String simOperator = telMgr.getSimOperator();
        if (null == simOperator) {
            return "";
        }

        return simOperator.trim();
    }

    public static String getMCC(Context context) {
        String imsiStr = getIMSI(context);
        String mcc = "";
        if (imsiStr != null && imsiStr.length() >= 3) {
            mcc = imsiStr.substring(0, 3);
        }

        return mcc;
    }

    public static String getMNC(Context context) {
        String imsiStr = getIMSI(context);
        String mnc = "";
        if (imsiStr != null && imsiStr.length() >= 5) {
            mnc = imsiStr.substring(3, 5);
        }

        return mnc;
    }

    /**
     * 是否是中国大陆用户
     * 1、MCC = 460 or
     * 2、Locale = zh_CN
     * <p/>
     * IMSI共有15位，其结构如下：
     * MCC+MNC+MIN
     * MCC：Mobile Country Code，移动国家码，共3位，中国为460;
     * MNC:Mobile Network Code，移动网络码，共2位，电信03，移动02，联通GSM 01，一个典型的IMSI号码为460030912121001;
     *
     * @return
     */
    public static boolean isMainLandUser(Context context) {
        String imsiStr = getIMSI(context);
        String mcc = "";
        if (imsiStr != null && imsiStr.length() >= 3) {
            mcc = imsiStr.substring(0, 3);
        }

        if (mcc.equals("460")
                || Locale.getDefault().equals(Locale.SIMPLIFIED_CHINESE)) {
            return true;
        } else {
            return false;
        }
    }

    public static int roundOrientation(int orientation, int orientationHistory) {
        boolean changeOrientation = false;
        if (orientationHistory == OrientationEventListener.ORIENTATION_UNKNOWN) {
            changeOrientation = true;
        } else {
            int dist = Math.abs(orientation - orientationHistory);
            dist = Math.min(dist, 360 - dist);
            changeOrientation = (dist >= 45 + ORIENTATION_HYSTERESIS);
        }
        if (changeOrientation) {
            return ((orientation + 45) / 90 * 90) % 360;
        }
        return orientationHistory;
    }

    public static int getDisplayRotation(Activity activity) {
        int rotation = activity.getWindowManager().getDefaultDisplay()
                .getRotation();
        switch (rotation) {
            case Surface.ROTATION_0:
                return 0;
            case Surface.ROTATION_90:
                return 90;
            case Surface.ROTATION_180:
                return 180;
            case Surface.ROTATION_270:
                return 270;
        }
        return 0;
    }

    /**
     * 是否有网.
     *
     * @param context
     * @return
     */
    public static boolean hasNet(Context context) {

        boolean b = false;
        ConnectivityManager mConnectivity = (ConnectivityManager) context
                .getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo info = mConnectivity.getActiveNetworkInfo();
        if (info != null && info.isAvailable()) { // 注意，这个判断一定要的哦，要不然会出错
            b = true;
        }
        return b;
    }

    /**
     * 网络名称.
     *
     * @param context
     * @return
     * @author lizhipeng
     */
    public static String getNetworkType(Context context) {

        ConnectivityManager connectivityManager = (ConnectivityManager) context
                .getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetInfo = connectivityManager.getActiveNetworkInfo();
        if (activeNetInfo != null) {
            if (activeNetInfo.isAvailable()) {
                if (activeNetInfo.getExtraInfo() == null) {
                    return "wifi";
                }
                return activeNetInfo.getExtraInfo();
            }
        }
        return null;
    }

    /**
     * 得到语言国家.
     *
     * @return
     */
    public static String getLocationInfo() {

        String language = Locale.getDefault().getLanguage();
        String country = Locale.getDefault().getCountry();
        return language + "-" + country;
    }

    /**
     * 是否是中文
     *
     * @return
     */
    public static boolean isZh() {
        return Locale.getDefault().getLanguage().toLowerCase(Locale.ENGLISH).equals(Locale.CHINESE.toString().toLowerCase(Locale.ENGLISH));
    }

    public static String getIMEI(Context context) {
        TelephonyManager tm = (TelephonyManager) context
                .getSystemService(Context.TELEPHONY_SERVICE);
        String imei = tm.getDeviceId();
        if (imei == null) {
            return "";
        }
        return imei;
    }

    /**
     * @param context     地球人都知道
     * @param packageName 需要检查的应用程序package名，如 com.google.android.gm ，已封装常量 PKG_GOOGLE_PLAY
     * @return
     * @author tangsong
     */
    public static boolean checkApkExist(Context context, String packageName) {
        if (packageName == null || "".equals(packageName)) {
            return false;
        }

        if (null == context.getPackageManager().getLaunchIntentForPackage(packageName)) {
            return false;
        }

        try {
            context.getPackageManager().getApplicationInfo(packageName, PackageManager.GET_UNINSTALLED_PACKAGES);
            return true;
        } catch (PackageManager.NameNotFoundException e) {
            return false;
        }
    }

    public static String getCurProcessName(Context context) {
        int pid = android.os.Process.myPid();
        ActivityManager mActivityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
        for (ActivityManager.RunningAppProcessInfo appProcess : mActivityManager.getRunningAppProcesses()) {
            if (appProcess.pid == pid) {
                return appProcess.processName;
            }
        }
        return null;
    }

    /**
     * 获取CPU核心数
     *
     * @return
     */
    public static int getCpuCoresNum() {
        // Private Class to display only CPU devices in the directory listing
        class CpuFilter implements FileFilter {
            @Override
            public boolean accept(File pathname) {
                // Check if filename is "cpu", followed by a single digit number
                return Pattern.matches("cpu[0-9]", pathname.getName());
            }
        }
        try {
            // Get directory containing CPU info
            File dir = new File("/sys/devices/system/cpu/");
            // Filter to only list the devices we care about
            File[] files = dir.listFiles(new CpuFilter());
            // Return the number of cores (virtual CPU devices)
            return files.length;
        } catch (Exception e) {
            e.printStackTrace();
            // Default to return 1 core
            return 1;
        }
    }


    // --------------------------------- 储存空间相关

    /**
     * 计算剩余空间
     *
     * @param path
     * @return
     */
    private static long getAvailableSize(String path) {
        StatFs fileStats = new StatFs(path);
        fileStats.restat(path);
        return (long) fileStats.getAvailableBlocks() * fileStats.getBlockSize(); // 注意与fileStats.getFreeBlocks()的区别
    }

    /**
     * 计算SD卡的剩余空间
     *
     * @return 剩余空间
     */
    public static long getSDAvailableSize() {
        if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
            return getAvailableSize(Environment.getExternalStorageDirectory().getAbsolutePath());
        }

        return 0;
    }

    /**
     * 计算系统的剩余空间
     *
     * @return 剩余空间
     */
    public static long getSystemAvailableSize() {
        // context.getFilesDir().getAbsolutePath();
        return getAvailableSize("/data");
    }

    /**
     * SD存在计算sd是否满足needSize，sd卡不存在计算手机内部空间是否满足needSize
     */
    public static boolean hasEnoughMemory(long needSize) {
        if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
            return getSDAvailableSize() > needSize;
        } else {
            return getSystemAvailableSize() > needSize;
        }
    }

    /**
     * 检查是否是正确的email格式
     *
     * @param email
     * @return
     */
    public static boolean checkEmailFormat(String email) {
        if (TextUtils.isEmpty(email)) {
            return false;
        }
        String reg = "^[0-9a-z_-][_.0-9a-z-]{0,31}@([0-9a-z][0-9a-z-]{0,30}\\.){1,4}[a-z]{2,4}$";
        Pattern pattern = Pattern.compile(reg, Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(email);
        return matcher.matches();
    }

    /**
     * 检查是否是正确的大陆手机号
     * 大陆手机号的格式判断：以1开头，后面跟10为数字
     *
     * @param phoneNumber
     * @return
     */
    public static boolean checkPhoneNumber(String phoneNumber) {
        if (TextUtils.isEmpty(phoneNumber)) {
            return false;
        }
        String reg = "^1[0-9]{10}$";
        Pattern pattern = Pattern.compile(reg);
        Matcher matcher = pattern.matcher(phoneNumber);
        return matcher.matches();
    }

    /**
     * 获得APP版本信息（versionCode）
     *
     * @return
     */
    public static String getVersionName() {
        PackageInfo manager = null;
        try {
            Context context = MainApplication.getAppContext();
            manager = context.getPackageManager().getPackageInfo(context.getPackageName(),
                    PackageManager.GET_CONFIGURATIONS);
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }

        if (manager != null) {
            return String.valueOf(manager.versionName);
        } else {
            return "";
        }
    }
}
