package com.pinguo.edit.sdk.utils;

import android.content.Context;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;

import com.pinguo.Camera360Lib.log.GLogger;
import com.pinguo.Camera360Lib.utils.FileUtils;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

/**
 * Created by yingyu on 2/12/14.
 */
public class AssetsUtils {
    private static final String TAG = AssetsUtils.class.getSimpleName();
    private static final int BUFFER_SIZE = 8 * 1024;

    /**
     * 拷贝文件到/data/data/packageName/files/filename
     *
     * @param context
     * @param assetsFileName
     * @param filename       支持aaa或者aaaa/bbb格式
     * @throws java.io.IOException
     * @author liubo
     */
    public static void copyAssetsToDataFiles(Context context, String assetsFileName, String filename) throws IOException {
        AssetManager am = context.getAssets();
        BufferedInputStream in = null;
        boolean havaFolder = (filename.indexOf('/') != -1);
        File file = null;
        if (havaFolder) {
            file = new File(context.getFilesDir().getAbsolutePath() + File.separator + filename);
            File parent = file.getParentFile();
            if (!FileUtils.checkFolder(parent)) {
                throw new IOException("Create Folder(" + parent.getAbsolutePath() + ") Failed!");
            }
        }

        try {
            GLogger.i("Test", "Copy files from:" + assetsFileName + " to:" + filename);
            in = new BufferedInputStream(am.open(assetsFileName, AssetManager.ACCESS_BUFFER));
            BufferedOutputStream out = null;
            try {
                if (havaFolder) {
                    out = new BufferedOutputStream(new FileOutputStream(file));
                } else {
                    out = new BufferedOutputStream(context.openFileOutput(filename, Context.MODE_PRIVATE));
                }
                byte[] buffer = new byte[BUFFER_SIZE];
                int len = -1;
                while ((len = in.read(buffer)) != -1) {
                    out.write(buffer, 0, len);
                }
                out.flush();
            } finally {
                FileUtils.close(out);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            FileUtils.close(in);
        }
    }

    public static void copyAssetsFileTo(Context context, String assetsFileName, File descFile) throws IOException {
        GLogger.i(TAG, "copy from asserts: " + assetsFileName + " to: " + descFile.getAbsolutePath());
        AssetManager am = context.getAssets();
        BufferedInputStream in = null;

        File parent = descFile.getParentFile();
        if (null != parent) {
            if (!FileUtils.checkFolder(parent)) {
                throw new IOException("Create Folder(" + parent.getAbsolutePath() + ") Failed!");
            }
        }

        try {
            in = new BufferedInputStream(am.open(assetsFileName, AssetManager.ACCESS_BUFFER));
            BufferedOutputStream out = null;
            try {
                out = new BufferedOutputStream(new FileOutputStream(descFile));

                byte[] buffer = new byte[BUFFER_SIZE];
                int len = -1;
                while ((len = in.read(buffer)) != -1) {
                    out.write(buffer, 0, len);
                }
                out.flush();
            } finally {
                FileUtils.close(out);
            }
        } catch (Exception e) {
            GLogger.e(TAG, e);
        } finally {
            FileUtils.close(in);
        }
    }

    /**
     * 取得Assert的文件内容
     *
     * @param context
     * @param fileName
     * @return
     * @throws java.io.IOException
     */
    public static String getAssetsFileContent(Context context, String fileName) throws IOException {
        byte[] bytes = getAssetsFileData(context, fileName);
        return new String(bytes, "UTF-8");
    }

    /**
     * 取得Assets的文件内容，针对中文等双字节码，分批次读取会产生中文乱码
     *
     * @param context
     * @param fileName
     * @return
     */
    public static String getAssetsFileContentW(Context context, String fileName) {
        String content = "";
        try {
            StringBuffer sb = new StringBuffer();
            InputStream is = context.getAssets().open(fileName);
            int len = -1;
            byte[] buf = new byte[is.available()];
            while ((len = is.read(buf)) != -1) {
                sb.append(new String(buf, 0, len, "UTF-8"));
            }
            is.close();

            content = sb.toString();
        } catch (IOException e) {
            GLogger.e(TAG, e);
        }

        return content;
    }

    /**
     * @param fileName 文件名
     * @return byte[]
     * @Description 从assets文件目录下获取文件数据.
     * @author liubo
     */
    public static byte[] getAssetsFileData(Context context, String fileName) throws IOException {
        AssetManager am = context.getAssets();
        BufferedInputStream in = null;
        try {
            in = new BufferedInputStream(am.open(fileName, AssetManager.ACCESS_BUFFER));
            return FileUtils.getStreamData(in);
        } finally {
            FileUtils.close(in);
        }
    }

    /**
     * @param
     * @return Bitmap
     * @Description 从assets文件目录下获取文件, 返回bitmap.
     * @author zengchuanmeng
     */
    public static Bitmap getBitmapFromAssetsFileDate(Context context, String fileName) throws IOException {
        AssetManager am = context.getAssets();
        BufferedInputStream in = null;
        try {
            in = new BufferedInputStream(am.open(fileName, AssetManager.ACCESS_BUFFER));
            return BitmapFactory.decodeStream(in);
        } finally {
            FileUtils.close(in);
        }

    }

    public static void copyImageFromAsset(Context context, String fileName, String filePath) {

        File fileDir = new File(filePath);
        if (!fileDir.exists()) {
            if (!fileDir.mkdirs()) {
                GLogger.e(TAG, "Create dir failed!");
            }
        }

        String wholePath;
        if (filePath.endsWith("/")) {
            wholePath = filePath + fileName;
        } else {
            wholePath = filePath + "/" + fileName;
        }

        File file = new File(wholePath);

        if (file.exists()) {
            // 如果文件存在，检测是否复制成功
            BitmapFactory.Options myOptions = new BitmapFactory.Options();
            myOptions.inJustDecodeBounds = true;
            BitmapFactory.decodeFile(wholePath, myOptions);
            if (myOptions.outWidth > 0 && myOptions.outHeight > 0) {
                return;
            }
        }

        // 若文件不存在，则copy
        AssetManager am = context.getAssets();
        InputStream is;
        FileOutputStream fos;
        try {
            is = am.open(fileName);
            fos = new FileOutputStream(wholePath);

            int bytesRead;
            byte[] buf = new byte[4 * 1024];
            while ((bytesRead = is.read(buf)) != -1) {
                fos.write(buf, 0, bytesRead);
            }

            fos.flush();
            fos.close();
            is.close();

        } catch (Exception e) {
            e.printStackTrace();
            return;
        }
    }
}
