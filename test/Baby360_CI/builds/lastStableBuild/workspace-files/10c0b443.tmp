package com.pinguo.mix;


import android.app.Activity;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.Button;

import com.pinguo.edit.sdk.R;
import com.umeng.analytics.MobclickAgent;

import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;

public class CrashReportActivity extends Activity {

    private Button mFeedBackBtn;

    private String exception;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.layout_bug_report);

        mFeedBackBtn = (Button) findViewById(R.id.bug_btn_feed_back);
        mFeedBackBtn.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                finish();
            }
        });

        try {
            exception = exception((Throwable) getIntent().getExtras().get("Stacktrace"));
        } catch (IOException e) {
            e.printStackTrace();
        }

        new Thread() {
            @Override
            public void run() {
                super.run();

                MobclickAgent.reportError(getApplicationContext(), exception);

                try {
                    long time = System.currentTimeMillis();
                    store(buildExceptionData(), time + ".err");
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }.start();
    }

    private void storeException(long time) {
        String shell = "logcat -v time";
        try {
            Process process = Runtime.getRuntime().exec(shell);
            InputStream inputStream = process.getInputStream();
            File dir = getApplicationContext().getExternalFilesDir(null);
            if (null == dir) {
                return;
            }

            File file = new File(dir, time + "_logcat.txt");

            byte[] buffer = new byte[1024];
            int bytesLeft = 5 * 1024 * 1024;
            try {
                FileOutputStream fos = new FileOutputStream(file);
                try {
                    while (bytesLeft > 0) {
                        int read = inputStream.read(buffer, 0, Math.min(bytesLeft,
                                buffer.length));
                        if (read == -1) {
                            throw new EOFException("Unexpected end of data");
                        }
                        fos.write(buffer, 0, read);
                        bytesLeft -= read;
                    }
                } finally {
                    fos.close();
                }
            } finally {
                inputStream.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String exception(Throwable t) throws IOException {

        if (t == null) {
            return null;
        }

        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        try {
            t.printStackTrace(new PrintStream(stream));
        } finally {
            stream.close();
        }

        return stream.toString("UTF-8");
    }

    private Map<String, String> buildExceptionData() {

        PackageInfo packageInfo = null;
        try {
            PackageManager packageManager = getPackageManager();
            packageInfo = packageManager.getPackageInfo(getPackageName(), PackageManager.GET_CONFIGURATIONS);
            ;
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }

        String versionName = "";
        String versionCode = "";
        if (null != packageInfo) {
            versionName = packageInfo.versionName;
            versionCode = String.valueOf(packageInfo.versionCode);
        }

        Map<String, String> values = new HashMap<String, String>();
        values.put("VERSION_NAME", versionName);
        values.put("VERSION_CODE", versionCode);
        values.put("PHONE_MODEL", Build.MODEL);
        values.put("PHONE_ROM", Build.VERSION.RELEASE);
        values.put("FINGERPRINT", Build.FINGERPRINT);
        values.put("SDK_VERSION", String.valueOf(Build.VERSION.SDK_INT));
        values.put("STACK_TRACE", exception);

        return values;
    }

    private void store(Map<String, String> values, String fileName) throws IOException {

        File dir = getApplicationContext().getExternalFilesDir(null);
        if (null == dir) {
            return;
        }

        File file = new File(dir, fileName);
        OutputStream out = null;
        try {
            if (null != file) {
                out = new FileOutputStream(file);
            }
        } catch (FileNotFoundException e) {
            return;
        }

        OutputStreamWriter writer = null;
        try {
            final StringBuilder buffer = new StringBuilder(200);
            writer = new OutputStreamWriter(out, "ISO8859_1"); //$NON-NLS-1$

            for (final Map.Entry<String, String> entry : values.entrySet()) {
                final String key = entry.getKey().toString();
                dumpString(buffer, key, true);
                buffer.append('=');
                dumpString(buffer, entry.getValue(), false);
                buffer.append(LINE_SEPARATOR);
                writer.write(buffer.toString());
                buffer.setLength(0);
            }
            writer.flush();
        } finally {
            if (null != writer) {
                writer.close();
            }
            out.close();
        }
    }

    private static final String LINE_SEPARATOR = "\n";

    private void dumpString(StringBuilder buffer, String string, boolean key) {
        int i = 0;
        if (!key && i < string.length() && string.charAt(i) == ' ') {
            buffer.append("\\ "); //$NON-NLS-1$
            i++;
        }

        for (;
             i < string.length();
             i++) {
            char ch = string.charAt(i);
            switch (ch) {
                case '\t':
                    buffer.append("\\t"); //$NON-NLS-1$
                    break;
                case '\n':
                    buffer.append("\\n"); //$NON-NLS-1$
                    break;
                case '\f':
                    buffer.append("\\f"); //$NON-NLS-1$
                    break;
                case '\r':
                    buffer.append("\\r"); //$NON-NLS-1$
                    break;
                default:
                    if ("\\#!=:".indexOf(ch) >= 0 || (key && ch == ' ')) {
                        buffer.append('\\');
                    }
                    if (ch >= ' ' && ch <= '~') {
                        buffer.append(ch);
                    } else {
                        final String hex = Integer.toHexString(ch);
                        buffer.append("\\u"); //$NON-NLS-1$
                        for (int j = 0;
                             j < 4 - hex.length();
                             j++) {
                            buffer.append("0"); //$NON-NLS-1$
                        }
                        buffer.append(hex);
                    }
            }
        }
    }
}