package com.pinguo.mix;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.ConnectivityManager;
import android.net.Uri;
import android.os.Bundle;

import com.pinguo.Camera360Lib.utils.NetworkUtils;
import com.pinguo.Camera360Lib.utils.SystemUtils;
import com.pinguo.edit.sdk.R;
import com.pinguo.mix.api.ApiCallback;
import com.pinguo.mix.api.ApiConstants;
import com.pinguo.mix.api.common.CommonApi;

/**
 * Created by taoli on 14-10-22.
 */
public class UpdateController implements MixVersionUpdateDialog.IUpdateDialog {

    private IUpdateCallback mUpdateCallback;

    public void showUpdateDialog(Context context) {
        MixVersionUpdateDialog updateDialog = new MixVersionUpdateDialog(context);
        updateDialog.setUpdateListener(this);

        SharedPreferences pref = context.getSharedPreferences("UpdateInfo", Context.MODE_PRIVATE);
        String versionName = pref.getString(ApiConstants.PARAM_VERSION_NAME, "");
        String description = pref.getString(ApiConstants.PARAM_DESCRIPTION, "");

        updateDialog.setCancelable(false);
        updateDialog.setCanceledOnTouchOutside(false);
        updateDialog.setUpdateInfo(versionName, description);
        updateDialog.show();
    }

    public boolean needShowUpdateDialog(Context context) {

        boolean hasNewVersion = hasNewVersion(context);
        if (!hasNewVersion) {
            return false;
        }

        SharedPreferences pref = context.getSharedPreferences("UpdateInfo", Context.MODE_PRIVATE);
        ConnectivityManager connectivityManager
                = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        String networkType = NetworkUtils.getNetworkType(connectivityManager);
        boolean hasWifi = "wifi".equals(networkType);
        if (!hasWifi) {
            int nextIntervalDay = pref.getInt(ApiConstants.PARAM_NEXT_NOTIFY_DAY_INTERVAL, 0);
            switch (nextIntervalDay) {
                case 0:
                    return false;
                case 1:
                    setNextNotifyTime(context, 4);
                    break;
                case 2:
                    setNextNotifyTime(context, 1);
                    break;
                case 4:
                    if (NetworkUtils.hasInternet(context)) {
                        return true;
                    }

                    setNextNotifyTime(context, 2);
                    break;
                default:
                    break;
            }

            return false;
        }

        long nextNotifyTime = pref.getLong(ApiConstants.PARAM_NEXT_NOTIFY_TIME, 0);
        if (0 == nextNotifyTime) {
            return true;
        }

        if (nextNotifyTime < System.currentTimeMillis()) {
            return true;
        }

        return false;
    }

    public boolean needCheckUpdate(Context context) {
        SharedPreferences pref = context.getSharedPreferences("UpdateInfo", Context.MODE_PRIVATE);
        long nextNotifyTime = pref.getLong(ApiConstants.PARAM_NEXT_NOTIFY_TIME, 0);
        if (0 != nextNotifyTime) {
            return false;
        }

        long lastSuccessFetchTime = pref.getLong(ApiConstants.PARAM_SUCCESS_TIME, 0);
        if (System.currentTimeMillis() - lastSuccessFetchTime > 86400000) {
            return true;
        }
        return false;
    }

    public void checkUpdate(final Context context) {
        String deviceId = SystemUtils.getIMEI(context);
        String imsi = SystemUtils.getIMSI(context);
        String mccmnc = "";
        String mcc = "";
        String mnc = "";
        if (null != imsi && imsi.length() >= 5) {
            mccmnc = imsi.substring(0, 5);
            mcc = mccmnc.substring(0, 3);
            mnc = mccmnc.substring(3, 5);
        }

        String versionName = SystemUtils.getVersionName(context);
        String versionCode = SystemUtils.getVersionCode(context);
        String channel = context.getResources().getString(R.string.channel);

//        CommonApi.getAppUpdate(deviceId, mcc, mnc, channel,
//                versionName, versionCode, new ApiCallback() {
//            @Override
//            public void onResponse(Object data, Object... params) {
//                int versionCode = (Integer) data;
//                SharedPreferences pref = context.getSharedPreferences("UpdateInfo", Context.MODE_PRIVATE);
//                String ignoreVersionCode = pref.getString(ApiConstants.PARAM_IGNORE_VERSION_CODE, "");
//                if (!ignoreVersionCode.isEmpty()) {
//                    if (versionCode <= Integer.parseInt(ignoreVersionCode)) {
//                        return;
//                    }
//                }
//
//                Bundle bundle = (Bundle) params[0];
//                String versionName = bundle.getString(ApiConstants.PARAM_VERSION_NAME);
//                String title = bundle.getString(ApiConstants.PARAM_TITLE);
//                String description = bundle.getString(ApiConstants.PARAM_DESCRIPTION);
//                String url = bundle.getString(ApiConstants.PARAM_PACKAGE_URL);
//
//
//                SharedPreferences.Editor editor = pref.edit();
//                editor.putBoolean(ApiConstants.PARAM_HAS_NEW_VERSION, true);
//                editor.putString(ApiConstants.PARAM_VERSION_CODE, String.valueOf(versionCode));
//                editor.putString(ApiConstants.PARAM_VERSION_NAME, versionName);
//                editor.putString(ApiConstants.PARAM_TITLE, title);
//                editor.putString(ApiConstants.PARAM_DESCRIPTION, description);
//                editor.putString(ApiConstants.PARAM_PACKAGE_URL, url);
//                editor.putLong(ApiConstants.PARAM_SUCCESS_TIME, System.currentTimeMillis());
//                editor.commit();
//
//                if (null != mUpdateCallback) {
//                    mUpdateCallback.onUpdateSucceed(versionCode,
//                            versionName, title, description, url);
//                }
//            }
//
//            @Override
//            public void onError(String error) {
//                if (null != mUpdateCallback) {
//                    mUpdateCallback.onUpdateFailed();
//                }
//            }
//        });
    }

    public void setUpdateCallback(IUpdateCallback callback) {
        mUpdateCallback = callback;
    }

    @Override
    public void onUpdateBtnClick(Context context, DialogInterface dialog) {
        SharedPreferences pref = context.getSharedPreferences("UpdateInfo", Context.MODE_PRIVATE);
        String url = pref.getString(ApiConstants.PARAM_PACKAGE_URL, "");
        clearUpdateInfo(context);
        dialog.dismiss();

        if (null != url) {
            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
            context.startActivity(intent);
        }

        StatisticManager.onEvent(context,
                StatisticManager.KEY_ACTION_UPDATE_FUNCTION, "立即更新");
    }

    @Override
    public void onLaterBtnClick(Context context, DialogInterface dialog) {
        setNextNotifyTime(context, 2);
        dialog.dismiss();
        StatisticManager.onEvent(context,
                StatisticManager.KEY_ACTION_UPDATE_FUNCTION, "稍后提示");
    }

    @Override
    public void onIgnoreBtnClick(Context context, DialogInterface dialog) {
        ignoreUpdate(context);
        dialog.dismiss();
        StatisticManager.onEvent(context,
                StatisticManager.KEY_ACTION_UPDATE_FUNCTION, "忽略此版本");
    }

    public interface IUpdateCallback {
        void onUpdateSucceed(int versionCode,
                             String versionName,
                             String title,
                             String description,
                             String url);
        void onUpdateFailed();
    }

    public boolean hasNewVersion(Context context) {
        SharedPreferences pref = context.getSharedPreferences("UpdateInfo", Context.MODE_PRIVATE);
        return pref.getBoolean(ApiConstants.PARAM_HAS_NEW_VERSION, false);
    }

    public void clearUpdateInfo(Context context) {
        SharedPreferences pref = context.getSharedPreferences("UpdateInfo", Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = pref.edit();
        editor.remove(ApiConstants.PARAM_NEXT_NOTIFY_DAY_INTERVAL);
        editor.remove(ApiConstants.PARAM_NEXT_NOTIFY_TIME);
        editor.remove(ApiConstants.PARAM_HAS_NEW_VERSION);
        editor.remove(ApiConstants.PARAM_VERSION_CODE);
        editor.remove(ApiConstants.PARAM_VERSION_NAME);
        editor.remove(ApiConstants.PARAM_TITLE);
        editor.remove(ApiConstants.PARAM_DESCRIPTION);
        editor.remove(ApiConstants.PARAM_PACKAGE_URL);
        editor.commit();
    }

    public void ignoreUpdate(Context context) {
        SharedPreferences pref = context.getSharedPreferences("UpdateInfo", Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = pref.edit();
        String versionCode = pref.getString(ApiConstants.PARAM_VERSION_CODE, "");
        if (!versionCode.isEmpty()) {
            editor.putString(ApiConstants.PARAM_IGNORE_VERSION_CODE, String.valueOf(versionCode));
        }
        editor.remove(ApiConstants.PARAM_NEXT_NOTIFY_DAY_INTERVAL);
        editor.remove(ApiConstants.PARAM_NEXT_NOTIFY_TIME);
        editor.remove(ApiConstants.PARAM_HAS_NEW_VERSION);
        editor.remove(ApiConstants.PARAM_VERSION_CODE);
        editor.remove(ApiConstants.PARAM_VERSION_NAME);
        editor.remove(ApiConstants.PARAM_TITLE);
        editor.remove(ApiConstants.PARAM_DESCRIPTION);
        editor.remove(ApiConstants.PARAM_PACKAGE_URL);
        editor.commit();
    }

    public void setNextNotifyTime(Context context, int dayCount) {
        SharedPreferences pref = context.getSharedPreferences("UpdateInfo", Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = pref.edit();
        long nextMills = System.currentTimeMillis() + 86400000 * dayCount;
        editor.putInt(ApiConstants.PARAM_NEXT_NOTIFY_DAY_INTERVAL, dayCount);
        editor.putLong(ApiConstants.PARAM_NEXT_NOTIFY_TIME, nextMills);
        editor.commit();
    }
}
