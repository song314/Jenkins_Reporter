/*
 * Copyright (C) 2012 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.pinguo.edit.sdk.gallery.ui;


import android.content.Context;
import android.graphics.*;
import android.graphics.Bitmap.Config;
import android.text.TextPaint;
import android.text.TextUtils;
import com.pinguo.edit.sdk.gallery.data.BitmapPool;
import com.pinguo.edit.sdk.gallery.util.AlbumUtils;
import com.pinguo.edit.sdk.gallery.util.ThreadPool;

public class AlbumLabelMaker {
    private static final int FONT_COLOR_TITLE = Color.WHITE;
    private static final int FONT_COLOR_COUNT = Color.WHITE;

    // We keep a border around the album label to prevent aliasing
    private static final int BORDER_SIZE = 1;
    private static final int BACKGROUND_COLOR = Color.TRANSPARENT;

    private final AlbumSetSlotRenderer.LabelSpec mSpec;
    private final TextPaint mTitlePaint;
    private final TextPaint mCountPaint;

    private int mLabelWidth;
    private BitmapPool mBitmapPool;

    public AlbumLabelMaker(Context context, AlbumSetSlotRenderer.LabelSpec spec) {
        mSpec = spec;
        mTitlePaint = getTextPaint(spec.titleFontSize, FONT_COLOR_TITLE, false);
        mCountPaint = getTextPaint(spec.countFontSize, FONT_COLOR_COUNT, false);
    }

    public static int getBorderSize() {
        return BORDER_SIZE;
    }


    private static TextPaint getTextPaint(int textSize, int color, boolean isBold) {
        TextPaint paint = new TextPaint();
        paint.setTextSize(textSize);
        paint.setAntiAlias(true);
        paint.setColor(color);
        if (isBold) {
            paint.setTypeface(Typeface.defaultFromStyle(Typeface.BOLD));
        }
        return paint;
    }

    public synchronized void setLabelWidth(int width) {
        if (mLabelWidth == width) return;
        mLabelWidth = width;
        int borders = 2 * BORDER_SIZE;
        mBitmapPool = new BitmapPool(
                width + borders, mSpec.labelHeight + borders, 16);
    }

    public ThreadPool.Job<Bitmap> requestLabel(String content, String count) {
        return new AlbumLabelJob(content, count);
    }

    static void drawText(Canvas canvas,
                         int x, int y, String text, int lengthLimit, TextPaint p) {
        // The TextPaint cannot be used concurrently
        synchronized (p) {
            x = AlbumUtils.dpToPixel(22);
            text = TextUtils.ellipsize(
                    text, p, lengthLimit - x, TextUtils.TruncateAt.END).toString();
//            int x = (lengthLimit - Math.round(p.measureText(text))) / 2;
            canvas.drawText(text, x, y - p.getFontMetricsInt().ascent, p);
        }
    }

    private class AlbumLabelJob implements ThreadPool.Job<Bitmap> {
        private final String mContent;
        private final String mCount;

        public AlbumLabelJob(String content, String count) {
            mContent = content;
            mCount = count;
        }

        @Override
        public Bitmap run(ThreadPool.JobContext jc) {
            AlbumSetSlotRenderer.LabelSpec s = mSpec;

            String content = mContent;
            String count = mCount;

            Bitmap bitmap;
            int labelWidth;

            synchronized (this) {
                labelWidth = mLabelWidth;
                bitmap = mBitmapPool.getBitmap();
            }

            if (bitmap == null) {
                int borders = 2 * BORDER_SIZE;
                bitmap = Bitmap.createBitmap(labelWidth + borders,
                        s.labelHeight + borders, Config.ARGB_8888);
            }

            // 新生成一个位图，在里面绘制标签内容
            Canvas canvas = new Canvas(bitmap);
            canvas.clipRect(BORDER_SIZE, BORDER_SIZE,
                    bitmap.getWidth() - BORDER_SIZE,
                    bitmap.getHeight() - BORDER_SIZE);
            canvas.drawColor(BACKGROUND_COLOR, PorterDuff.Mode.SRC);

            canvas.translate(BORDER_SIZE, BORDER_SIZE);

            // draw title
            if (jc.isCancelled()) return null;
            int x = 0;
            int y = s.titleOffset;
            drawText(canvas, x, y, content, labelWidth, mTitlePaint);

            // not draw count now
//            if (jc.isCancelled()) return null;
//            y = s.titleFontSize + s.countOffset;
//            drawText(canvas, x, y, count, labelWidth, mCountPaint);
            return bitmap;
        }
    }

    public void recycleLabel(Bitmap label) {
        mBitmapPool.recycle(label);
    }

    public void clearRecycledLabels() {
        if (mBitmapPool != null) mBitmapPool.clear();
    }
}
