
package com.pinguo.edit.sdk.gallery.data;

import android.content.ContentResolver;
import android.content.ContentValues;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapRegionDecoder;
import android.media.ExifInterface;
import android.net.Uri;
import android.os.Build;
import android.provider.MediaStore.Images;
import android.provider.MediaStore.Images.ImageColumns;
import com.pinguo.edit.sdk.gallery.AlbumAppImpl;
import com.pinguo.edit.sdk.gallery.util.*;

import java.io.File;
import java.io.IOException;

public class Image extends LocalMediaItem {
    public static final String TAG = "Image";
    public static final int INDEX_ID = 0;
    public static final int INDEX_CAPTION = 1;
    public static final int INDEX_MIME_TYPE = 2;
    public static final int INDEX_LATITUDE = 3;
    public static final int INDEX_LONGITUDE = 4;
    public static final int INDEX_DATE_TAKEN = 5;
    public static final int INDEX_DATE_ADDED = 6;
    public static final int INDEX_DATE_MODIFIED = 7;
    public static final int INDEX_DATA = 8;
    public static final int INDEX_ORIENTATION = 9;
    public static final int INDEX_BUCKET_ID = 10;
    public static final int INDEX_SIZE = 11;

    static final String[] PROJECTION = {
            ImageColumns._ID, // 0
            ImageColumns.TITLE, // 1
            ImageColumns.MIME_TYPE, // 2
            ImageColumns.LATITUDE, // 3
            ImageColumns.LONGITUDE, // 4
            ImageColumns.DATE_TAKEN, // 5
            ImageColumns.DATE_ADDED, // 6
            ImageColumns.DATE_MODIFIED, // 7
            ImageColumns.DATA, // 8
            ImageColumns.ORIENTATION, // 9
            ImageColumns.BUCKET_ID, // 10
            ImageColumns.SIZE, // 11
    };
    private final AlbumAppImpl mApplication;
    public int rotation;

    public Image(AlbumAppImpl application, Path path, Cursor cursor) {
        super(path, nextVersionNumber());
        mApplication = application;
        loadFromCursor(cursor);
    }

    public Image(AlbumAppImpl app, Path path) {
        super(path, nextVersionNumber());
        mApplication = app;
        ContentResolver resolver = mApplication.getApplication().getContentResolver();
        Cursor cursor =
                resolver.query(Images.Media.EXTERNAL_CONTENT_URI, PROJECTION, ImageColumns.DATE_TAKEN + "=?",
                        new String[]{String.valueOf(path.getTokenMills())}, null);
        if (cursor == null) {
            throw new RuntimeException("cannot get cursor for: " + id);
        }
        try {
            if (cursor.moveToNext()) {
                loadFromCursor(cursor);
            } else {
                throw new RuntimeException("cannot find data for: " + id);
            }
        } finally {
            cursor.close();
        }
    }

    private void loadFromCursor(Cursor cursor) {
        id = cursor.getInt(INDEX_ID);
        caption = cursor.getString(INDEX_CAPTION);
        mimeType = cursor.getString(INDEX_MIME_TYPE);
        latitude = cursor.getDouble(INDEX_LATITUDE);
        longitude = cursor.getDouble(INDEX_LONGITUDE);
        dateTakenInMs = cursor.getLong(INDEX_DATE_TAKEN);
        filePath = cursor.getString(INDEX_DATA);
        bucketId = cursor.getInt(INDEX_BUCKET_ID);
        fileSize = cursor.getLong(INDEX_SIZE);
        rotation = cursor.getInt(INDEX_ORIENTATION);
    }

    @Override
    protected boolean updateFromCursor(Cursor cursor) {
        UpdateHelper uh = new UpdateHelper();
        id = uh.update(id, cursor.getInt(INDEX_ID));
        caption = uh.update(caption, cursor.getString(INDEX_CAPTION));
        mimeType = uh.update(mimeType, cursor.getString(INDEX_MIME_TYPE));
        latitude = uh.update(latitude, cursor.getDouble(INDEX_LATITUDE));
        longitude = uh.update(longitude, cursor.getDouble(INDEX_LONGITUDE));
        dateTakenInMs = uh.update(dateTakenInMs, cursor.getLong(INDEX_DATE_TAKEN));
        dateAddedInSec = uh.update(dateAddedInSec, cursor.getLong(INDEX_DATE_ADDED));
        dateModifiedInSec = uh.update(dateModifiedInSec, cursor.getLong(INDEX_DATE_MODIFIED));
        filePath = uh.update(filePath, cursor.getString(INDEX_DATA));
        rotation = uh.update(rotation, cursor.getInt(INDEX_ORIENTATION));
        bucketId = uh.update(bucketId, cursor.getInt(INDEX_BUCKET_ID));
        fileSize = uh.update(fileSize, cursor.getLong(INDEX_SIZE));
        return uh.isUpdated();
    }

    @Override
    public ThreadPool.Job<Bitmap> requestImage(int type) {
        return new LocalImageRequest(mApplication, filePath, type, filePath);
    }

    public static class LocalImageRequest extends ImageCacheRequest {
        private String mLocalFilePath;

        LocalImageRequest(AlbumAppImpl application, String path, int type, String localFilePath) {
            super(application, path, type, MediaItem.getTargetSize(type));
            mLocalFilePath = localFilePath;
        }

        @Override
        public Bitmap onDecodeOriginal(ThreadPool.JobContext jc, final int type) {
            BitmapFactory.Options options = new BitmapFactory.Options();
            options.inPreferredConfig = Bitmap.Config.ARGB_8888;
            options.inPurgeable = true;
            int targetSize = MediaItem.getTargetSize(type);
            // try to decode from JPEG EXIF
            if (type == MediaItem.TYPE_MICROTHUMBNAIL) {
                ExifInterface exif = null;
                byte[] thumbData = null;
                try {
                    exif = new ExifInterface(mLocalFilePath);
                    if (exif != null) {
                        thumbData = exif.getThumbnail();
                    }
                } catch (Throwable t) {
                    GMLogger.w(TAG, "fail to get exif thumb", t);
                }
                if (thumbData != null) {
                    Bitmap bitmap = DecodeUtils.decodeIfBigEnough(jc, thumbData, options, targetSize);
                    if (bitmap != null)
                        return bitmap;
                }
            }
            return DecodeUtils.decodeThumbnail(jc, mLocalFilePath, options, targetSize, type);
        }
    }

    @Override
    public ThreadPool.Job<BitmapRegionDecoder> requestLargeImage() {
        if (Build.VERSION.SDK_INT >= 10)
            return new LocalLargeImageRequest(filePath);
        else
            return null;
    }

    public static class LocalLargeImageRequest implements ThreadPool.Job<BitmapRegionDecoder> {
        String mLocalFilePath;

        public LocalLargeImageRequest(String localFilePath) {
            mLocalFilePath = localFilePath;
        }

        public BitmapRegionDecoder run(ThreadPool.JobContext jc) {
            return DecodeUtils.createBitmapRegionDecoder(jc, mLocalFilePath, false);
        }
    }

    @Override
    public int getSupportedOperations() {
        int operation = SUPPORT_DELETE | SUPPORT_SHARE | SUPPORT_CROP | SUPPORT_SETAS | SUPPORT_EDIT | SUPPORT_INFO;
        // 此处添加关于是否支持大图的判断，在apilevel<10时，bitmapregiondecoder不被系统支持
        if (BitmapUtils.isSupportedByRegionDecoder(mimeType) && Build.VERSION.SDK_INT >= 10) {
            operation |= SUPPORT_FULL_IMAGE;
        }
        if (BitmapUtils.isRotationSupported(mimeType)) {
            operation |= SUPPORT_ROTATE;
        }
        if (AlbumUtils.isValidLocation(latitude, longitude)) {
            operation |= SUPPORT_SHOW_ON_MAP;
        }
        return operation;
    }

    @Override
    public void delete() {
        AlbumUtils.assertNotInRenderThread();
        Uri baseUri = Images.Media.EXTERNAL_CONTENT_URI;
        mApplication.getApplication().getContentResolver().delete(baseUri, "_id=?", new String[]{
                String.valueOf(id)
        });
    }

    private static String getExifOrientation(int orientation) {
        switch (orientation) {
            case 0:
                return String.valueOf(ExifInterface.ORIENTATION_NORMAL);
            case 90:
                return String.valueOf(ExifInterface.ORIENTATION_ROTATE_90);
            case 180:
                return String.valueOf(ExifInterface.ORIENTATION_ROTATE_180);
            case 270:
                return String.valueOf(ExifInterface.ORIENTATION_ROTATE_270);
            default:
                throw new AssertionError("invalid: " + orientation);
        }
    }

    @Override
    public void rotate(int degrees) {
        AlbumUtils.assertNotInRenderThread();
        Uri baseUri = Images.Media.EXTERNAL_CONTENT_URI;
        ContentValues values = new ContentValues();
        int rotation = (this.rotation + degrees) % 360;
        if (rotation < 0)
            rotation += 360;
        if (mimeType.equalsIgnoreCase("image/jpeg")) {
            try {
                ExifInterface exif = new ExifInterface(filePath);
                exif.setAttribute(ExifInterface.TAG_ORIENTATION, getExifOrientation(rotation));
                exif.saveAttributes();
            } catch (IOException e) {
                GMLogger.w(TAG, "cannot set exif data: " + filePath);
            }
            // We need to update the filesize as well
            fileSize = new File(filePath).length();
            values.put(Images.Media.SIZE, fileSize);
        }
        values.put(Images.Media.ORIENTATION, rotation);
        mApplication.getApplication().getContentResolver()
                .update(baseUri, values, "_id=?", new String[]{
                String.valueOf(id)
        });
    }

    @Override
    public Uri getContentUri() {
        Uri baseUri = Images.Media.EXTERNAL_CONTENT_URI;
        return baseUri.buildUpon().appendPath(String.valueOf(id)).build();
    }

    @Override
    public int getMediaType() {
        return MEDIA_TYPE_IMAGE;
    }

    @Override
    public MediaDetails getDetails() {
        MediaDetails details = super.getDetails();
        details.addDetail(MediaDetails.INDEX_ORIENTATION, Integer.valueOf(rotation));
        MediaDetails.extractExifInfo(mApplication.getApplication()
                .getApplicationContext(), details, filePath);
        return details;
    }

    @Override
    public int getRotation() {
        while (rotation < 0) {
            rotation += 360;
        }
        rotation %= 360;
        if (rotation % 90 != 0) {
            int gap = rotation % 90;
            if (gap > 45) {
                rotation = (rotation + 90 - gap) % 360;
            } else {
                rotation = (rotation - gap) % 360;
            }
        }
        return rotation;
    }

    @Override
    public int getWidth() {
        return width;
    }

    @Override
    public int getHeight() {
        return height;
    }
}
