package com.pinguo.edit.sdk.camera.setting;

import android.graphics.Point;
import android.hardware.Camera;

import com.pinguo.edit.sdk.camera.entity.SizeInfo;
import com.pinguo.edit.sdk.camera.model.CameraManager;
import com.pinguo.edit.sdk.camera.util.CMLogger;
import com.pinguo.edit.sdk.camera.util.CameraModuleUtil;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

/**
 * Created by liubo on 7/4/13.
 * 配置相关的设置的键常量存放
 */
public final class CameraSettings {
    private static final String TAG = CameraSettings.class.getSimpleName();
    public static final int UPDATE_PARAM_INITIALIZE = 1;
    public static final int UPDATE_PARAM_ZOOM = 1 << 1;
    public static final int UPDATE_PARAM_PICTURE_INFO = 1 << 2;
    public static final int UPDATE_PARAM_PREFERENCE = 1 << 3;
    public static final int UPDATE_PARAM_ALL = 0xFFFFFFFF;

    /**
     * 预览比例的偏差值
     */
    private static final float PREVIEW_ASPECT_TOLERANCE = 0.01f;
    private static final float PREVIEW_ASPECT_TOLERANCE2 = 0.05f;
    private static final float PREVIEW_ASPECT_TOLERANCE3 = 0.18f;

    /**
     * 图片比例的偏差值
     */
    private static final float PICTURE_ASPECT_TOLERANCE = 0.05f;
    /**
     * 最大预览值
     */
    private static final int MAX_PREVIEW_SIZE = 120 * 10000;
    /**
     * 最小预览值
     */
    private static final int MIN_PREVIEW_SIZE = 5 * 10000;
    // 最小照片尺寸
    private static final int MIN_PICTURE_SIZE = 100 * 10000;
    // 各种比率
    private static final float RATIO_16X9 = 16.0f / 9;
    private static final float RATIO_4X3 = 4.0f / 3;
    private static final float RATIO_16X10 = 16.0f / 10;
    private static final float RATIO_3X2 = 3.0f / 2;
    private static final float RATIO_5X3 = 5.0f / 3;
    private static final float RATIO_1X1 = 1.0f;

    /**
     * 最小拍摄分辨率像素.
     */
    private static int MIN_PIC_SIZE = 290000;
    /**
     * 最大拍摄分辨率像素.
     */
    private static int MAX_PIC_SIZE = 3500000;
    private static int MAX_PIC_SIZE_4 = 4000000;
    private static int MAX_PIC_SIZE_8 = 7900000;

    public static final int PREVIEW_DEFAULT_DEGREE = 90;

    private static final String[] filterSizeList = {
            "352x288" // 华为C8812 前置20万
    };

    /**
     * 取得默认的图片尺寸
     *
     * @param sizeInfos 过滤后的参数列表
     * @return 取得默认的图片尺寸
     */
    protected static Point getDefaultPictureSize(List<Point> sizeInfos, int cameraId) {

        if (Camera.CameraInfo.CAMERA_FACING_BACK == cameraId) {
            Point maxPicInfo = sizeInfos.get(0);
            int maxPicSize = maxPicInfo.x * maxPicInfo.y;

            Point minPicInfo = sizeInfos.get(sizeInfos.size() - 1);
            int minPicSize = minPicInfo.x * minPicInfo.y;

            CMLogger.i(TAG, "Picture size range:" + maxPicSize + " - " + minPicSize);

            // 后置摄像头分辨率在(0, 400]或[800, 无穷)，取分辨率的一半为筛选最大值
            if (maxPicSize <= MAX_PIC_SIZE_4 || maxPicSize >= MAX_PIC_SIZE_8) {
                //保护措施,避免最大值的/2<最小值
                int midPicSize = maxPicSize / 2;
                if (midPicSize > minPicSize) {
                    MAX_PIC_SIZE = maxPicSize / 2;
                }

                CMLogger.i(TAG, "Mid size:" + midPicSize);
            }
        }

        //前置摄像头默认35万-350万之间取
        List<Point> bkpPicList = new LinkedList<Point>(sizeInfos);

        filter(sizeInfos, MIN_PIC_SIZE, MAX_PIC_SIZE);
        if (0 == sizeInfos.size()) {
            sizeInfos = bkpPicList;
        }
        final int screenW = CameraModuleUtil.getDisplaySize().getWidth();
        final int screenH = CameraModuleUtil.getDisplaySize().getHeight();

        CMLogger.i(TAG, "Get screen size:" + screenW + "/" + screenH);
        return getBestPicSize(sizeInfos, screenH, screenW);
    }

    /**
     * @param picSizeList 拍摄分辨率列表
     * @param w           屏幕宽度（单位：像素）
     * @param h           屏幕高度（单位：像素）
     * @return 如果传入的list中能选出最合适的分辨率，则返回改point对象，否则返回null
     */
    public static Point getBestPicSize(List<Point> picSizeList, int w, int h) {

        //排序
        Collections.sort(picSizeList, new Comparator<Point>() {

            @Override
            public int compare(Point p1, Point p2) {
                int i1 = p1.x * p1.y;
                int i2 = p2.x * p2.y;
                if (i1 > i2) {
                    return 1;
                } else if (i1 < i2) {
                    return -1;
                } else {
                    return 0;
                }
            }
        });

        if (0 == picSizeList.size()) {
            return null;
        }

        Point backupSize = picSizeList.get(picSizeList.size() - 1);

        // 相似,2013-01-14需求变更,优先选择宽屏分辨率
        Point filterPoint = filtSquareSize(picSizeList);
        // 取得最佳
        if (null == filterPoint) {
            return backupSize;
        } else {
            return filterPoint;
        }
    }

    private static boolean isSquare(int w, int h) {
        int max = w > h ? w : h;
        int min = w < h ? w : h;
        if ((float) min / (float) max > 0.95f) {
            return true;
        }

        return false;
    }

    private static Point filtSquareSize(List<Point> picSizeList) {
        Point selectedPoint = null;
        for (final Iterator<Point> it = picSizeList.iterator();
             it.hasNext(); ) {
            final Point p = it.next();
            if (!isSquare(p.x, p.y)) {
                if (null == selectedPoint) {
                    CMLogger.d("Pic size", "First select size:" + p.x + "/" + p.y);
                    selectedPoint = p;
                    // 选择范围内最大的分辨率尺寸
                } else if (p.x > selectedPoint.x) {
                    CMLogger.d("Pic size", "Change select size:" + p.x + "/" + p.y);
                    selectedPoint = p;
                }
                continue;
            } else {
                CMLogger.d("Pic size", "Not long ratio:" + p.x + "/" + p.y);
                it.remove();
            }
        }

        return selectedPoint;
    }

    private static Point filtSimilar(List<Point> picSizeList, int w, int h) {
        Point selectedPoint = null;
        for (final Iterator<Point> it = picSizeList.iterator();
             it.hasNext(); ) {
            final Point p = it.next();
            if (isSame(p, w, h)) {
                CMLogger.d("Pic size", "Same pic size with screen:" + p.x + "/" + p.y);
                if (null == selectedPoint) {
                    CMLogger.d("Pic size", "First select size:" + p.x + "/" + p.y);
                    selectedPoint = p;
                    // 选择范围内最大的分辨率尺寸
                } else if (p.x > selectedPoint.x) {
                    CMLogger.d("Pic size", "Change select size:" + p.x + "/" + p.y);
                    selectedPoint = p;
                }
                continue;
            } else {
                CMLogger.d("Pic size", "Not same ratio:" + p.x + "/" + p.y);
                it.remove();
            }
        }

        return selectedPoint;
    }

    private static boolean isSame(Point p, int w, int h) {
        final float a = (w * 1.0f) / (h * 1.0f);
        final float b = (p.x * 1.0f) / (p.y * 1.0f);

        return (((a > b) ? (b / a) : (a / b)) > 0.95f);
    }

    private static void filter(List<Point> list, int min, int max) {
        for (final Iterator<Point> it = list.iterator();
             it.hasNext(); ) {
            final Point p = it.next();
            final int sum = p.x * p.y;
            if (sum > max || sum < min) {
                it.remove();
            }
        }
    }

    private static Camera.Size tryGetOptimalPreviewSize(List<Camera.Size> previewSizeLists, float picRatio, float aspectRatio, int targetHeight, int maxPreviewSize) {
        Camera.Size optimalSize = null;
        int minDiff = Integer.MAX_VALUE;
        for (Camera.Size size : previewSizeLists) {
            //排除过大的预览分辨值
            int previewSize = size.width * size.height;
            if (previewSize > maxPreviewSize) {
                continue;
            }

            //排除不符合比例的值
            float ratio = (float) size.width / size.height;
            if (Math.abs(ratio - picRatio) > aspectRatio) {
                continue;
            }

            //寻找最佳值
            if (Math.abs(size.height - targetHeight) < minDiff) {
                optimalSize = size;
                minDiff = Math.abs(size.height - targetHeight);
            }
        }
        return optimalSize;
    }

    /**
     * 根据图片大小取得最佳预览尺寸
     *
     * @param previewSizeLists 相机支持的预览分辨率列表
     * @param pictureRadio     相机支持的图像比例
     * @return SizeInfo
     */
    protected static SizeInfo getOptimalPreviewSize(List<Camera.Size> previewSizeLists, float pictureRadio) {
        return getOptimalPreviewSize(previewSizeLists, pictureRadio, MAX_PREVIEW_SIZE);
    }

    /**
     * 根据图片大小取得最佳预览尺寸
     *
     * @param previewSizeLists 相机支持的预览分辨率列表
     * @param pictureRadio     相机支持的图像比例
     * @param maxPreviewSize   最大预览分辨率，单位px，最大不能超过1000W,最小不能低于10W，范围外此参数不生效
     * @return SizeInfo
     */
    protected static SizeInfo getOptimalPreviewSize(List<Camera.Size> previewSizeLists, float pictureRadio, int maxPreviewSize) {
        if (maxPreviewSize > MAX_PREVIEW_SIZE || maxPreviewSize < MIN_PREVIEW_SIZE) {
            maxPreviewSize = MAX_PREVIEW_SIZE;
        }

        if (previewSizeLists == null) {
            return null;
        }

        //取得屏幕尺寸
        SizeInfo displaySize = CameraModuleUtil.getDisplaySize();
        int targetHeight = Math.min(displaySize.getWidth(), displaySize.getHeight());

        // 试着找一个最佳的尺寸
        Camera.Size optimalSize;
        optimalSize = tryGetOptimalPreviewSize(previewSizeLists, pictureRadio, PREVIEW_ASPECT_TOLERANCE, targetHeight, maxPreviewSize);
        if (optimalSize != null) {
            return SizeInfo.parseSize(optimalSize);
        }

        optimalSize = tryGetOptimalPreviewSize(previewSizeLists, pictureRadio, PREVIEW_ASPECT_TOLERANCE2, targetHeight, maxPreviewSize);
        if (optimalSize != null) {
            return SizeInfo.parseSize(optimalSize);
        }

        optimalSize = tryGetOptimalPreviewSize(previewSizeLists, pictureRadio, PREVIEW_ASPECT_TOLERANCE3, targetHeight, maxPreviewSize);
        if (optimalSize != null) {
            return SizeInfo.parseSize(optimalSize);
        }

        //找不到比例的，将忽略比例，查找最接近分辨率的值
        CMLogger.w(TAG, "No preview size match the aspect ratio");
        int minDiff = Integer.MAX_VALUE;
        for (Camera.Size size : previewSizeLists) {
            //排除过大的预览分辨值
            int previewSize = size.width * size.height;
            if (previewSize > maxPreviewSize) {
                continue;
            }

            if (Math.abs(size.height - targetHeight) < minDiff) {
                optimalSize = size;
                minDiff = Math.abs(size.height - targetHeight);
            }
        }
        return SizeInfo.parseSize(optimalSize);
    }

    /**
     * 根据预览尺寸比例过滤图片尺寸
     *
     * @param picSizeList    相机支持的图片分辨率列表
     * @param picPreviewList 相机支持的图片预览分辨率列表
     * @return 过滤后的图片尺寸
     */
    protected static List<PicSizeInfo> filterPictureSize(List<Camera.Size> picSizeList, List<Camera.Size> picPreviewList) {
        if (picSizeList == null) {
            //rom问题造成拿出的picSizeList为空
            return null;
        }
        ArrayList<Camera.Size> backUpPicSize = new ArrayList<Camera.Size>(picSizeList);
        filterPictureSizeByPreviewSize(picPreviewList, picSizeList);
        // check picPreviewList
        if (picSizeList.size() <= 0) {
            picSizeList = backUpPicSize;
        }

        /**
         * 从大到小排序
         */
        Collections.sort(picSizeList, new Comparator<Camera.Size>() {
            @Override
            public int compare(Camera.Size o1, Camera.Size o2) {
                //由于都是整数，所以相减无关系
                return o2.height * o2.width - o1.height * o1.width;
            }
        });

        return convertSizeType(picSizeList);
    }

    /**
     * filter picture size by preview size
     *
     * @param sptPreviewSize 所支持的预览尺寸
     * @param supported      所支持的照片尺寸
     */
    private static void filterPictureSizeByPreviewSize(final List<Camera.Size> sptPreviewSize, final List<Camera.Size> supported) {
        final float boundary = 0.02f;
        final Iterator<Camera.Size> picIt = supported.iterator();
        while (picIt.hasNext()) {
            final Camera.Size size = picIt.next();
            float ratioPicture = 1f * size.width / size.height;
            boolean canUsePicSize = false;

            for (Camera.Size preSize : sptPreviewSize) {
                float ratioPreview = 1f * preSize.width / preSize.height;

                // 当预览比率和照片尺寸的比率超出了规定的阀值，遗弃该尺寸
                if (Math.abs(ratioPicture - ratioPreview) > boundary) {
                    canUsePicSize = false;
                } else {
                    canUsePicSize = true;
                    break;
                }
            }

            for (String breakSize : filterSizeList) {
                if (breakSize.equals(String.format("%dx%d", size.width, size.height))) {
                    canUsePicSize = false;
                    break;
                }
            }

            if (!canUsePicSize) {
                picIt.remove();
            }

        }
    }

    private static List<PicSizeInfo> convertSizeType(List<Camera.Size> supported) {
        if (supported == null || supported.size() <= 0) {
            return null;
        }

        List<PicSizeInfo> list = new ArrayList<CameraSettings.PicSizeInfo>();

        for (Camera.Size size : supported) {
            // 封装每一个Camera.Size为PicSizeInfo
            PicSizeInfo entry = initPictureSizeEntry(size);

            if (entry.picPix != 0) {
                list.add(entry);
            }
        }

        matchLimit(list);

        return list;
    }

    /**
     * 初始化每个大小的一些信息，包含在界面显示所用字符串和比较所用字段
     *
     * @param size
     * @return PicSizeInfo
     */
    private static PicSizeInfo initPictureSizeEntry(Camera.Size size) {
        PicSizeInfo entry = new PicSizeInfo();
        float unitSize;
        entry.picSize = size;
        entry.picTruePix = size.width * size.height;
        int cameraId = CameraSettingModel.instance().getCameraId();
        if (!CameraManager.instance().isFrontCamera(cameraId)) {
            // Back camera rounded with million.
            if (entry.picTruePix > MIN_PICTURE_SIZE) {
                // 以百万为单位
                unitSize = 1000000.0f;
                entry.picPix = (int) Math.rint(entry.picTruePix / unitSize) * 100;
            } else {
                // 以万为单位
                unitSize = 100000.0f;
                entry.picPix = (int) Math.rint(entry.picTruePix / unitSize) * 10;
            }
        } else {
            // Front camera rounded with hundred thousand.
            unitSize = 100000.0f;
            entry.picPix = (int) Math.rint(entry.picTruePix / unitSize) * 10;
        }

        // 获取每种照片尺寸的比率，用于在高级设置中显示
        entry.pictureRatio = getPictureRadio(size);
        return entry;
    }


    private static PictureRatio getPictureRadio(Camera.Size size) {
        float radio = (float) size.width / (float) size.height;
        if (radio >= (RATIO_16X9 - PICTURE_ASPECT_TOLERANCE) && radio <= (RATIO_16X9 + PICTURE_ASPECT_TOLERANCE)) {
            return PictureRatio.RATIO_16X9;
        }

        if (radio >= (RATIO_4X3 - PICTURE_ASPECT_TOLERANCE) && radio <= (RATIO_4X3 + PICTURE_ASPECT_TOLERANCE)) {
            return PictureRatio.RATIO_4X3;
        }

        if (radio >= (RATIO_16X10 - PICTURE_ASPECT_TOLERANCE) && radio <= (RATIO_16X10 + PICTURE_ASPECT_TOLERANCE)) {
            return PictureRatio.RATIO_16X10;
        }

        if (radio >= (RATIO_5X3 - PICTURE_ASPECT_TOLERANCE) && radio <= (RATIO_5X3 + PICTURE_ASPECT_TOLERANCE)) {
            return PictureRatio.RATIO_5X3;
        }

        if (radio >= (RATIO_3X2 - PICTURE_ASPECT_TOLERANCE) && radio <= (RATIO_3X2 + PICTURE_ASPECT_TOLERANCE)) {
            return PictureRatio.RATIO_3X2;
        }

        if (radio >= (RATIO_1X1 - PICTURE_ASPECT_TOLERANCE) && radio <= (RATIO_1X1 + PICTURE_ASPECT_TOLERANCE)) {
            return PictureRatio.RATIO_1X1;
        }

        return PictureRatio.RATIO_OTHER;
    }

    /**
     * 该方法用于过滤照片大小的重复项
     * 过滤条件（后置）：
     * 1. 100及100万以上像素按四舍五入取整。如果有重复，且长宽比例相同，显示尺寸大的，若长宽比例不同，
     * 每种比例只显示一个，对于16:9和16:10的分辨率，在像素值后标注长宽比例。
     * 2. 100万以下像素值，如果超过两个，只显示一个，优先显示16:9或16:10，若均有，选择16:9，否则取最大值。
     *
     * @param list
     */
    private static void matchLimit(List<PicSizeInfo> list) {
        // 优先选择100万16:9或者16:10的分辨率，大于100万，全部标记为可用
        boolean filter = true;
        int cameraId = CameraSettingModel.instance().getCameraId();
        for (PicSizeInfo entry : list) {
            // 这里将把所有大于100万的分辨率标记为可用
            if (entry.picPix <= (MIN_PICTURE_SIZE / 10000) && !CameraManager.instance().isFrontCamera(cameraId)) {
                if (entry.pictureRatio != PictureRatio.RATIO_OTHER) {
                    entry.isValid = true;
                    filter = false;
                    break;
                }
            } else {
                entry.isValid = true;
            }
        }

        // 如果100万以内没有发现宽屏分辨率，这选取一个最大的
        if (filter && !CameraManager.instance().isFrontCamera(cameraId)) {
            for (PicSizeInfo entry : list) {
                if (entry.picPix <= MIN_PICTURE_SIZE / 10000) {
                    entry.isValid = true;
                    break;
                }
            }
        }

        // 具有相同的图片大小和比例，因为图片大小本身有序，
        // 所有在list中存在的是最大的值，直接过滤掉这种情况
        for (int i = 0;
             i < list.size() - 1;
             i++) {
            PicSizeInfo entry = list.get(i);
            for (int j = i + 1;
                 j < list.size();
                 j++) {
                PicSizeInfo contrast = list.get(j);
                if (entry.picPix == contrast.picPix && entry.pictureRatio.equals(contrast.pictureRatio)) {
                    contrast.isValid = false;
                }
            }
        }
    }

    public static class PicSizeInfo {
        /**
         * 图片分辨率
         */
        private Camera.Size picSize;

        private int picTruePix = 0;

        // 是否是有效的照片尺寸
        private boolean isValid = false;

        /**
         * 图片像素，以万为单位
         */
        private int picPix;

        private PictureRatio pictureRatio = PictureRatio.RATIO_OTHER;

        public Camera.Size getPicSize() {
            return this.picSize;
        }

        public int getPicPix() {
            return this.picPix;
        }

        public PictureRatio getPictureRatio() {
            return this.pictureRatio;
        }

        public boolean getIsValid() {
            return isValid;
        }
    }

    public static enum PictureRatio {
        RATIO_16X9,
        RATIO_4X3,
        RATIO_16X10,
        RATIO_5X3,
        RATIO_3X2,
        RATIO_1X1,
        RATIO_OTHER
    }
}
