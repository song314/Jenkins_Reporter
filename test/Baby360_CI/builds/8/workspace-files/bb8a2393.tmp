/*
 * Copyright (C) 2010 The Android Open Source Project Licensed under the Apache
 * License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
 * or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

package com.pinguo.edit.sdk.gallery.ui;

import android.graphics.Bitmap;
import android.os.Message;
import com.pinguo.edit.sdk.gallery.AlbumActivity;
import com.pinguo.edit.sdk.gallery.AlbumDataLoader;
import com.pinguo.edit.sdk.gallery.data.MediaItem;
import com.pinguo.edit.sdk.gallery.data.MediaSet;
import com.pinguo.edit.sdk.gallery.data.Path;
import com.pinguo.edit.sdk.gallery.util.Future;
import com.pinguo.edit.sdk.gallery.util.FutureListener;
import com.pinguo.edit.sdk.gallery.util.JobLimiter;
import com.pinguo.edit.sdk.gallery.util.Utils;

import java.util.ArrayList;

public class AlbumSlidingWindow implements AlbumDataLoader.DataListener {

    @SuppressWarnings("unused")
    private static final String TAG = "AlbumSlidingWindow";
    private static final int MSG_UPDATE_ENTRY = 0;
    private static final int MSG_UPDATE_ALBUM_ENTRY = 1;
    private static final int JOB_LIMIT = 2;
    private static final int SLOT_ENTRY_CACHE_SIZE = 96; // 改变
    private static final int SORT_TAG_ENTRY_CACHE_SIZE = 32; // 改变

    public static interface Listener {

        public void onSizeChanged(int size, ArrayList<MediaSet.SortTag> tags);

        public void onContentChanged();
    }

    public static class AlbumEntry {

        public MediaItem item;
        public Path path;
        public boolean isPanorama;
        public int rotation;
        public int mediaType;
        public boolean isWaitDisplayed;
        public BitmapTexture bitmapTexture;
        public Texture content;
        private BitmapLoader contentLoader;
    }

    private final AlbumDataLoader mSource;
    private final AlbumEntry mSlotEntry[];
    private final SynchronizedHandler mHandler;
    private final JobLimiter mThreadPool;
    private final TextureUploader mTextureUploader;
    private int mSize;
    private int mContentStart = 0;
    private int mContentEnd = 0;
    private int mActiveStart = 0;
    private int mActiveEnd = 0;
    private Listener mListener;
    private int mActiveRequestCount = 0;
    private boolean mIsActive = false;

    public void setListener(Listener listener) {
        mListener = listener;
    }

    public AlbumEntry getSlotEntry(int slotIndex) {
        if (!isActiveSlot(slotIndex)) {
            Utils.fail("invalid slot: %s outsides (%s, %s)", slotIndex, mActiveStart, mActiveEnd);
        }
        return mSlotEntry[slotIndex % mSlotEntry.length];
    }

    public boolean isActiveSlot(int slotIndex) {
        return slotIndex >= mActiveStart && slotIndex < mActiveEnd;
    }

    private void setContentWindow(int contentStart, int contentEnd) {
        if (contentStart == mContentStart && contentEnd == mContentEnd)
            return;
        if (!mIsActive) {
            mContentStart = contentStart;
            mContentEnd = contentEnd;
            mSource.setActiveWindow(contentStart, contentEnd);
            return;
        }
        if (contentStart >= mContentEnd || mContentStart >= contentEnd) {
            for (int i = mContentStart, n = mContentEnd; i < n; ++i) {
                freeSlotContent(i);
            }
            mSource.setActiveWindow(contentStart, contentEnd);
            for (int i = contentStart; i < contentEnd; ++i) {
                prepareSlotContent(i);
            }
        } else {
            for (int i = mContentStart; i < contentStart; ++i) {
                freeSlotContent(i);
            }
            for (int i = contentEnd, n = mContentEnd; i < n; ++i) {
                freeSlotContent(i);
            }
            mSource.setActiveWindow(contentStart, contentEnd);
            for (int i = contentStart, n = mContentStart; i < n; ++i) {
                prepareSlotContent(i);
            }
            for (int i = mContentEnd; i < contentEnd; ++i) {
                prepareSlotContent(i);
            }
        }
        mContentStart = contentStart;
        mContentEnd = contentEnd;
    }

    public void setActiveSlotWindow(int start, int end) {
        if (!(start <= end && end - start <= mSlotEntry.length && end <= mSize)) {
            Utils.fail("%s, %s, %s, %s", start, end, mSlotEntry.length, mSize);
        }
        AlbumEntry data[] = mSlotEntry;
        mActiveStart = start;
        mActiveEnd = end;
        int contentStart = Utils.clamp((start + end) / 2 - data.length / 2, 0, Math.max(0, mSize - data.length));
        int contentEnd = Math.min(contentStart + data.length, mSize);
        setContentWindow(contentStart, contentEnd);
        updateTextureUploadQueue();
        if (mIsActive)
            updateAllImageRequests();
    }

    private void uploadBgTextureInSlot(int index) {
        if (index < mContentEnd && index >= mContentStart) {
            AlbumEntry entry = mSlotEntry[index % mSlotEntry.length];
            if (entry.bitmapTexture != null) {
                mTextureUploader.addBgTexture(entry.bitmapTexture);
            }
        }
    }

    private void updateTextureUploadQueue() {
        if (!mIsActive)
            return;
        mTextureUploader.clear();
        // add foreground texturesAlbumSlidingWindow
        for (int i = mActiveStart, n = mActiveEnd; i < n; ++i) {
            AlbumEntry entry = mSlotEntry[i % mSlotEntry.length];
            if (entry.bitmapTexture != null) {
                mTextureUploader.addFgTexture(entry.bitmapTexture);
            }
        }
        // add background textures
        int range = Math.max((mContentEnd - mActiveEnd), (mActiveStart - mContentStart));
        for (int i = 0; i < range; ++i) {
            uploadBgTextureInSlot(mActiveEnd + i);
            uploadBgTextureInSlot(mActiveStart - i - 1);
        }
    }

    private void requestNonactiveImages() {
        int range = Math.max((mContentEnd - mActiveEnd), (mActiveStart - mContentStart));
        for (int i = 0; i < range; ++i) {
            requestSlotImage(mActiveEnd + i);
            requestSlotImage(mActiveStart - 1 - i);
        }
    }

    private void cancelNonactiveImages() {
        int range = Math.max((mContentEnd - mActiveEnd), (mActiveStart - mContentStart));
        for (int i = 0; i < range; ++i) {
            cancelSlotImage(mActiveEnd + i);
            cancelSlotImage(mActiveStart - 1 - i);
        }
    }

    // return whether the request is in progress or not
    private boolean requestSlotImage(int slotIndex) {
        if (slotIndex < mContentStart || slotIndex >= mContentEnd)
            return false;
        AlbumEntry entry = mSlotEntry[slotIndex % mSlotEntry.length];
        if (entry.content != null || entry.item == null)
            return false;
        entry.contentLoader.startLoad();
        return entry.contentLoader.isRequestInProgress();
    }

    private void cancelSlotImage(int slotIndex) {
        if (slotIndex < mContentStart || slotIndex >= mContentEnd)
            return;
        AlbumEntry item = mSlotEntry[slotIndex % mSlotEntry.length];
        if (item.contentLoader != null)
            item.contentLoader.cancelLoad();
    }

    private void freeSlotContent(int slotIndex) {
        AlbumEntry data[] = mSlotEntry;
        int index = slotIndex % data.length;
        AlbumEntry entry = data[index];
        if (entry.contentLoader != null)
            entry.contentLoader.recycle();
        if (entry.bitmapTexture != null)
            entry.bitmapTexture.recycle();
        data[index] = null;
    }

    private void prepareSlotContent(int slotIndex) {
        AlbumEntry entry = new AlbumEntry();
        MediaItem item = mSource.get(slotIndex); // item could be null;
        entry.item = item;
        entry.mediaType = (item == null) ? MediaItem.MEDIA_TYPE_UNKNOWN : entry.item.getMediaType();
        entry.path = (item == null) ? null : item.getPath();
        entry.rotation = (item == null) ? 0 : item.getRotation();
        entry.contentLoader = new ThumbnailLoader(slotIndex, entry.item);
        mSlotEntry[slotIndex % mSlotEntry.length] = entry;
    }

    private void updateAllImageRequests() {
        mActiveRequestCount = 0;
        for (int i = mActiveStart, n = mActiveEnd; i < n; ++i) {
            if (requestSlotImage(i))
                ++mActiveRequestCount;
        }
        if (mActiveRequestCount == 0) {
            requestNonactiveImages();
        } else {
            cancelNonactiveImages();
        }
    }

    private class ThumbnailLoader extends BitmapLoader {

        private final int mSlotIndex;
        private final MediaItem mItem;

        public ThumbnailLoader(int slotIndex, MediaItem item) {
            mSlotIndex = slotIndex;
            mItem = item;
        }

        @Override
        protected void recycleBitmap(Bitmap bitmap) {
            MediaItem.getMicroThumbPool().recycle(bitmap);
        }

        @Override
        protected Future<Bitmap> submitBitmapTask(FutureListener<Bitmap> l) {
            return mThreadPool.submit(mItem.requestImage(MediaItem.TYPE_MICROTHUMBNAIL), this);
        }

        @Override
        protected void onLoadComplete(Bitmap bitmap) {
            mHandler.obtainMessage(MSG_UPDATE_ENTRY, this).sendToTarget();
        }

        public void updateEntry() {
            Bitmap bitmap = getBitmap();
            if (bitmap == null)
                return; // error or recycled
            AlbumEntry entry = mSlotEntry[mSlotIndex % mSlotEntry.length];
            entry.bitmapTexture = new BitmapTexture(bitmap);
            entry.content = entry.bitmapTexture;
            if (isActiveSlot(mSlotIndex)) {
                mTextureUploader.addFgTexture(entry.bitmapTexture);
                --mActiveRequestCount;
                if (mActiveRequestCount == 0)
                    requestNonactiveImages();
                if (mListener != null)
                    mListener.onContentChanged();
            } else {
                mTextureUploader.addBgTexture(entry.bitmapTexture);
            }
        }
    }

    // ------------------------------------------------------------------------------------------------------------------
    public AlbumSlidingWindow(AlbumActivity activity, AlbumDataLoader source, AlbumSlotRenderer.SortTagSpec sortTagSpec) {
        source.setDataListener(this);
        mSource = source;
        mSlotEntry = new AlbumEntry[SLOT_ENTRY_CACHE_SIZE];
        mSortTagEntry = new SortTagEntry[SORT_TAG_ENTRY_CACHE_SIZE];
        mSize = source.size();
        mHandler = new SynchronizedHandler(activity.getGLRoot()) {

            @Override
            public void handleMessage(Message message) {
                if (message.what == MSG_UPDATE_ENTRY) {
                    ((ThumbnailLoader) message.obj).updateEntry();
                } else if (message.what == MSG_UPDATE_ALBUM_ENTRY) {
                    ((SortTagLoader) message.obj).updateEntry();
                }
            }
        };
        mThreadPool = new JobLimiter(activity.getThreadPool(), JOB_LIMIT);
        mTextureUploader = new TextureUploader(activity.getGLRoot());
        mSortTagMaker = new AlbumSortTagMaker(sortTagSpec);
    }

    @Override
    public void onSizeChanged(int size, ArrayList<MediaSet.SortTag> tags) {
        if (mSize != size) {
            mSize = size;
            mSortTags = tags;
            if (mListener != null) {
                mListener.onSizeChanged(mSize, tags);
                //会触发SortTagEntry更新加载数据源
                for (int i = 0; i < tags.size(); i++) {
                    if (i >= mActiveTagStart && i < mActiveTagEnd) {
                        onTagChanged(i);
                    }
                }
            }
            //
            if (mContentEnd > mSize)
                mContentEnd = mSize;
            if (mActiveEnd > mSize)
                mActiveEnd = mSize;
            //
            int tagSize = tags.size();
            if (mTagEnd > tagSize)
                mTagEnd = tagSize;
            if (mTagEnd > tagSize)
                mTagEnd = tagSize;
        }
    }

    public void onTagChanged(int index) {
        if (index >= mTagStart && index < mTagEnd && mIsActive) {
            freeTagContent(index);
            prepareTagContent(index);
            updateAllImageRequestsTag();
            if (mListener != null && isActiveTag(index)) {
                mListener.onContentChanged(); // ????
            }
        }
    }

    @Override
    public void onContentChanged(int index) {
        if (index >= mContentStart && index < mContentEnd && mIsActive) {
            freeSlotContent(index);
            prepareSlotContent(index);
            updateAllImageRequests();
            if (mListener != null && isActiveSlot(index)) {
                mListener.onContentChanged();
            }
        }
    }

    public void resume() {
        mIsActive = true;
        for (int i = mContentStart, n = mContentEnd; i < n; ++i) {
            prepareSlotContent(i);
        }
        for (int i = mTagStart, n = mTagEnd; i < n; ++i) {
            prepareTagContent(i);
        }
        updateAllImageRequestsTag();
        updateAllImageRequests();
    }

    public void pause() {
        mIsActive = false;
        mTextureUploader.clear();
        for (int i = mContentStart, n = mContentEnd; i < n; ++i) {
            freeSlotContent(i);
        }
        for (int i = mTagStart, n = mTagEnd; i < n; ++i) {
            freeTagContent(i);
        }
    }

    private static interface EntryUpdater {

        public void updateEntry();
    }

    // ------------------------------------------------------------------------------------------------------------------
    private SortTagEntry mSortTagEntry[];
    private AlbumSortTagMaker mSortTagMaker;
    private ArrayList<MediaSet.SortTag> mSortTags;
    private int mTagStart = 0;
    private int mTagEnd = 0;
    private int mActiveTagStart = 0;
    private int mActiveTagEnd = 0;
    private int mActiveRequestTagCount = 0;

    public static class SortTagEntry {

        // public Path path;
        public BitmapTexture bitmapTexture;
        public Texture content;
        public BitmapLoader tagLoader;
    }

    public SortTagEntry getSortTagEntry(int tagIndex) {
        if (!isActiveTag(tagIndex)) {
            Utils.fail("invalid tag: %s outsides (%s, %s)", tagIndex, mActiveTagStart, mActiveTagEnd);
        }
        return mSortTagEntry[tagIndex % mSortTagEntry.length];
    }

    public MediaSet.SortTag getSortTag(int tagIndex) {
        return mSortTags.get(tagIndex);
    }

    public void setSortTagMetrics(int width, int height) {
        mSortTagMaker.setSortTagMetrics(width, height);
    }

    public boolean isActiveTag(int tagIndex) {
        return tagIndex >= mActiveTagStart && tagIndex < mActiveTagEnd;
    }

    private void setTagWindow(int tagStart, int tagEnd) {
        if (tagStart == mTagStart && tagEnd == mTagEnd)
            return;
        if (!mIsActive) {
            mTagStart = tagStart;
            mTagEnd = tagEnd;
            return;
        }
        if (tagStart >= mTagEnd || mTagStart >= tagEnd) {
            for (int i = mTagStart, n = mTagEnd; i < n; ++i) {
                freeTagContent(i);
            }
            for (int i = tagStart; i < tagEnd; ++i) {
                prepareTagContent(i);
            }
            //GMLogger.i(TAG, "-----1------" + mTagStart + ":" + mTagEnd + ":" + tagStart + ":" + tagEnd);
        } else {
            for (int i = mTagStart; i < tagStart; ++i) {
                freeTagContent(i);
            }
            for (int i = tagEnd, n = mTagEnd; i < n; ++i) {
                freeTagContent(i);
            }
            for (int i = tagStart, n = mTagStart; i < n; ++i) {
                prepareTagContent(i);
            }
            for (int i = mTagEnd; i < tagEnd; ++i) {
                prepareTagContent(i);
            }
        }
        mTagStart = tagStart;
        mTagEnd = tagEnd;
    }

    public void setActiveTagWindow(int start, int end) {
        if (!(start <= end && end - start <= mSortTagEntry.length && end <= mSortTags.size())) {
            Utils.fail("%s, %s, %s, %s", start, end, mSortTagEntry.length, mSortTags.size());
        }
        SortTagEntry data[] = mSortTagEntry;
        mActiveTagStart = start;
        mActiveTagEnd = end;
        int contentStart = Utils.clamp((start + end) / 2 - data.length / 2, 0,
                Math.max(0, mSortTags.size() - data.length));
        int contentEnd = Math.min(contentStart + data.length, mSortTags.size());
        setTagWindow(contentStart, contentEnd);
        updateTextureUploadQueueTag();
        if (mIsActive)
            updateAllImageRequestsTag();
    }

    private void uploadBgTextureInTag(int index) {
        if (index < mTagEnd && index >= mTagStart) {
            SortTagEntry entry = mSortTagEntry[index % mSortTagEntry.length];
            if (entry.bitmapTexture != null) {
                mTextureUploader.addBgTexture(entry.bitmapTexture);
            }
        }
    }

    private void updateTextureUploadQueueTag() {
        if (!mIsActive)
            return;
        mTextureUploader.clear();
        // add foreground textures
        for (int i = mActiveTagStart, n = mActiveTagEnd; i < n; ++i) {
            SortTagEntry entry = mSortTagEntry[i % mSortTagEntry.length];
            if (entry.bitmapTexture != null) {
                mTextureUploader.addFgTexture(entry.bitmapTexture);
            }
        }
        // add background textures
        int range = Math.max((mTagEnd - mActiveTagEnd), (mActiveTagStart - mTagStart));
        for (int i = 0; i < range; ++i) {
            uploadBgTextureInTag(mActiveTagEnd + i);
            uploadBgTextureInTag(mActiveTagStart - i - 1);
        }
    }

    // We would like to request non active slots in the following order:
    // Order: 8 6 4 2 1 3 5 7
    // |---------|---------------|---------|
    // |<- active ->|
    // |<-------- cached range ----------->|
    private void requestNonactiveImagesTag() {
        int range = Math.max((mTagEnd - mActiveTagEnd), (mActiveTagStart - mTagStart));
        for (int i = 0; i < range; ++i) {
            requestTagImage(mActiveTagEnd + i);
            requestTagImage(mActiveTagStart - 1 - i);
        }
    }

    private void cancelNonactiveImagesTag() {
        int range = Math.max((mTagEnd - mActiveTagEnd), (mActiveTagStart - mTagStart));
        for (int i = 0; i < range; ++i) {
            cancelTagImage(mActiveTagEnd + i);
            cancelTagImage(mActiveTagStart - 1 - i);
        }
    }

    private void cancelTagImage(int slotIndex) {
        if (slotIndex < mTagStart || slotIndex >= mTagEnd)
            return;
        SortTagEntry item = mSortTagEntry[slotIndex % mSortTagEntry.length];
        if (item.tagLoader != null)
            item.tagLoader.cancelLoad();
    }

    // return whether the request is in progress or not
    private boolean requestTagImage(int tagIndex) {
        if (tagIndex < mTagStart || tagIndex >= mTagEnd)
            return false;
        SortTagEntry entry = mSortTagEntry[tagIndex % mSortTagEntry.length];
        if (entry.content != null)
            return false;
        entry.tagLoader.startLoad();
        return entry.tagLoader.isRequestInProgress();
    }

    private void freeTagContent(int tagIndex) {
        SortTagEntry data[] = mSortTagEntry;
        int index = tagIndex % data.length;
        SortTagEntry entry = data[index];
        if (entry.tagLoader != null)
            entry.tagLoader.recycle();
        if (entry.bitmapTexture != null)
            entry.bitmapTexture.recycle();
        data[index] = null;
    }

    private void prepareTagContent(int tagIndex) {
        SortTagEntry entry = new SortTagEntry();
        entry.tagLoader = new SortTagLoader(tagIndex, mSortTags.get(tagIndex).name, String.format("%d",
                mSortTags.get(tagIndex).count));
        mSortTagEntry[tagIndex % mSortTagEntry.length] = entry;
    }

    private void updateAllImageRequestsTag() {
        mActiveRequestTagCount = 0;
        for (int i = mActiveTagStart, n = mActiveTagEnd; i < n; ++i) {
            if (requestTagImage(i))
                ++mActiveRequestTagCount;
        }
        if (mActiveRequestTagCount == 0) {
            requestNonactiveImagesTag();
        } else {
            cancelNonactiveImagesTag();
        }
    }

    private class SortTagLoader extends BitmapLoader implements EntryUpdater {

        private final int mSortTagIndex;
        private final String mTagName;
        private final String mCount;

        public SortTagLoader(int index, String title, String count) {
            mSortTagIndex = index;
            mTagName = title;
            mCount = count;
        }

        @Override
        protected Future<Bitmap> submitBitmapTask(FutureListener<Bitmap> l) {
            return mThreadPool.submit(mSortTagMaker.requestTag(mTagName, mCount), l);
        }

        @Override
        protected void recycleBitmap(Bitmap bitmap) {
            mSortTagMaker.recycleSortTag(bitmap);
        }

        @Override
        protected void onLoadComplete(Bitmap bitmap) {
            mHandler.obtainMessage(MSG_UPDATE_ALBUM_ENTRY, this).sendToTarget();
        }

        @Override
        public void updateEntry() {
            Bitmap bitmap = getBitmap();
            if (bitmap == null)
                return; // Error or recycled
            SortTagEntry entry = mSortTagEntry[mSortTagIndex % mSortTagEntry.length];
            BitmapTexture texture = new BitmapTexture(bitmap);
            texture.setOpaque(false);
            entry.bitmapTexture = texture;
            entry.content = entry.bitmapTexture;
            mTextureUploader.addFgTexture(texture);
            if (isActiveTag(mSortTagIndex)) {
                mTextureUploader.addFgTexture(entry.bitmapTexture);
                --mActiveRequestTagCount;
                if (mActiveRequestTagCount == 0)
                    requestNonactiveImagesTag();
                if (mListener != null)
                    mListener.onContentChanged();
            } else {
                mTextureUploader.addBgTexture(entry.bitmapTexture);
            }
        }
    }
}
